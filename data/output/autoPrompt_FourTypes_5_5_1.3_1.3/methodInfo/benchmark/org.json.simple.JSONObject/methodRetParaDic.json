{
    "java.lang.String escape(java.lang.String s)": {
        "return type": "java.lang.String",
        "method name": "escape",
        "parameters": [
            "java.lang.String"
        ]
    },
    "java.lang.String toJSONString()": {
        "return type": "java.lang.String",
        "method name": "toJSONString",
        "parameters": []
    },
    "java.lang.String toJSONString(java.util.Map map)": {
        "return type": "java.lang.String",
        "method name": "toJSONString",
        "parameters": [
            "java.util.Map"
        ]
    },
    "java.lang.String toString()": {
        "return type": "java.lang.String",
        "method name": "toString",
        "parameters": []
    },
    "java.lang.String toString(java.lang.String key, java.lang.Object value)": {
        "return type": "java.lang.String",
        "method name": "toString",
        "parameters": [
            "java.lang.String",
            "java.lang.Object"
        ]
    },
    "void writeJSONString(java.util.Map map, java.io.Writer out)": {
        "return type": "void",
        "method name": "writeJSONString",
        "parameters": [
            "java.util.Map",
            "java.io.Writer"
        ]
    },
    "void writeJSONString(java.io.Writer out)": {
        "return type": "void",
        "method name": "writeJSONString",
        "parameters": [
            "java.io.Writer"
        ]
    },
    "void clear()": {
        "return type": "void",
        "method name": "clear",
        "parameters": []
    },
    "Object clone()": {
        "return type": "Object",
        "method name": "clone",
        "parameters": []
    },
    "V compute(K key, BiFunction remappingFunction)": {
        "return type": "V",
        "method name": "compute",
        "parameters": [
            "K",
            "BiFunction"
        ]
    },
    "V computeIfAbsent(K key, Function mappingFunction)": {
        "return type": "V",
        "method name": "computeIfAbsent",
        "parameters": [
            "K",
            "Function"
        ]
    },
    "V computeIfPresent(K key, BiFunction remappingFunction)": {
        "return type": "V",
        "method name": "computeIfPresent",
        "parameters": [
            "K",
            "BiFunction"
        ]
    },
    "boolean containsKey(Object key)": {
        "return type": "boolean",
        "method name": "containsKey",
        "parameters": [
            "Object"
        ]
    },
    "boolean containsValue(Object value)": {
        "return type": "boolean",
        "method name": "containsValue",
        "parameters": [
            "Object"
        ]
    },
    "Set entrySet()": {
        "return type": "Set",
        "method name": "entrySet",
        "parameters": []
    },
    "void forEach(BiConsumer action)": {
        "return type": "void",
        "method name": "forEach",
        "parameters": [
            "BiConsumer"
        ]
    },
    "V get(Object key)": {
        "return type": "V",
        "method name": "get",
        "parameters": [
            "Object"
        ]
    },
    "V getOrDefault(Object key, V defaultValue)": {
        "return type": "V",
        "method name": "getOrDefault",
        "parameters": [
            "Object",
            "V"
        ]
    },
    "boolean isEmpty()": {
        "return type": "boolean",
        "method name": "isEmpty",
        "parameters": []
    },
    "Set keySet()": {
        "return type": "Set",
        "method name": "keySet",
        "parameters": []
    },
    "V merge(K key, V value, BiFunction remappingFunction)": {
        "return type": "V",
        "method name": "merge",
        "parameters": [
            "K",
            "V",
            "BiFunction"
        ]
    },
    "V put(K key, V value)": {
        "return type": "V",
        "method name": "put",
        "parameters": [
            "K",
            "V"
        ]
    },
    "void putAll(Map m)": {
        "return type": "void",
        "method name": "putAll",
        "parameters": [
            "Map"
        ]
    },
    "V putIfAbsent(K key, V value)": {
        "return type": "V",
        "method name": "putIfAbsent",
        "parameters": [
            "K",
            "V"
        ]
    },
    "V remove(Object key)": {
        "return type": "V",
        "method name": "remove",
        "parameters": [
            "Object"
        ]
    },
    "boolean remove(Object key, Object value)": {
        "return type": "boolean",
        "method name": "remove",
        "parameters": [
            "Object",
            "Object"
        ]
    },
    "V replace(K key, V value)": {
        "return type": "V",
        "method name": "replace",
        "parameters": [
            "K",
            "V"
        ]
    },
    "boolean replace(K key, V oldValue, V newValue)": {
        "return type": "boolean",
        "method name": "replace",
        "parameters": [
            "K",
            "V",
            "V"
        ]
    },
    "void replaceAll(BiFunction function)": {
        "return type": "void",
        "method name": "replaceAll",
        "parameters": [
            "BiFunction"
        ]
    },
    "int size()": {
        "return type": "int",
        "method name": "size",
        "parameters": []
    },
    "Collection values()": {
        "return type": "Collection",
        "method name": "values",
        "parameters": []
    }
}
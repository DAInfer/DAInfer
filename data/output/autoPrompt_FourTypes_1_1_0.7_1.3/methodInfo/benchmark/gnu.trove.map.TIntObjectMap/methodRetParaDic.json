{
    "void clear()": {
        "return type": "void",
        "method name": "clear",
        "parameters": []
    },
    "boolean containsKey(int key)": {
        "return type": "boolean",
        "method name": "containsKey",
        "parameters": [
            "int"
        ]
    },
    "boolean containsValue(java.lang.Object value)": {
        "return type": "boolean",
        "method name": "containsValue",
        "parameters": [
            "java.lang.Object"
        ]
    },
    "boolean equals(java.lang.Object o)": {
        "return type": "boolean",
        "method name": "equals",
        "parameters": [
            "java.lang.Object"
        ]
    },
    "boolean forEachEntry(TIntObjectProcedure<? super V> procedure)": {
        "return type": "boolean",
        "method name": "forEachEntry",
        "parameters": [
            "TIntObjectProcedure"
        ]
    },
    "boolean forEachKey(TIntProcedure procedure)": {
        "return type": "boolean",
        "method name": "forEachKey",
        "parameters": [
            "TIntProcedure"
        ]
    },
    "boolean forEachValue(TObjectProcedure<? super V> procedure)": {
        "return type": "boolean",
        "method name": "forEachValue",
        "parameters": [
            "TObjectProcedure"
        ]
    },
    "V get(int key)": {
        "return type": "V",
        "method name": "get",
        "parameters": [
            "int"
        ]
    },
    "int getNoEntryKey()": {
        "return type": "int",
        "method name": "getNoEntryKey",
        "parameters": []
    },
    "int hashCode()": {
        "return type": "int",
        "method name": "hashCode",
        "parameters": []
    },
    "boolean isEmpty()": {
        "return type": "boolean",
        "method name": "isEmpty",
        "parameters": []
    },
    "TIntObjectIterator<V> iterator()": {
        "return type": "TIntObjectIterator",
        "method name": "iterator",
        "parameters": []
    },
    "int[] keys()": {
        "return type": "int[]",
        "method name": "keys",
        "parameters": []
    },
    "int[] keys(int[] array)": {
        "return type": "int[]",
        "method name": "keys",
        "parameters": [
            "int[]"
        ]
    },
    "TIntSet keySet()": {
        "return type": "TIntSet",
        "method name": "keySet",
        "parameters": []
    },
    "V put(int key, V value)": {
        "return type": "V",
        "method name": "put",
        "parameters": [
            "int",
            "V"
        ]
    },
    "void putAll(java.util.Map<? extends java.lang.Integer,? extends V> m)": {
        "return type": "void",
        "method name": "putAll",
        "parameters": [
            "java.util.Map"
        ]
    },
    "void putAll(TIntObjectMap<? extends V> map)": {
        "return type": "void",
        "method name": "putAll",
        "parameters": [
            "TIntObjectMap"
        ]
    },
    "V putIfAbsent(int key, V value)": {
        "return type": "V",
        "method name": "putIfAbsent",
        "parameters": [
            "int",
            "V"
        ]
    },
    "V remove(int key)": {
        "return type": "V",
        "method name": "remove",
        "parameters": [
            "int"
        ]
    },
    "boolean retainEntries(TIntObjectProcedure<? super V> procedure)": {
        "return type": "boolean",
        "method name": "retainEntries",
        "parameters": [
            "TIntObjectProcedure"
        ]
    },
    "int size()": {
        "return type": "int",
        "method name": "size",
        "parameters": []
    },
    "void transformValues(TObjectFunction<V,V> function)": {
        "return type": "void",
        "method name": "transformValues",
        "parameters": [
            "TObjectFunction"
        ]
    },
    "java.util.Collection<V> valueCollection()": {
        "return type": "java.util.Collection",
        "method name": "valueCollection",
        "parameters": []
    },
    "V[] values()": {
        "return type": "V[]",
        "method name": "values",
        "parameters": []
    },
    "V[] values(V[] array)": {
        "return type": "V[]",
        "method name": "values",
        "parameters": [
            "V[]"
        ]
    }
}
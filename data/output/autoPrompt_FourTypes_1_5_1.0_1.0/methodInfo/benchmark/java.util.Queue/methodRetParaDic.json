{
    "boolean add(E e)": {
        "return type": "boolean",
        "method name": "add",
        "parameters": [
            "E"
        ]
    },
    "E element()": {
        "return type": "E",
        "method name": "element",
        "parameters": []
    },
    "boolean offer(E e)": {
        "return type": "boolean",
        "method name": "offer",
        "parameters": [
            "E"
        ]
    },
    "E peek()": {
        "return type": "E",
        "method name": "peek",
        "parameters": []
    },
    "E poll()": {
        "return type": "E",
        "method name": "poll",
        "parameters": []
    },
    "E remove()": {
        "return type": "E",
        "method name": "remove",
        "parameters": []
    },
    "boolean addAll(Collection c)": {
        "return type": "boolean",
        "method name": "addAll",
        "parameters": [
            "Collection"
        ]
    },
    "void clear()": {
        "return type": "void",
        "method name": "clear",
        "parameters": []
    },
    "boolean contains(Object o)": {
        "return type": "boolean",
        "method name": "contains",
        "parameters": [
            "Object"
        ]
    },
    "boolean containsAll(Collection c)": {
        "return type": "boolean",
        "method name": "containsAll",
        "parameters": [
            "Collection"
        ]
    },
    "boolean equals(Object o)": {
        "return type": "boolean",
        "method name": "equals",
        "parameters": [
            "Object"
        ]
    },
    "int hashCode()": {
        "return type": "int",
        "method name": "hashCode",
        "parameters": []
    },
    "boolean isEmpty()": {
        "return type": "boolean",
        "method name": "isEmpty",
        "parameters": []
    },
    "Iterator iterator()": {
        "return type": "Iterator",
        "method name": "iterator",
        "parameters": []
    },
    "Stream parallelStream()": {
        "return type": "Stream",
        "method name": "parallelStream",
        "parameters": []
    },
    "boolean remove(Object o)": {
        "return type": "boolean",
        "method name": "remove",
        "parameters": [
            "Object"
        ]
    },
    "boolean removeAll(Collection c)": {
        "return type": "boolean",
        "method name": "removeAll",
        "parameters": [
            "Collection"
        ]
    },
    "boolean removeIf(Predicate filter)": {
        "return type": "boolean",
        "method name": "removeIf",
        "parameters": [
            "Predicate"
        ]
    },
    "boolean retainAll(Collection c)": {
        "return type": "boolean",
        "method name": "retainAll",
        "parameters": [
            "Collection"
        ]
    },
    "int size()": {
        "return type": "int",
        "method name": "size",
        "parameters": []
    },
    "Spliterator spliterator()": {
        "return type": "Spliterator",
        "method name": "spliterator",
        "parameters": []
    },
    "Stream stream()": {
        "return type": "Stream",
        "method name": "stream",
        "parameters": []
    },
    "Object[] toArray()": {
        "return type": "Object[]",
        "method name": "toArray",
        "parameters": []
    },
    "T[] toArray(T[] a)": {
        "return type": "T[]",
        "method name": "toArray",
        "parameters": [
            "T[]"
        ]
    },
    "void forEach(Consumer action)": {
        "return type": "void",
        "method name": "forEach",
        "parameters": [
            "Consumer"
        ]
    }
}
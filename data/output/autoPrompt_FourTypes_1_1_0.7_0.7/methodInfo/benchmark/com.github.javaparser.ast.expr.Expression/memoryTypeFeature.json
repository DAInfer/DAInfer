{
    "boolean replace(Node node)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "Node removeComment()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "boolean remove(Node node)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "Node getParentNodeForChildren()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node findRootNode()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean replace(Node node, Node replacementNode)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setParentNode(Node newParentNode)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "Node setParsed(Node.Parsedness parsed)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node.Parsedness getParsed()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void setData(DataKey key, M object)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "M getData(DataKey key)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    }
}
{
    "typeConsistentSpecs": [
        [
            "boolean containsValue(Object value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V get(Object key)",
            "Map.Entry firstEntry()"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry ceilingEntry(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "K firstKey()"
        ],
        [
            "boolean containsKey(Object key)",
            "NavigableSet navigableKeySet()"
        ],
        [
            "Map.Entry lowerEntry(K key)",
            "K ceilingKey(K key)"
        ],
        [
            "SortedMap subMap(K fromKey, K toKey)",
            "K ceilingKey(K key)"
        ],
        [
            "Map.Entry floorEntry(K key)",
            "K lowerKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Set entrySet()"
        ],
        [
            "K ceilingKey(K key)",
            "K higherKey(K key)"
        ],
        [
            "V get(Object key)",
            "SortedMap tailMap(K fromKey)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry higherEntry(K key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "K floorKey(K key)",
            "K lowerKey(K key)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V get(Object key)"
        ],
        [
            "Map.Entry floorEntry(K key)",
            "K ceilingKey(K key)"
        ],
        [
            "V get(Object key)",
            "SortedMap subMap(K fromKey, K toKey)"
        ],
        [
            "boolean containsValue(Object value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "Map.Entry lowerEntry(K key)",
            "K higherKey(K key)"
        ],
        [
            "SortedMap subMap(K fromKey, K toKey)",
            "K higherKey(K key)"
        ],
        [
            "V remove(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "V get(Object key)",
            "NavigableSet navigableKeySet()"
        ],
        [
            "SortedMap headMap(K toKey)",
            "K floorKey(K key)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "NavigableMap descendingMap()"
        ],
        [
            "V remove(Object key)",
            "Set keySet()"
        ],
        [
            "V get(Object key)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V get(Object key)",
            "Map.Entry ceilingEntry(K key)"
        ],
        [
            "V remove(Object key)",
            "K lowerKey(K key)"
        ],
        [
            "K floorKey(K key)",
            "K ceilingKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "V put(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry pollFirstEntry()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "K lastKey()"
        ],
        [
            "boolean containsKey(Object key)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "K lastKey()"
        ],
        [
            "boolean containsKey(Object key)",
            "V get(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V put(K key, V value)"
        ],
        [
            "Map.Entry floorEntry(K key)",
            "K higherKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry lowerEntry(K key)"
        ],
        [
            "Map.Entry ceilingEntry(K key)",
            "K lastKey()"
        ],
        [
            "K ceilingKey(K key)",
            "K firstKey()"
        ],
        [
            "V remove(Object key)",
            "K ceilingKey(K key)"
        ],
        [
            "V replace(K key, V value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "K floorKey(K key)",
            "K higherKey(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "NavigableMap tailMap(K fromKey, boolean inclusive)"
        ],
        [
            "V put(K key, V value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V replace(K key, V value)",
            "K lastKey()"
        ],
        [
            "V get(Object key)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "NavigableMap tailMap(K fromKey, boolean inclusive)"
        ],
        [
            "boolean containsKey(Object key)",
            "NavigableSet descendingKeySet()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "K lastKey()"
        ],
        [
            "Map.Entry lowerEntry(K key)",
            "K firstKey()"
        ],
        [
            "SortedMap subMap(K fromKey, K toKey)",
            "K firstKey()"
        ],
        [
            "V remove(Object key)",
            "Map.Entry lastEntry()"
        ],
        [
            "V get(Object key)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "V replace(K key, V value)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "NavigableSet descendingKeySet()"
        ],
        [
            "V put(K key, V value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "SortedMap headMap(K toKey)"
        ],
        [
            "V remove(Object key)",
            "K higherKey(K key)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "Set keySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "K lowerKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "SortedMap headMap(K toKey)"
        ],
        [
            "V put(K key, V value)",
            "K lastKey()"
        ],
        [
            "V remove(Object key)",
            "Map.Entry firstEntry()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "K lastKey()"
        ],
        [
            "K lowerKey(K key)",
            "K ceilingKey(K key)"
        ],
        [
            "Map.Entry floorEntry(K key)",
            "K firstKey()"
        ],
        [
            "V remove(Object key)",
            "Map.Entry pollLastEntry()"
        ],
        [
            "Map.Entry higherEntry(K key)",
            "K lowerKey(K key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V remove(Object key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry higherEntry(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Comparator comparator()"
        ],
        [
            "boolean containsValue(Object value)",
            "K ceilingKey(K key)"
        ],
        [
            "K floorKey(K key)",
            "K firstKey()"
        ],
        [
            "boolean containsKey(Object key)",
            "Set entrySet()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "V remove(Object key)"
        ],
        [
            "Map.Entry higherEntry(K key)",
            "K ceilingKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Set entrySet()"
        ],
        [
            "K lowerKey(K key)",
            "K higherKey(K key)"
        ],
        [
            "SortedMap headMap(K toKey)",
            "K lowerKey(K key)"
        ],
        [
            "V get(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry lastEntry()"
        ],
        [
            "boolean containsValue(Object value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V get(Object key)",
            "Set keySet()"
        ],
        [
            "V remove(Object key)",
            "K firstKey()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "K floorKey(K key)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "K floorKey(K key)"
        ],
        [
            "V remove(Object key)",
            "NavigableSet navigableKeySet()"
        ],
        [
            "V get(Object key)",
            "K lowerKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "K higherKey(K key)"
        ],
        [
            "V remove(Object key)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "NavigableMap tailMap(K fromKey, boolean inclusive)",
            "K lastKey()"
        ],
        [
            "boolean containsKey(Object key)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "SortedMap headMap(K toKey)",
            "K ceilingKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Collection values()"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry pollFirstEntry()"
        ],
        [
            "Map.Entry higherEntry(K key)",
            "K higherKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry pollLastEntry()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V get(Object key)",
            "K ceilingKey(K key)"
        ],
        [
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
            "K floorKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry pollFirstEntry()"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry lowerEntry(K key)"
        ],
        [
            "V replace(K key, V value)",
            "K floorKey(K key)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "K lastKey()"
        ],
        [
            "V get(Object key)",
            "V remove(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry lowerEntry(K key)"
        ],
        [
            "V remove(Object key)",
            "NavigableMap descendingMap()"
        ],
        [
            "SortedMap headMap(K toKey)",
            "K higherKey(K key)"
        ],
        [
            "K lowerKey(K key)",
            "K firstKey()"
        ],
        [
            "V get(Object key)",
            "Map.Entry lastEntry()"
        ],
        [
            "V get(Object key)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V put(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "K floorKey(K key)"
        ],
        [
            "V get(Object key)",
            "K higherKey(K key)"
        ],
        [
            "V remove(Object key)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "K firstKey()"
        ],
        [
            "V remove(Object key)",
            "V get(Object key)"
        ],
        [
            "K higherKey(K key)",
            "K floorKey(K key)"
        ],
        [
            "SortedMap tailMap(K fromKey)",
            "K lastKey()"
        ],
        [
            "NavigableMap headMap(K toKey, boolean inclusive)",
            "K lastKey()"
        ],
        [
            "V get(Object key)",
            "Map.Entry pollLastEntry()"
        ],
        [
            "Map.Entry higherEntry(K key)",
            "K firstKey()"
        ],
        [
            "V remove(Object key)",
            "NavigableMap tailMap(K fromKey, boolean inclusive)"
        ],
        [
            "V put(K key, V value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry higherEntry(K key)"
        ],
        [
            "V remove(Object key)",
            "NavigableSet descendingKeySet()"
        ],
        [
            "boolean containsKey(Object key)",
            "Comparator comparator()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V replace(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V put(K key, V value)"
        ],
        [
            "K ceilingKey(K key)",
            "K lastKey()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry floorEntry(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "K lastKey()"
        ],
        [
            "SortedMap headMap(K toKey)",
            "K firstKey()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Comparator comparator()"
        ],
        [
            "V remove(Object key)",
            "SortedMap headMap(K toKey)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "K lowerKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "NavigableMap descendingMap()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "K lowerKey(K key)"
        ],
        [
            "NavigableMap tailMap(K fromKey, boolean inclusive)",
            "K floorKey(K key)"
        ],
        [
            "V get(Object key)",
            "K firstKey()"
        ],
        [
            "boolean containsValue(Object value)",
            "V put(K key, V value)"
        ],
        [
            "Map.Entry ceilingEntry(K key)",
            "K lowerKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "NavigableMap headMap(K toKey, boolean inclusive)"
        ],
        [
            "SortedMap subMap(K fromKey, K toKey)",
            "K lastKey()"
        ],
        [
            "boolean containsValue(Object value)",
            "V get(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "K floorKey(K key)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "K ceilingKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry ceilingEntry(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "K floorKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "K lastKey()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V remove(Object key)"
        ],
        [
            "V replace(K key, V value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "Map.Entry ceilingEntry(K key)",
            "K ceilingKey(K key)"
        ],
        [
            "V remove(Object key)",
            "Set entrySet()"
        ],
        [
            "boolean containsKey(Object key)",
            "Collection values()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "K lowerKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "NavigableMap tailMap(K fromKey, boolean inclusive)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Collection values()"
        ],
        [
            "V put(K key, V value)",
            "V replace(K key, V value)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "NavigableSet descendingKeySet()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "K higherKey(K key)"
        ],
        [
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
            "K lastKey()"
        ],
        [
            "V get(Object key)",
            "NavigableMap descendingMap()"
        ],
        [
            "V put(K key, V value)",
            "K lowerKey(K key)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "K ceilingKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "SortedMap headMap(K toKey)"
        ],
        [
            "V get(Object key)",
            "V put(K key, V value)"
        ],
        [
            "SortedMap tailMap(K fromKey)",
            "K floorKey(K key)"
        ],
        [
            "Map.Entry ceilingEntry(K key)",
            "K higherKey(K key)"
        ],
        [
            "NavigableMap headMap(K toKey, boolean inclusive)",
            "K floorKey(K key)"
        ],
        [
            "V remove(Object key)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V remove(Object key)",
            "Map.Entry pollFirstEntry()"
        ],
        [
            "V put(K key, V value)",
            "K ceilingKey(K key)"
        ],
        [
            "V remove(Object key)",
            "Map.Entry lowerEntry(K key)"
        ],
        [
            "V put(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "K higherKey(K key)"
        ],
        [
            "V get(Object key)",
            "NavigableMap tailMap(K fromKey, boolean inclusive)"
        ],
        [
            "K ceilingKey(K key)",
            "K floorKey(K key)"
        ],
        [
            "K higherKey(K key)",
            "K lastKey()"
        ],
        [
            "boolean containsValue(Object value)",
            "Set entrySet()"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "K floorKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "SortedMap tailMap(K fromKey)"
        ],
        [
            "V get(Object key)",
            "NavigableSet descendingKeySet()"
        ],
        [
            "V put(K key, V value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "SortedMap subMap(K fromKey, K toKey)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "K firstKey()"
        ],
        [
            "V put(K key, V value)",
            "K higherKey(K key)"
        ],
        [
            "V get(Object key)",
            "SortedMap headMap(K toKey)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "K firstKey()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "SortedMap subMap(K fromKey, K toKey)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry floorEntry(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"
        ],
        [
            "Map.Entry ceilingEntry(K key)",
            "K firstKey()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "K lastKey()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry ceilingEntry(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry floorEntry(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsKey(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry pollFirstEntry()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Set keySet()"
        ],
        [
            "boolean containsKey(Object key)",
            "NavigableMap headMap(K toKey, boolean inclusive)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "K lowerKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "Map.Entry floorEntry(K key)",
            "K floorKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "NavigableMap headMap(K toKey, boolean inclusive)"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry lowerEntry(K key)"
        ],
        [
            "V remove(Object key)",
            "Map.Entry higherEntry(K key)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "K firstKey()"
        ],
        [
            "V get(Object key)",
            "Set entrySet()"
        ],
        [
            "V remove(Object key)",
            "Comparator comparator()"
        ],
        [
            "V replace(K key, V value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "K lastKey()"
        ],
        [
            "Map.Entry higherEntry(K key)",
            "K lastKey()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V put(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V put(K key, V value)",
            "K firstKey()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V get(Object key)"
        ],
        [
            "SortedMap tailMap(K fromKey)",
            "K lowerKey(K key)"
        ],
        [
            "V put(K key, V value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "NavigableMap headMap(K toKey, boolean inclusive)",
            "K lowerKey(K key)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V remove(Object key)",
            "K floorKey(K key)"
        ],
        [
            "V get(Object key)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V get(Object key)",
            "Map.Entry pollFirstEntry()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "K higherKey(K key)"
        ],
        [
            "V replace(K key, V value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V get(Object key)",
            "K lastKey()"
        ],
        [
            "V remove(Object key)",
            "Collection values()"
        ],
        [
            "NavigableMap headMap(K toKey, boolean inclusive)",
            "K ceilingKey(K key)"
        ],
        [
            "V get(Object key)",
            "Map.Entry lowerEntry(K key)"
        ],
        [
            "V replace(K key, V value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry firstEntry()"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "K lowerKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry higherEntry(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "Comparator comparator()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "K floorKey(K key)"
        ],
        [
            "V put(K key, V value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "SortedMap tailMap(K fromKey)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "K ceilingKey(K key)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V replace(K key, V value)"
        ],
        [
            "V put(K key, V value)",
            "V get(Object key)"
        ],
        [
            "NavigableMap headMap(K toKey, boolean inclusive)",
            "K higherKey(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "SortedMap subMap(K fromKey, K toKey)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V get(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "SortedMap tailMap(K fromKey)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Set keySet()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "K lowerKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "SortedMap subMap(K fromKey, K toKey)"
        ],
        [
            "boolean containsValue(Object value)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry ceilingEntry(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "K firstKey()"
        ],
        [
            "Map.Entry lowerEntry(K key)",
            "K lastKey()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "NavigableSet navigableKeySet()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "Map.Entry higherEntry(K key)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "Collection values()"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "K higherKey(K key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V get(Object key)",
            "Map.Entry higherEntry(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "K ceilingKey(K key)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "K ceilingKey(K key)"
        ],
        [
            "V get(Object key)",
            "Comparator comparator()"
        ],
        [
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
            "K lowerKey(K key)"
        ],
        [
            "V replace(K key, V value)",
            "K lowerKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V remove(Object key)"
        ],
        [
            "Map.Entry floorEntry(K key)",
            "K lastKey()"
        ],
        [
            "V remove(Object key)",
            "Map.Entry floorEntry(K key)"
        ],
        [
            "V remove(Object key)",
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"
        ],
        [
            "SortedMap tailMap(K fromKey)",
            "K firstKey()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V replace(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry lastEntry()"
        ],
        [
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
            "K ceilingKey(K key)"
        ],
        [
            "NavigableMap headMap(K toKey, boolean inclusive)",
            "K firstKey()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V replace(K key, V value)",
            "K ceilingKey(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V remove(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "K higherKey(K key)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "K higherKey(K key)"
        ],
        [
            "K floorKey(K key)",
            "K lastKey()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "K lowerKey(K key)"
        ],
        [
            "V get(Object key)",
            "K floorKey(K key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "NavigableMap descendingMap()"
        ],
        [
            "V remove(Object key)",
            "NavigableMap headMap(K toKey, boolean inclusive)"
        ],
        [
            "V replace(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "K higherKey(K key)",
            "K lowerKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry firstEntry()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Map.Entry pollLastEntry()"
        ],
        [
            "V get(Object key)",
            "Collection values()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V get(Object key)"
        ],
        [
            "V remove(Object key)",
            "K lastKey()"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "K firstKey()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "K ceilingKey(K key)"
        ],
        [
            "V replace(K key, V value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
            "K higherKey(K key)"
        ],
        [
            "V replace(K key, V value)",
            "K higherKey(K key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V replace(K key, V value)"
        ],
        [
            "K higherKey(K key)",
            "K ceilingKey(K key)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "K lowerKey(K key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry floorEntry(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "K higherKey(K key)"
        ],
        [
            "NavigableMap tailMap(K fromKey, boolean inclusive)",
            "K lowerKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "K firstKey()"
        ],
        [
            "Map.Entry lowerEntry(K key)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "NavigableSet navigableKeySet()"
        ],
        [
            "boolean containsKey(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "K ceilingKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "NavigableMap headMap(K toKey, boolean inclusive)"
        ],
        [
            "boolean containsKey(Object key)",
            "Set keySet()"
        ],
        [
            "K lowerKey(K key)",
            "K lastKey()"
        ],
        [
            "boolean containsKey(Object key)",
            "K lowerKey(K key)"
        ],
        [
            "NavigableMap tailMap(K fromKey, boolean inclusive)",
            "K ceilingKey(K key)"
        ],
        [
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
            "K firstKey()"
        ],
        [
            "boolean containsValue(Object value)",
            "K lastKey()"
        ],
        [
            "V replace(K key, V value)",
            "K firstKey()"
        ],
        [
            "boolean containsKey(Object key)",
            "K ceilingKey(K key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "K higherKey(K key)"
        ],
        [
            "V remove(Object key)",
            "SortedMap tailMap(K fromKey)"
        ],
        [
            "V get(Object key)",
            "Map.Entry floorEntry(K key)"
        ],
        [
            "V remove(Object key)",
            "SortedMap subMap(K fromKey, K toKey)"
        ],
        [
            "V get(Object key)",
            "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "K ceilingKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "NavigableMap descendingMap()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "V remove(Object key)"
        ],
        [
            "NavigableMap tailMap(K fromKey, boolean inclusive)",
            "K higherKey(K key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V put(K key, V value)"
        ],
        [
            "V get(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "K firstKey()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V remove(Object key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "Map.Entry ceilingEntry(K key)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry lastEntry()"
        ],
        [
            "V remove(Object key)",
            "Map.Entry ceilingEntry(K key)"
        ],
        [
            "V get(Object key)",
            "NavigableMap headMap(K toKey, boolean inclusive)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V get(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "K higherKey(K key)",
            "K firstKey()"
        ],
        [
            "boolean containsValue(Object value)",
            "Map.Entry firstEntry()"
        ],
        [
            "boolean containsKey(Object key)",
            "K higherKey(K key)"
        ],
        [
            "SortedMap headMap(K toKey)",
            "K lastKey()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry lastEntry()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry firstEntry()"
        ],
        [
            "SortedMap tailMap(K fromKey)",
            "K ceilingKey(K key)"
        ],
        [
            "V replace(K key, V value)",
            "V put(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "NavigableMap tailMap(K fromKey, boolean inclusive)"
        ],
        [
            "boolean containsKey(Object key)",
            "Map.Entry pollLastEntry()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "K floorKey(K key)"
        ],
        [
            "K ceilingKey(K key)",
            "K lowerKey(K key)"
        ],
        [
            "V replace(K key, V value)",
            "V get(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Map.Entry pollLastEntry()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "NavigableSet descendingKeySet()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "K firstKey()"
        ],
        [
            "boolean containsValue(Object value)",
            "SortedMap tailMap(K fromKey)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "SortedMap headMap(K toKey)"
        ],
        [
            "V put(K key, V value)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "SortedMap subMap(K fromKey, K toKey)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V put(K key, V value)"
        ],
        [
            "Map.Entry lowerEntry(K key)",
            "K lowerKey(K key)"
        ],
        [
            "SortedMap subMap(K fromKey, K toKey)",
            "K lowerKey(K key)"
        ],
        [
            "NavigableMap tailMap(K fromKey, boolean inclusive)",
            "K firstKey()"
        ],
        [
            "SortedMap tailMap(K fromKey)",
            "K higherKey(K key)"
        ],
        [
            "K lowerKey(K key)",
            "K floorKey(K key)"
        ],
        [
            "boolean containsValue(Object value)",
            "NavigableSet navigableKeySet()"
        ]
    ]
}
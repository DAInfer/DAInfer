{
    "typeConsistentSpecs": [
        [
            "Matrix minus(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix timesEquals(double s)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix timesEquals(double s)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix copy()"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix copy()"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix copy()"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix times(double s)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix times(double s)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix identity(int m, int n)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix random(int m, int n)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix minus(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix plus(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix plus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix random(int m, int n)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix minus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix random(int m, int n)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix random(int m, int n)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix uminus()"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix copy()"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix inverse()"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix times(double s)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix transpose()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix constructWithCopy(double[][] A)",
            "double[][] getArrayCopy()"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix inverse()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix minus(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix transpose()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix transpose()"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix transpose()"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix copy()"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix times(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix constructWithCopy(double[][] A)",
            "double[][] getArray()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix solve(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix solveTranspose(Matrix B)"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix uminus()"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix uminus()"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix read(BufferedReader input)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix uminus()"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix uminus()"
        ],
        [
            "Matrix arrayTimes(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix arrayRightDivide(Matrix B)"
        ],
        [
            "Matrix solve(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix inverse()"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix timesEquals(double s)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix arrayLeftDivide(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix plusEquals(Matrix B)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix arrayTimes(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix plus(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int[] c, Matrix X)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix times(double s)"
        ],
        [
            "Matrix arrayTimesEquals(Matrix B)",
            "Matrix minusEquals(Matrix B)"
        ],
        [
            "void setMatrix(int[] r, int j0, int j1, Matrix X)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix copy()"
        ],
        [
            "void setMatrix(int i0, int i1, int[] c, Matrix X)",
            "Matrix getMatrix(int i0, int i1, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivideEquals(Matrix B)",
            "Matrix arrayTimesEquals(Matrix B)"
        ],
        [
            "Matrix arrayRightDivide(Matrix B)",
            "Matrix times(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix constructWithCopy(double[][] A)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix arrayLeftDivideEquals(Matrix B)"
        ],
        [
            "Matrix solveTranspose(Matrix B)",
            "Matrix transpose()"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix minusEquals(Matrix B)",
            "Matrix getMatrix(int[] r, int j0, int j1)"
        ],
        [
            "Matrix arrayLeftDivide(Matrix B)",
            "Matrix getMatrix(int i0, int i1, int[] c)"
        ],
        [
            "Matrix plusEquals(Matrix B)",
            "Matrix identity(int m, int n)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix arrayRightDivideEquals(Matrix B)"
        ],
        [
            "Matrix minus(Matrix B)",
            "Matrix copy()"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix random(int m, int n)"
        ],
        [
            "Matrix arrayRightDivideEquals(Matrix B)",
            "Matrix solve(Matrix B)"
        ],
        [
            "Matrix plus(Matrix B)",
            "Matrix getMatrix(int[] r, int[] c)"
        ],
        [
            "Matrix times(Matrix B)",
            "Matrix minus(Matrix B)"
        ]
    ]
}
{
    "AnnotationExpr asAnnotationExpr()": {
        "return type": "AnnotationExpr",
        "method name": "asAnnotationExpr",
        "parameters": []
    },
    "ArrayAccessExpr asArrayAccessExpr()": {
        "return type": "ArrayAccessExpr",
        "method name": "asArrayAccessExpr",
        "parameters": []
    },
    "ArrayCreationExpr asArrayCreationExpr()": {
        "return type": "ArrayCreationExpr",
        "method name": "asArrayCreationExpr",
        "parameters": []
    },
    "ArrayInitializerExpr asArrayInitializerExpr()": {
        "return type": "ArrayInitializerExpr",
        "method name": "asArrayInitializerExpr",
        "parameters": []
    },
    "AssignExpr asAssignExpr()": {
        "return type": "AssignExpr",
        "method name": "asAssignExpr",
        "parameters": []
    },
    "BinaryExpr asBinaryExpr()": {
        "return type": "BinaryExpr",
        "method name": "asBinaryExpr",
        "parameters": []
    },
    "BooleanLiteralExpr asBooleanLiteralExpr()": {
        "return type": "BooleanLiteralExpr",
        "method name": "asBooleanLiteralExpr",
        "parameters": []
    },
    "CastExpr asCastExpr()": {
        "return type": "CastExpr",
        "method name": "asCastExpr",
        "parameters": []
    },
    "CharLiteralExpr asCharLiteralExpr()": {
        "return type": "CharLiteralExpr",
        "method name": "asCharLiteralExpr",
        "parameters": []
    },
    "ClassExpr asClassExpr()": {
        "return type": "ClassExpr",
        "method name": "asClassExpr",
        "parameters": []
    },
    "ConditionalExpr asConditionalExpr()": {
        "return type": "ConditionalExpr",
        "method name": "asConditionalExpr",
        "parameters": []
    },
    "DoubleLiteralExpr asDoubleLiteralExpr()": {
        "return type": "DoubleLiteralExpr",
        "method name": "asDoubleLiteralExpr",
        "parameters": []
    },
    "EnclosedExpr asEnclosedExpr()": {
        "return type": "EnclosedExpr",
        "method name": "asEnclosedExpr",
        "parameters": []
    },
    "FieldAccessExpr asFieldAccessExpr()": {
        "return type": "FieldAccessExpr",
        "method name": "asFieldAccessExpr",
        "parameters": []
    },
    "InstanceOfExpr asInstanceOfExpr()": {
        "return type": "InstanceOfExpr",
        "method name": "asInstanceOfExpr",
        "parameters": []
    },
    "IntegerLiteralExpr asIntegerLiteralExpr()": {
        "return type": "IntegerLiteralExpr",
        "method name": "asIntegerLiteralExpr",
        "parameters": []
    },
    "LambdaExpr asLambdaExpr()": {
        "return type": "LambdaExpr",
        "method name": "asLambdaExpr",
        "parameters": []
    },
    "LiteralExpr asLiteralExpr()": {
        "return type": "LiteralExpr",
        "method name": "asLiteralExpr",
        "parameters": []
    },
    "LiteralStringValueExpr asLiteralStringValueExpr()": {
        "return type": "LiteralStringValueExpr",
        "method name": "asLiteralStringValueExpr",
        "parameters": []
    },
    "LongLiteralExpr asLongLiteralExpr()": {
        "return type": "LongLiteralExpr",
        "method name": "asLongLiteralExpr",
        "parameters": []
    },
    "MarkerAnnotationExpr asMarkerAnnotationExpr()": {
        "return type": "MarkerAnnotationExpr",
        "method name": "asMarkerAnnotationExpr",
        "parameters": []
    },
    "MethodCallExpr asMethodCallExpr()": {
        "return type": "MethodCallExpr",
        "method name": "asMethodCallExpr",
        "parameters": []
    },
    "MethodReferenceExpr asMethodReferenceExpr()": {
        "return type": "MethodReferenceExpr",
        "method name": "asMethodReferenceExpr",
        "parameters": []
    },
    "NameExpr asNameExpr()": {
        "return type": "NameExpr",
        "method name": "asNameExpr",
        "parameters": []
    },
    "NormalAnnotationExpr asNormalAnnotationExpr()": {
        "return type": "NormalAnnotationExpr",
        "method name": "asNormalAnnotationExpr",
        "parameters": []
    },
    "NullLiteralExpr asNullLiteralExpr()": {
        "return type": "NullLiteralExpr",
        "method name": "asNullLiteralExpr",
        "parameters": []
    },
    "ObjectCreationExpr asObjectCreationExpr()": {
        "return type": "ObjectCreationExpr",
        "method name": "asObjectCreationExpr",
        "parameters": []
    },
    "SingleMemberAnnotationExpr asSingleMemberAnnotationExpr()": {
        "return type": "SingleMemberAnnotationExpr",
        "method name": "asSingleMemberAnnotationExpr",
        "parameters": []
    },
    "StringLiteralExpr asStringLiteralExpr()": {
        "return type": "StringLiteralExpr",
        "method name": "asStringLiteralExpr",
        "parameters": []
    },
    "SuperExpr asSuperExpr()": {
        "return type": "SuperExpr",
        "method name": "asSuperExpr",
        "parameters": []
    },
    "ThisExpr asThisExpr()": {
        "return type": "ThisExpr",
        "method name": "asThisExpr",
        "parameters": []
    },
    "TypeExpr asTypeExpr()": {
        "return type": "TypeExpr",
        "method name": "asTypeExpr",
        "parameters": []
    },
    "UnaryExpr asUnaryExpr()": {
        "return type": "UnaryExpr",
        "method name": "asUnaryExpr",
        "parameters": []
    },
    "VariableDeclarationExpr asVariableDeclarationExpr()": {
        "return type": "VariableDeclarationExpr",
        "method name": "asVariableDeclarationExpr",
        "parameters": []
    },
    "Expression clone()": {
        "return type": "Expression",
        "method name": "clone",
        "parameters": []
    },
    "ExpressionMetaModel getMetaModel()": {
        "return type": "ExpressionMetaModel",
        "method name": "getMetaModel",
        "parameters": []
    },
    "void ifAnnotationExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifAnnotationExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifArrayAccessExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifArrayAccessExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifArrayCreationExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifArrayCreationExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifArrayInitializerExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifArrayInitializerExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifAssignExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifAssignExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifBinaryExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifBinaryExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifBooleanLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifBooleanLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifCastExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifCastExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifCharLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifCharLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifClassExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifClassExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifConditionalExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifConditionalExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifDoubleLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifDoubleLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifEnclosedExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifEnclosedExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifFieldAccessExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifFieldAccessExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifInstanceOfExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifInstanceOfExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifIntegerLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifIntegerLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifLambdaExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifLambdaExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifLiteralStringValueExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifLiteralStringValueExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifLongLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifLongLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifMarkerAnnotationExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifMarkerAnnotationExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifMethodCallExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifMethodCallExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifMethodReferenceExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifMethodReferenceExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifNameExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifNameExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifNormalAnnotationExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifNormalAnnotationExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifNullLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifNullLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifObjectCreationExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifObjectCreationExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifSingleMemberAnnotationExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifSingleMemberAnnotationExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifStringLiteralExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifStringLiteralExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifSuperExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifSuperExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifThisExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifThisExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifTypeExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifTypeExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifUnaryExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifUnaryExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "void ifVariableDeclarationExpr(Consumer action)": {
        "return type": "void",
        "method name": "ifVariableDeclarationExpr",
        "parameters": [
            "Consumer"
        ]
    },
    "boolean isAnnotationExpr()": {
        "return type": "boolean",
        "method name": "isAnnotationExpr",
        "parameters": []
    },
    "boolean isArrayAccessExpr()": {
        "return type": "boolean",
        "method name": "isArrayAccessExpr",
        "parameters": []
    },
    "boolean isArrayCreationExpr()": {
        "return type": "boolean",
        "method name": "isArrayCreationExpr",
        "parameters": []
    },
    "boolean isArrayInitializerExpr()": {
        "return type": "boolean",
        "method name": "isArrayInitializerExpr",
        "parameters": []
    },
    "boolean isAssignExpr()": {
        "return type": "boolean",
        "method name": "isAssignExpr",
        "parameters": []
    },
    "boolean isBinaryExpr()": {
        "return type": "boolean",
        "method name": "isBinaryExpr",
        "parameters": []
    },
    "boolean isBooleanLiteralExpr()": {
        "return type": "boolean",
        "method name": "isBooleanLiteralExpr",
        "parameters": []
    },
    "boolean isCastExpr()": {
        "return type": "boolean",
        "method name": "isCastExpr",
        "parameters": []
    },
    "boolean isCharLiteralExpr()": {
        "return type": "boolean",
        "method name": "isCharLiteralExpr",
        "parameters": []
    },
    "boolean isClassExpr()": {
        "return type": "boolean",
        "method name": "isClassExpr",
        "parameters": []
    },
    "boolean isConditionalExpr()": {
        "return type": "boolean",
        "method name": "isConditionalExpr",
        "parameters": []
    },
    "boolean isDoubleLiteralExpr()": {
        "return type": "boolean",
        "method name": "isDoubleLiteralExpr",
        "parameters": []
    },
    "boolean isEnclosedExpr()": {
        "return type": "boolean",
        "method name": "isEnclosedExpr",
        "parameters": []
    },
    "boolean isFieldAccessExpr()": {
        "return type": "boolean",
        "method name": "isFieldAccessExpr",
        "parameters": []
    },
    "boolean isInstanceOfExpr()": {
        "return type": "boolean",
        "method name": "isInstanceOfExpr",
        "parameters": []
    },
    "boolean isIntegerLiteralExpr()": {
        "return type": "boolean",
        "method name": "isIntegerLiteralExpr",
        "parameters": []
    },
    "boolean isLambdaExpr()": {
        "return type": "boolean",
        "method name": "isLambdaExpr",
        "parameters": []
    },
    "boolean isLiteralExpr()": {
        "return type": "boolean",
        "method name": "isLiteralExpr",
        "parameters": []
    },
    "boolean isLiteralStringValueExpr()": {
        "return type": "boolean",
        "method name": "isLiteralStringValueExpr",
        "parameters": []
    },
    "boolean isLongLiteralExpr()": {
        "return type": "boolean",
        "method name": "isLongLiteralExpr",
        "parameters": []
    },
    "boolean isMarkerAnnotationExpr()": {
        "return type": "boolean",
        "method name": "isMarkerAnnotationExpr",
        "parameters": []
    },
    "boolean isMethodCallExpr()": {
        "return type": "boolean",
        "method name": "isMethodCallExpr",
        "parameters": []
    },
    "boolean isMethodReferenceExpr()": {
        "return type": "boolean",
        "method name": "isMethodReferenceExpr",
        "parameters": []
    },
    "boolean isNameExpr()": {
        "return type": "boolean",
        "method name": "isNameExpr",
        "parameters": []
    },
    "boolean isNormalAnnotationExpr()": {
        "return type": "boolean",
        "method name": "isNormalAnnotationExpr",
        "parameters": []
    },
    "boolean isNullLiteralExpr()": {
        "return type": "boolean",
        "method name": "isNullLiteralExpr",
        "parameters": []
    },
    "boolean isObjectCreationExpr()": {
        "return type": "boolean",
        "method name": "isObjectCreationExpr",
        "parameters": []
    },
    "boolean isSingleMemberAnnotationExpr()": {
        "return type": "boolean",
        "method name": "isSingleMemberAnnotationExpr",
        "parameters": []
    },
    "boolean isStringLiteralExpr()": {
        "return type": "boolean",
        "method name": "isStringLiteralExpr",
        "parameters": []
    },
    "boolean isSuperExpr()": {
        "return type": "boolean",
        "method name": "isSuperExpr",
        "parameters": []
    },
    "boolean isThisExpr()": {
        "return type": "boolean",
        "method name": "isThisExpr",
        "parameters": []
    },
    "boolean isTypeExpr()": {
        "return type": "boolean",
        "method name": "isTypeExpr",
        "parameters": []
    },
    "boolean isUnaryExpr()": {
        "return type": "boolean",
        "method name": "isUnaryExpr",
        "parameters": []
    },
    "boolean isVariableDeclarationExpr()": {
        "return type": "boolean",
        "method name": "isVariableDeclarationExpr",
        "parameters": []
    },
    "boolean remove(Node node)": {
        "return type": "boolean",
        "method name": "remove",
        "parameters": [
            "Node"
        ]
    },
    "boolean replace(Node node, Node replacementNode)": {
        "return type": "boolean",
        "method name": "replace",
        "parameters": [
            "Node",
            "Node"
        ]
    },
    "void addOrphanComment(Comment comment)": {
        "return type": "void",
        "method name": "addOrphanComment",
        "parameters": [
            "Comment"
        ]
    },
    "Node clone()": {
        "return type": "Node",
        "method name": "clone",
        "parameters": []
    },
    "boolean containsData(DataKey key)": {
        "return type": "boolean",
        "method name": "containsData",
        "parameters": [
            "DataKey"
        ]
    },
    "void customInitialization()": {
        "return type": "void",
        "method name": "customInitialization",
        "parameters": []
    },
    "boolean equals(Object obj)": {
        "return type": "boolean",
        "method name": "equals",
        "parameters": [
            "Object"
        ]
    },
    "Optional findCompilationUnit()": {
        "return type": "Optional",
        "method name": "findCompilationUnit",
        "parameters": []
    },
    "Node findRootNode()": {
        "return type": "Node",
        "method name": "findRootNode",
        "parameters": []
    },
    "List getAllContainedComments()": {
        "return type": "List",
        "method name": "getAllContainedComments",
        "parameters": []
    },
    "List getChildNodes()": {
        "return type": "List",
        "method name": "getChildNodes",
        "parameters": []
    },
    "List getChildNodesByType(Class clazz)": {
        "return type": "List",
        "method name": "getChildNodesByType",
        "parameters": [
            "Class"
        ]
    },
    "Optional getComment()": {
        "return type": "Optional",
        "method name": "getComment",
        "parameters": []
    },
    "M getData(DataKey key)": {
        "return type": "M",
        "method name": "getData",
        "parameters": [
            "DataKey"
        ]
    },
    "NodeMetaModel getMetaModel()": {
        "return type": "NodeMetaModel",
        "method name": "getMetaModel",
        "parameters": []
    },
    "List getOrphanComments()": {
        "return type": "List",
        "method name": "getOrphanComments",
        "parameters": []
    },
    "Optional getParentNode()": {
        "return type": "Optional",
        "method name": "getParentNode",
        "parameters": []
    },
    "Node getParentNodeForChildren()": {
        "return type": "Node",
        "method name": "getParentNodeForChildren",
        "parameters": []
    },
    "Node.Parsedness getParsed()": {
        "return type": "Node.Parsedness",
        "method name": "getParsed",
        "parameters": []
    },
    "Optional getRange()": {
        "return type": "Optional",
        "method name": "getRange",
        "parameters": []
    },
    "SymbolResolver getSymbolResolver()": {
        "return type": "SymbolResolver",
        "method name": "getSymbolResolver",
        "parameters": []
    },
    "Optional getTokenRange()": {
        "return type": "Optional",
        "method name": "getTokenRange",
        "parameters": []
    },
    "int hashCode()": {
        "return type": "int",
        "method name": "hashCode",
        "parameters": []
    },
    "boolean isRegistered(AstObserver observer)": {
        "return type": "boolean",
        "method name": "isRegistered",
        "parameters": [
            "AstObserver"
        ]
    },
    "void notifyPropertyChange(ObservableProperty property, P oldValue, P newValue)": {
        "return type": "void",
        "method name": "notifyPropertyChange",
        "parameters": [
            "ObservableProperty",
            "P",
            "P"
        ]
    },
    "void register(AstObserver observer)": {
        "return type": "void",
        "method name": "register",
        "parameters": [
            "AstObserver"
        ]
    },
    "void register(AstObserver observer, Node.ObserverRegistrationMode mode)": {
        "return type": "void",
        "method name": "register",
        "parameters": [
            "AstObserver",
            "Node.ObserverRegistrationMode"
        ]
    },
    "void registerForSubtree(AstObserver observer)": {
        "return type": "void",
        "method name": "registerForSubtree",
        "parameters": [
            "AstObserver"
        ]
    },
    "boolean remove()": {
        "return type": "boolean",
        "method name": "remove",
        "parameters": []
    },
    "Node removeComment()": {
        "return type": "Node",
        "method name": "removeComment",
        "parameters": []
    },
    "void removeForced()": {
        "return type": "void",
        "method name": "removeForced",
        "parameters": []
    },
    "boolean removeOrphanComment(Comment comment)": {
        "return type": "boolean",
        "method name": "removeOrphanComment",
        "parameters": [
            "Comment"
        ]
    },
    "boolean replace(Node node)": {
        "return type": "boolean",
        "method name": "replace",
        "parameters": [
            "Node"
        ]
    },
    "void setAsParentNodeOf(Node childNode)": {
        "return type": "void",
        "method name": "setAsParentNodeOf",
        "parameters": [
            "Node"
        ]
    },
    "void setAsParentNodeOf(NodeList list)": {
        "return type": "void",
        "method name": "setAsParentNodeOf",
        "parameters": [
            "NodeList"
        ]
    },
    "Node setBlockComment(String comment)": {
        "return type": "Node",
        "method name": "setBlockComment",
        "parameters": [
            "String"
        ]
    },
    "Node setComment(Comment comment)": {
        "return type": "Node",
        "method name": "setComment",
        "parameters": [
            "Comment"
        ]
    },
    "void setData(DataKey key, M object)": {
        "return type": "void",
        "method name": "setData",
        "parameters": [
            "DataKey",
            "M"
        ]
    },
    "Node setLineComment(String comment)": {
        "return type": "Node",
        "method name": "setLineComment",
        "parameters": [
            "String"
        ]
    },
    "Node setParentNode(Node newParentNode)": {
        "return type": "Node",
        "method name": "setParentNode",
        "parameters": [
            "Node"
        ]
    },
    "Node setParsed(Node.Parsedness parsed)": {
        "return type": "Node",
        "method name": "setParsed",
        "parameters": [
            "Node.Parsedness"
        ]
    },
    "Node setRange(Range range)": {
        "return type": "Node",
        "method name": "setRange",
        "parameters": [
            "Range"
        ]
    },
    "Node setTokenRange(TokenRange tokenRange)": {
        "return type": "Node",
        "method name": "setTokenRange",
        "parameters": [
            "TokenRange"
        ]
    },
    "String toString()": {
        "return type": "String",
        "method name": "toString",
        "parameters": []
    },
    "String toString(PrettyPrinterConfiguration prettyPrinterConfiguration)": {
        "return type": "String",
        "method name": "toString",
        "parameters": [
            "PrettyPrinterConfiguration"
        ]
    },
    "void tryAddImportToParentCompilationUnit(Class clazz)": {
        "return type": "void",
        "method name": "tryAddImportToParentCompilationUnit",
        "parameters": [
            "Class"
        ]
    },
    "void unregister(AstObserver observer)": {
        "return type": "void",
        "method name": "unregister",
        "parameters": [
            "AstObserver"
        ]
    }
}
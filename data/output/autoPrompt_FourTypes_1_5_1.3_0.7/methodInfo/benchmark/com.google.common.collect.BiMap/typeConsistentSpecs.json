{
    "typeConsistentSpecs": [
        [
            "V putIfAbsent(K key, V value)",
            "V forcePut(K key, V value)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "BiMap inverse()"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V remove(Object key)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V put(K key, V value)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V get(Object key)"
        ],
        [
            "V remove(Object key)",
            "BiMap inverse()"
        ],
        [
            "void putAll(Map map)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "void putAll(Map m)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "void putAll(Map map)",
            "V put(K key, V value)"
        ],
        [
            "void putAll(Map map)",
            "V get(Object key)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsKey(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "boolean containsKey(Object key)",
            "V put(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "V get(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V remove(Object key)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V get(Object key)"
        ],
        [
            "void forEach(BiConsumer action)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "void putAll(Map map)",
            "V replace(K key, V value)"
        ],
        [
            "void forEach(BiConsumer action)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V forcePut(K key, V value)",
            "BiMap inverse()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Set values()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "Set entrySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "Collection values()"
        ],
        [
            "void forEach(BiConsumer action)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V replace(K key, V value)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V forcePut(K key, V value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V remove(Object key)"
        ],
        [
            "void putAll(Map m)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V replace(K key, V value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "void putAll(Map m)",
            "V put(K key, V value)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "BiMap inverse()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V put(K key, V value)",
            "Set values()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V get(Object key)",
            "Set values()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "Set keySet()"
        ],
        [
            "V put(K key, V value)",
            "Set keySet()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Set keySet()"
        ],
        [
            "void putAll(Map m)",
            "V replace(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V replace(K key, V value)",
            "V forcePut(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "V put(K key, V value)"
        ],
        [
            "boolean containsKey(Object key)",
            "BiMap inverse()"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V replace(K key, V value)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V forcePut(K key, V value)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "Collection values()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "BiMap inverse()"
        ],
        [
            "void putAll(Map map)",
            "V forcePut(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "void putAll(Map map)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V replace(K key, V value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "Collection values()"
        ],
        [
            "V replace(K key, V value)",
            "V put(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V forcePut(K key, V value)"
        ],
        [
            "V replace(K key, V value)",
            "V get(Object key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V remove(Object key)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "Set keySet()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V get(Object key)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V remove(Object key)",
            "Set keySet()"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V put(K key, V value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V get(Object key)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V forcePut(K key, V value)"
        ],
        [
            "V forcePut(K key, V value)",
            "Set values()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V put(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V get(Object key)"
        ],
        [
            "V put(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Set entrySet()"
        ],
        [
            "V get(Object key)",
            "V remove(Object key)"
        ],
        [
            "V forcePut(K key, V value)",
            "Set keySet()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V put(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "V replace(K key, V value)",
            "BiMap inverse()"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V get(Object key)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "Set values()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "V forcePut(K key, V value)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "BiMap inverse()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V put(K key, V value)",
            "Set entrySet()"
        ],
        [
            "void forEach(BiConsumer action)",
            "V forcePut(K key, V value)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "Set keySet()"
        ],
        [
            "V get(Object key)",
            "Set entrySet()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "Set values()"
        ],
        [
            "V replace(K key, V value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Collection values()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V forcePut(K key, V value)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Set values()"
        ],
        [
            "boolean containsKey(Object key)",
            "Set keySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "BiMap inverse()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "Set keySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "V put(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "V get(Object key)"
        ],
        [
            "void forEach(BiConsumer action)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V put(K key, V value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V put(K key, V value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "void forEach(BiConsumer action)",
            "V put(K key, V value)"
        ],
        [
            "V get(Object key)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V get(Object key)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V forcePut(K key, V value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "void forEach(BiConsumer action)",
            "V get(Object key)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "V replace(K key, V value)"
        ],
        [
            "V forcePut(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "V put(K key, V value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "void forEach(BiConsumer action)",
            "V replace(K key, V value)"
        ],
        [
            "V get(Object key)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V put(K key, V value)"
        ],
        [
            "V put(K key, V value)",
            "Collection values()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V get(Object key)"
        ],
        [
            "V get(Object key)",
            "Collection values()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "Set values()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V put(K key, V value)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V remove(Object key)",
            "Set values()"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V remove(Object key)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V forcePut(K key, V value)",
            "Set entrySet()"
        ],
        [
            "void putAll(Map map)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "BiMap inverse()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V remove(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V remove(Object key)"
        ],
        [
            "V replace(K key, V value)",
            "Set values()"
        ],
        [
            "boolean containsValue(Object value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V forcePut(K key, V value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "BiMap inverse()"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "Set entrySet()"
        ],
        [
            "V replace(K key, V value)",
            "Set keySet()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "Set keySet()"
        ],
        [
            "void forEach(BiConsumer action)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V replace(K key, V value)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V forcePut(K key, V value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V put(K key, V value)"
        ],
        [
            "void putAll(Map m)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V forcePut(K key, V value)",
            "Collection values()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "Set entrySet()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "void putAll(Map m)",
            "V remove(Object key)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Set entrySet()"
        ],
        [
            "void replaceAll(BiFunction function)",
            "V replace(K key, V value)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V remove(Object key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "Set keySet()"
        ],
        [
            "boolean containsKey(Object key)",
            "Set values()"
        ],
        [
            "V remove(Object key)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "Set values()"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "void putAll(Map map)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "Collection values()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "Set entrySet()"
        ],
        [
            "void putAll(Map map)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "Set entrySet()"
        ],
        [
            "V replace(K key, V value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "Collection values()"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V forcePut(K key, V value)"
        ],
        [
            "V replace(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "V put(K key, V value)",
            "V forcePut(K key, V value)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "Collection values()"
        ],
        [
            "V get(Object key)",
            "V forcePut(K key, V value)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V forcePut(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "Set entrySet()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "Set values()"
        ],
        [
            "void putAll(Map m)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "void putAll(Map m)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsValue(Object value)",
            "Set keySet()"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V put(K key, V value)"
        ],
        [
            "V put(K key, V value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V get(Object key)"
        ],
        [
            "V get(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "void putAll(Map m)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V get(Object key)",
            "V put(K key, V value)"
        ],
        [
            "V put(K key, V value)",
            "V get(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V put(K key, V value)"
        ],
        [
            "void putAll(Map map)",
            "V remove(Object key)"
        ],
        [
            "void putAll(Map m)",
            "V forcePut(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V replace(K key, V value)",
            "Set entrySet()"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "Collection values()"
        ],
        [
            "boolean containsKey(Object key)",
            "V remove(Object key)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V get(Object key)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V forcePut(K key, V value)"
        ],
        [
            "V put(K key, V value)",
            "V replace(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V get(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Set keySet()"
        ],
        [
            "V remove(Object key)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "Set values()"
        ],
        [
            "V remove(Object key)",
            "Collection values()"
        ],
        [
            "V forcePut(K key, V value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V forcePut(K key, V value)"
        ],
        [
            "V replace(K key, V value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "Set entrySet()"
        ],
        [
            "void putAll(Map m)",
            "V get(Object key)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V put(K key, V value)"
        ],
        [
            "V computeIfPresent(K key, BiFunction remappingFunction)",
            "V get(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "Set entrySet()"
        ],
        [
            "V replace(K key, V value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "V get(Object key)",
            "Set keySet()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "Set entrySet()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "Set values()"
        ],
        [
            "V replace(K key, V value)",
            "Collection values()"
        ],
        [
            "boolean containsValue(Object value)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "BiMap inverse()"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V remove(Object key)",
            "V get(Object key)"
        ],
        [
            "V put(K key, V value)",
            "BiMap inverse()"
        ],
        [
            "void forEach(BiConsumer action)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "V get(Object key)",
            "BiMap inverse()"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "BiMap inverse()"
        ],
        [
            "boolean containsValue(Object value)",
            "V remove(Object key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "void forEach(BiConsumer action)",
            "V remove(Object key)"
        ],
        [
            "void putAll(Map map)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V forcePut(K key, V value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V forcePut(K key, V value)",
            "V put(K key, V value)"
        ],
        [
            "boolean containsKey(Object key)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V compute(K key, BiFunction remappingFunction)",
            "V forcePut(K key, V value)"
        ],
        [
            "V forcePut(K key, V value)",
            "V get(Object key)"
        ],
        [
            "V computeIfAbsent(K key, Function mappingFunction)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V computeIfAbsent(K key, Function mappingFunction)"
        ],
        [
            "V put(K key, V value)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V get(Object key)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V getOrDefault(Object key, V defaultValue)",
            "V compute(K key, BiFunction remappingFunction)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V computeIfPresent(K key, BiFunction remappingFunction)"
        ],
        [
            "V forcePut(K key, V value)",
            "V replace(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V merge(K key, V value, BiFunction remappingFunction)"
        ],
        [
            "boolean containsKey(Object key)",
            "Collection values()"
        ],
        [
            "V merge(K key, V value, BiFunction remappingFunction)",
            "V getOrDefault(Object key, V defaultValue)"
        ],
        [
            "boolean containsKey(Object key)",
            "V forcePut(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "Collection values()"
        ]
    ]
}
{
    "typeConsistentSpecs": [
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration config)",
            "URI getDefaultUri(Configuration conf)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path getWorkingDirectory()"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path createSnapshot(Path path)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path makeQualified(Path path)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path createSnapshot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path resolvePath(Path p)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getHomeDirectory()"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "String getScheme()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void checkPath(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path getWorkingDirectory()"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path getHomeDirectory()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileSystem get(URI uri, Configuration conf, String user)",
            "URI getCanonicalUri()"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration conf, String user)",
            "URI getUri()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean exists(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "List listXAttrs(Path path)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path makeQualified(Path path)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "boolean exists(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path getHomeDirectory()"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path resolvePath(Path p)"
        ],
        [
            "void checkPath(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path makeQualified(Path path)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileSystem get(URI uri, Configuration conf)",
            "URI getUri()"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "List listXAttrs(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void removeAcl(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path resolveLink(Path f)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path makeQualified(Path path)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "FileSystem newInstance(URI uri, Configuration config)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileSystem get(URI uri, Configuration conf, String user)",
            "URI canonicalizeUri(URI uri)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path resolvePath(Path p)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(PathHandle pathHandle)",
            "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path makeQualified(Path path)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void checkPath(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration conf, String user)",
            "String getScheme()"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "FileSystem newInstance(URI uri, Configuration conf, String user)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration config)",
            "URI getUri()"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "List listXAttrs(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "long getUsed(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Class getFileSystemClass(String scheme, Configuration conf)",
            "String getScheme()"
        ],
        [
            "LocalFileSystem getLocal(Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path makeQualified(Path path)"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void initialize(URI name, Configuration conf)",
            "URI getCanonicalUri()"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void removeAcl(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path getHomeDirectory()"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "List listXAttrs(Path path)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "String getScheme()"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path resolveLink(Path f)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "String getScheme()"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path makeQualified(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path resolveLink(Path f)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path makeQualified(Path path)"
        ],
        [
            "void checkPath(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "long getUsed(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path resolveLink(Path f)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "String getCanonicalServiceName()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path getHomeDirectory()"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path getHomeDirectory()"
        ],
        [
            "URI canonicalizeUri(URI uri)",
            "URI getCanonicalUri()"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "List listXAttrs(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path getHomeDirectory()"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "FileSystem get(URI uri, Configuration conf)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path makeQualified(Path path)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "Path resolveLink(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "void removeAcl(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path createSnapshot(Path path)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileSystem get(URI uri, Configuration conf, String user)",
            "Configuration getConf()"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path getWorkingDirectory()"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(PathHandle pathHandle)",
            "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "FileSystem newInstance(Configuration conf)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path makeQualified(Path path)"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path getWorkingDirectory()"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "String getCanonicalServiceName()"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "String getCanonicalServiceName()"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path resolveLink(Path f)"
        ],
        [
            "Path resolvePath(Path p)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "FileSystem get(URI uri, Configuration conf, String user)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path getHomeDirectory()"
        ],
        [
            "FileSystem get(URI uri, Configuration conf, String user)",
            "URI getDefaultUri(Configuration conf)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path getHomeDirectory()"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Path resolvePath(Path p)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path resolvePath(Path p)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "byte[] getXAttr(Path path, String name)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path getHomeDirectory()"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path resolveLink(Path f)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path resolvePath(Path p)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path getHomeDirectory()"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path createSnapshot(Path path)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path getHomeDirectory()"
        ],
        [
            "Path resolvePath(Path p)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path resolvePath(Path p)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "FileSystem get(URI uri, Configuration conf)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "LocalFileSystem newInstanceLocal(Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "long getUsed(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "List listXAttrs(Path path)"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "byte[] getXAttr(Path path, String name)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "String getCanonicalServiceName()"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void checkPath(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path getHomeDirectory()"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataInputStream open(PathHandle fd, int bufferSize)",
            "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path resolveLink(Path f)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path createSnapshot(Path path)"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setDefaultUri(Configuration conf, String uri)",
            "Configuration getConf()"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setDefaultUri(Configuration conf, String uri)",
            "String getCanonicalServiceName()"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path resolveLink(Path f)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean exists(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path makeQualified(Path path)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path resolvePath(Path p)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path makeQualified(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path getHomeDirectory()"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path resolvePath(Path p)"
        ],
        [
            "Path resolvePath(Path p)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "String getCanonicalServiceName()"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path resolveLink(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void checkPath(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path resolveLink(Path f)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void initialize(URI name, Configuration conf)",
            "URI getDefaultUri(Configuration conf)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean exists(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path resolveLink(Path f)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path getHomeDirectory()"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path getHomeDirectory()"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path resolvePath(Path p)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean exists(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "FileSystem get(URI uri, Configuration conf, String user)",
            "URI getUri()"
        ],
        [
            "void checkPath(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "FileSystem newInstance(URI uri, Configuration conf, String user)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "URI canonicalizeUri(URI uri)",
            "URI getDefaultUri(Configuration conf)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setDefaultUri(Configuration conf, URI uri)",
            "URI getCanonicalUri()"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path makeQualified(Path path)"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "long getUsed(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path resolveLink(Path f)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path getHomeDirectory()"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataInputStream open(PathHandle fd, int bufferSize)",
            "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "List listXAttrs(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "long getUsed(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void removeAcl(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path makeQualified(Path path)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path resolvePath(Path p)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path createSnapshot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean exists(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path getWorkingDirectory()"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path resolvePath(Path p)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean exists(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path makeQualified(Path path)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setDefaultUri(Configuration conf, URI uri)",
            "URI canonicalizeUri(URI uri)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileSystem get(URI uri, Configuration conf, String user)",
            "String getScheme()"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void removeAcl(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration config)",
            "URI canonicalizeUri(URI uri)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration conf, String user)",
            "String getCanonicalServiceName()"
        ],
        [
            "boolean exists(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "FileSystem newInstance(Configuration conf)"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path resolveLink(Path f)"
        ],
        [
            "void initialize(URI name, Configuration conf)",
            "URI getUri()"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "FileSystem get(Configuration conf)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "FileSystem get(URI uri, Configuration conf, String user)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "Class getFileSystemClass(String scheme, Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "Class getFileSystemClass(String scheme, Configuration conf)",
            "String getCanonicalServiceName()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "List listXAttrs(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path getWorkingDirectory()"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path makeQualified(Path path)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path resolvePath(Path p)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void removeAcl(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "String getCanonicalServiceName()"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path resolveLink(Path f)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileSystem get(URI uri, Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void checkPath(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "String getCanonicalServiceName()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean exists(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path getHomeDirectory()"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path getHomeDirectory()"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path resolvePath(Path p)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path resolveLink(Path f)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path makeQualified(Path path)"
        ],
        [
            "List listXAttrs(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "void removeAcl(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path makeQualified(Path path)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path resolveLink(Path f)"
        ],
        [
            "CompletableFuture openFileWithOptions(PathHandle pathHandle, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path getHomeDirectory()"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setDefaultUri(Configuration conf, URI uri)",
            "Configuration getConf()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path makeQualified(Path path)"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "String getScheme()"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration config)",
            "Configuration getConf()"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path getWorkingDirectory()"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getHomeDirectory()"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path makeQualified(Path path)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path makeQualified(Path path)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "List listXAttrs(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path resolveLink(Path f)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path getHomeDirectory()"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path makeQualified(Path path)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path resolvePath(Path p)"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path getHomeDirectory()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path getHomeDirectory()"
        ],
        [
            "Path makeQualified(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path getWorkingDirectory()"
        ],
        [
            "void removeAcl(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path createSnapshot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path getWorkingDirectory()"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path getHomeDirectory()"
        ],
        [
            "void setDefaultUri(Configuration conf, String uri)",
            "String getScheme()"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path getWorkingDirectory()"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path getHomeDirectory()"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path resolvePath(Path p)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path makeQualified(Path path)"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setDefaultUri(Configuration conf, URI uri)",
            "URI getDefaultUri(Configuration conf)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path getHomeDirectory()"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "String getScheme()"
        ],
        [
            "Path resolvePath(Path p)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path resolveLink(Path f)"
        ],
        [
            "void checkPath(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "List listXAttrs(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path getHomeDirectory()"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setConf(Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration conf, String user)",
            "URI getCanonicalUri()"
        ],
        [
            "void removeAcl(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path resolvePath(Path p)"
        ],
        [
            "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)",
            "FileStatus getFileStatus(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void checkPath(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "FileSystem newInstance(URI uri, Configuration conf, String user)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "Path resolvePath(Path p)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path resolvePath(Path p)"
        ],
        [
            "CompletableFuture openFileWithOptions(PathHandle pathHandle, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path resolveLink(Path f)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileSystem get(URI uri, Configuration conf)",
            "URI getCanonicalUri()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "URI getDefaultUri(Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean mkdirs(Path f, FsPermission permission)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path resolveLink(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path makeQualified(Path path)"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "String getCanonicalServiceName()"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "FileSystem newInstance(URI uri, Configuration config)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path getWorkingDirectory()"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path getHomeDirectory()"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path makeQualified(Path path)"
        ],
        [
            "void checkPath(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path makeQualified(Path path)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path resolveLink(Path f)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "long getUsed(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration conf, String user)",
            "URI canonicalizeUri(URI uri)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean rename(Path src, Path dst)",
            "Path resolvePath(Path p)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path resolveLink(Path f)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path getWorkingDirectory()"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path resolvePath(Path p)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean exists(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FutureDataInputStreamBuilder openFile(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "ContentSummary getContentSummary(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration config)",
            "URI getCanonicalUri()"
        ],
        [
            "long getUsed(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FsServerDefaults getServerDefaults(Path p)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)",
            "FileStatus getFileStatus(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path resolveLink(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "FileSystem newInstance(Configuration conf)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "List listXAttrs(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileSystem get(URI uri, Configuration conf)",
            "URI canonicalizeUri(URI uri)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path createSnapshot(Path path)"
        ],
        [
            "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)",
            "FileStatus getFileLinkStatus(Path f)"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "void removeAcl(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "FileSystem get(Configuration conf)"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean exists(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolveLink(Path f)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "List listXAttrs(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path getHomeDirectory()"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path resolveLink(Path f)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path makeQualified(Path path)"
        ],
        [
            "long getUsed(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "String getScheme()"
        ],
        [
            "void setDefaultUri(Configuration conf, URI uri)",
            "URI getUri()"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path getHomeDirectory()"
        ],
        [
            "void removeAcl(Path path)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path makeQualified(Path path)"
        ],
        [
            "void removeDefaultAcl(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataInputStream open(Path f, int bufferSize)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern, PathFilter filter)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "List listXAttrs(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path makeQualified(Path path)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setOwner(Path p, String username, String groupname)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path createSnapshot(Path path)"
        ],
        [
            "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)",
            "FileStatus getFileStatus(Path f)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path getHomeDirectory()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)",
            "Path resolvePath(Path p)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path resolvePath(Path p)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration conf, String user)",
            "Configuration getConf()"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "String getScheme()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataInputStream open(PathHandle fd)",
            "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "long getUsed(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path getHomeDirectory()"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path resolveLink(Path f)"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "List listXAttrs(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStreamBuilder appendFile(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path resolveLink(Path f)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FsStatus getStatus(Path p)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "long getUsed(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "void removeAcl(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path resolveLink(Path f)"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "String getScheme()"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void createSymlink(Path target, Path link, boolean createParent)",
            "Path resolvePath(Path p)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "String getScheme()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "Path fixRelativePart(Path p)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)",
            "Path makeQualified(Path path)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)",
            "FileStatus getFileLinkStatus(Path f)"
        ],
        [
            "Path makeQualified(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean setReplication(Path src, short replication)",
            "Path resolvePath(Path p)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "String getCanonicalServiceName()"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)",
            "Path makeQualified(Path path)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileSystem get(URI uri, Configuration conf, String user)",
            "String getCanonicalServiceName()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getHomeDirectory()"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "FileStatus getFileStatus(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)",
            "Path resolveLink(Path f)"
        ],
        [
            "void initialize(URI name, Configuration conf)",
            "URI canonicalizeUri(URI uri)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "URI canonicalizeUri(URI uri)",
            "URI getUri()"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "long getUsed(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean deleteOnExit(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FileSystem newInstance(URI uri, Configuration conf, String user)",
            "URI getDefaultUri(Configuration conf)"
        ],
        [
            "Path createSnapshot(Path path)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getWorkingDirectory()"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "FileSystem get(Configuration conf)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path getWorkingDirectory()"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path createSnapshot(Path path)"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path getHomeDirectory()"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FileSystem get(Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path getWorkingDirectory()"
        ],
        [
            "Path makeQualified(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStreamBuilder createFile(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path resolvePath(Path p)"
        ],
        [
            "void setPermission(Path p, FsPermission permission)",
            "Path resolvePath(Path p)"
        ],
        [
            "boolean cancelDeleteOnExit(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream append(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "byte[] getXAttr(Path path, String name)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)",
            "FileStatus getFileLinkStatus(Path f)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path resolvePath(Path p)"
        ],
        [
            "long getDefaultBlockSize(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "FileSystem get(URI uri, Configuration conf)"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "boolean exists(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path resolvePath(Path p)"
        ],
        [
            "Map getXAttrs(Path path, List names)",
            "List listXAttrs(Path path)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FileStatus[] listStatus(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileStatus[] globStatus(Path pathPattern)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)",
            "Path resolvePath(Path p)"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)",
            "Path resolveLink(Path f)"
        ],
        [
            "FileStatus getFileLinkStatus(Path f)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "long getUsed(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "FileSystem get(URI uri, Configuration conf)",
            "URI getDefaultUri(Configuration conf)"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "boolean hasPathCapability(Path path, String capability)",
            "String getScheme()"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean mkdirs(Path f)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "boolean delete(Path f, boolean recursive)",
            "Path resolveLink(Path f)"
        ],
        [
            "Path resolvePath(Path p)",
            "Path getWorkingDirectory()"
        ],
        [
            "boolean createNewFile(Path f)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataInputStream open(PathHandle fd)",
            "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)"
        ],
        [
            "FSDataInputStream open(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setStoragePolicy(Path src, String policyName)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void moveFromLocalFile(Path[] srcs, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path createSnapshot(Path path)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "Path resolveLink(Path f)"
        ],
        [
            "void setAcl(Path path, List aclSpec)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, Path src, Path dst)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite)",
            "Path resolveLink(Path f)"
        ],
        [
            "QuotaUsage getQuotaUsage(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "BlockStoragePolicySpi getStoragePolicy(Path src)",
            "Path resolvePath(Path p)"
        ],
        [
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)",
            "Path getWorkingDirectory()"
        ],
        [
            "void concat(Path trg, Path[] psrcs)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path getWorkingDirectory()"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream append(Path f, boolean appendToNewBlock)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void copyToLocalFile(Path src, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path getHomeDirectory()"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)",
            "Path getHomeDirectory()"
        ],
        [
            "void removeAclEntries(Path path, List aclSpec)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void satisfyStoragePolicy(Path path)",
            "Path makeQualified(Path path)"
        ],
        [
            "void setQuotaByStorageType(Path src, StorageType type, long quota)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path getLinkTarget(Path f)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "Path createSnapshot(Path path, String snapshotName)",
            "Path makeQualified(Path path)"
        ],
        [
            "FSDataOutputStream create(Path f, short replication, Progressable progress)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path getWorkingDirectory()"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "AclStatus getAclStatus(Path path)",
            "Path createSnapshot(Path path, String snapshotName)"
        ],
        [
            "void unsetStoragePolicy(Path src)",
            "Path makeQualified(Path path)"
        ],
        [
            "void checkPath(Path path)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path getWorkingDirectory()"
        ],
        [
            "FileStatus[] listStatus(Path f, PathFilter filter)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void moveToLocalFile(Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "FileSystem get(URI uri, Configuration conf, String user)"
        ],
        [
            "void deleteSnapshot(Path path, String snapshotName)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)",
            "Path makeQualified(Path path)"
        ],
        [
            "void moveFromLocalFile(Path src, Path dst)",
            "Path getTrashRoot(Path path)"
        ],
        [
            "Path getTrashRoot(Path path)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "FileChecksum getFileChecksum(Path f)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)",
            "String getCanonicalServiceName()"
        ],
        [
            "short getDefaultReplication(Path path)",
            "Path getWorkingDirectory()"
        ],
        [
            "BlockLocation[] getFileBlockLocations(Path p, long start, long len)",
            "Path resolvePath(Path p)"
        ],
        [
            "FSDataOutputStream append(Path f, int bufferSize)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setWorkingDirectory(Path new_dir)",
            "Path getInitialWorkingDirectory()"
        ],
        [
            "void initialize(URI name, Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "Map getXAttrs(Path path)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileChecksum getFileChecksum(Path f, long length)",
            "Path resolveLink(Path f)"
        ],
        [
            "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)",
            "Path resolvePath(Path p)"
        ],
        [
            "void copyFromLocalFile(Path src, Path dst)",
            "Path fixRelativePart(Path p)"
        ],
        [
            "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)",
            "Path createSnapshot(Path path)"
        ],
        [
            "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)",
            "FileSystem newInstance(URI uri, Configuration config)"
        ],
        [
            "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)",
            "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)"
        ],
        [
            "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "FileSystem newInstance(Configuration conf)",
            "Configuration getConf()"
        ],
        [
            "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)",
            "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void modifyAclEntries(Path path, List aclSpec)",
            "Path getWorkingDirectory()"
        ],
        [
            "void removeXAttr(Path path, String name)",
            "Path getHomeDirectory()"
        ],
        [
            "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)",
            "Path getWorkingDirectory()"
        ],
        [
            "void setTimes(Path p, long mtime, long atime)",
            "Path getLinkTarget(Path f)"
        ],
        [
            "void setXAttr(Path path, String name, byte[] value, EnumSet flag)",
            "Path getHomeDirectory()"
        ],
        [
            "boolean truncate(Path f, long newLength)",
            "Path createSnapshot(Path path)"
        ]
    ]
}
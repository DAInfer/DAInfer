{
    "typeConsistentSpecs": [
        [
            "boolean holdsLock(Object obj)",
            "Map getAllStackTraces()"
        ],
        [
            "void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)",
            "Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()"
        ],
        [
            "void setName(String name)",
            "String getName()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "ThreadGroup getThreadGroup()"
        ],
        [
            "void setContextClassLoader(ClassLoader cl)",
            "ClassLoader getContextClassLoader()"
        ],
        [
            "void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)",
            "Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "Thread.State getState()"
        ],
        [
            "void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)",
            "Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()"
        ],
        [
            "void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)",
            "Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "StackTraceElement[] getStackTrace()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "Thread currentThread()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "String getName()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "ClassLoader getContextClassLoader()"
        ],
        [
            "boolean holdsLock(Object obj)",
            "Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()"
        ]
    ]
}
{
    "typeConsistentSpecs": [
        [
            "boolean remove(Object key, Object value)",
            "V get(Object key)"
        ],
        [
            "V remove(Object key)",
            "FastSet entrySet()"
        ],
        [
            "boolean containsKey(Object key)",
            "FastSet entrySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "FastSet keySet()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "FastMap putAll(FastMap that)",
            "FastMap sequential()"
        ],
        [
            "FastMap putAll(FastMap that)",
            "FastMap atomic()"
        ],
        [
            "V remove(Object key)",
            "FastCollection values()"
        ],
        [
            "V get(Object key)",
            "Immutable toImmutable()"
        ],
        [
            "V replace(K key, V value)",
            "V put(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "FastMap parallel()"
        ],
        [
            "boolean containsKey(Object key)",
            "Immutable toImmutable()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastCollection values()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V remove(Object key)"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean containsKey(Object key)",
            "V get(Object key)"
        ],
        [
            "boolean containsValue(Object value)",
            "FastMap putAll(FastMap that)"
        ],
        [
            "V get(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsKey(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V get(Object key)",
            "FastSet entrySet()"
        ],
        [
            "V get(Object key)",
            "FastCollection values()"
        ],
        [
            "FastMap putAll(FastMap that)",
            "FastMap unmodifiable()"
        ],
        [
            "boolean containsValue(Object value)",
            "V replace(K key, V value)"
        ],
        [
            "FastMap putAll(FastMap that)",
            "FastMap shared()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastMap parallel()"
        ],
        [
            "V remove(Object key)",
            "MapService service()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V remove(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "FastCollection values()"
        ],
        [
            "V remove(Object key)",
            "FastMap atomic()"
        ],
        [
            "boolean containsKey(Object key)",
            "V remove(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "FastMap sequential()"
        ],
        [
            "V remove(Object key)",
            "FastMap sequential()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V put(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "V put(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "Immutable toImmutable()"
        ],
        [
            "V get(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "MapService service()"
        ],
        [
            "V replace(K key, V value)",
            "V get(Object key)"
        ],
        [
            "boolean containsValue(Object value)",
            "V get(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "FastMap parallel()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastMap sequential()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastMap atomic()"
        ],
        [
            "boolean containsValue(Object value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V put(K key, V value)"
        ],
        [
            "V put(K key, V value)",
            "V replace(K key, V value)"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V replace(K key, V value)"
        ],
        [
            "V get(Object key)",
            "FastMap sequential()"
        ],
        [
            "V get(Object key)",
            "V remove(Object key)"
        ],
        [
            "V get(Object key)",
            "FastMap atomic()"
        ],
        [
            "V remove(Object key)",
            "FastMap unmodifiable()"
        ],
        [
            "V remove(Object key)",
            "FastMap shared()"
        ],
        [
            "boolean containsKey(Object key)",
            "MapService service()"
        ],
        [
            "boolean containsValue(Object value)",
            "FastSet entrySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "FastCollection values()"
        ],
        [
            "V remove(Object key)",
            "FastSet keySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "V remove(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "FastMap atomic()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V put(K key, V value)"
        ],
        [
            "V get(Object key)",
            "FastMap parallel()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastMap unmodifiable()"
        ],
        [
            "boolean containsKey(Object key)",
            "V put(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastMap shared()"
        ],
        [
            "V put(K key, V value)",
            "V get(Object key)"
        ],
        [
            "boolean containsValue(Object value)",
            "FastMap parallel()"
        ],
        [
            "V putIfAbsent(K key, V value)",
            "V get(Object key)"
        ],
        [
            "V put(K key, V value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastSet keySet()"
        ],
        [
            "V replace(K key, V value)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "FastMap putAll(FastMap that)"
        ],
        [
            "boolean containsKey(Object key)",
            "FastMap putAll(FastMap that)"
        ],
        [
            "V get(Object key)",
            "MapService service()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V replace(K key, V value)"
        ],
        [
            "V remove(Object key)",
            "V replace(K key, V value)"
        ],
        [
            "boolean containsValue(Object value)",
            "MapService service()"
        ],
        [
            "boolean containsKey(Object key)",
            "FastMap unmodifiable()"
        ],
        [
            "V put(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "boolean containsKey(Object key)",
            "FastMap shared()"
        ],
        [
            "V replace(K key, V value)",
            "V remove(Object key)"
        ],
        [
            "V get(Object key)",
            "V put(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastMap putAll(FastMap that)"
        ],
        [
            "boolean containsKey(Object key)",
            "FastSet keySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "FastMap atomic()"
        ],
        [
            "boolean containsValue(Object value)",
            "FastMap sequential()"
        ],
        [
            "boolean containsValue(Object value)",
            "V put(K key, V value)"
        ],
        [
            "boolean remove(Object key, Object value)",
            "V replace(K key, V value)"
        ],
        [
            "V get(Object key)",
            "FastMap putAll(FastMap that)"
        ],
        [
            "FastMap putAll(FastMap that)",
            "FastMap parallel()"
        ],
        [
            "V remove(Object key)",
            "Immutable toImmutable()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "FastSet entrySet()"
        ],
        [
            "boolean replace(K key, V oldValue, V newValue)",
            "V get(Object key)"
        ],
        [
            "V remove(Object key)",
            "V get(Object key)"
        ],
        [
            "V remove(Object key)",
            "V putIfAbsent(K key, V value)"
        ],
        [
            "V get(Object key)",
            "FastMap unmodifiable()"
        ],
        [
            "V get(Object key)",
            "FastMap shared()"
        ],
        [
            "boolean remove(Object key, Object value)",
            "Immutable toImmutable()"
        ],
        [
            "V get(Object key)",
            "FastSet keySet()"
        ],
        [
            "boolean containsValue(Object value)",
            "FastMap unmodifiable()"
        ],
        [
            "boolean containsValue(Object value)",
            "FastMap shared()"
        ],
        [
            "boolean containsKey(Object key)",
            "V replace(K key, V value)"
        ]
    ]
}
{
    "void removeListener(MapChangeListener listener)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "V compute(K key, BiFunction remappingFunction)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": true
    },
    "Set entrySet()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "V remove(Object key)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "V putIfAbsent(K key, V value)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "Set keySet()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "V replace(K key, V value)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "boolean remove(Object key, Object value)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "void addListener(MapChangeListener listener)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "V getOrDefault(Object key, V defaultValue)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "V put(K key, V value)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": true
    },
    "V computeIfPresent(K key, BiFunction remappingFunction)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void putAll(Map m)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": true
    },
    "void removeListener(InvalidationListener listener)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "V computeIfAbsent(K key, Function mappingFunction)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void replaceAll(BiFunction function)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "boolean replace(K key, V oldValue, V newValue)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "V get(Object key)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Collection values()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void addListener(InvalidationListener listener)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean containsKey(Object key)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean containsValue(Object value)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void forEach(BiConsumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "V merge(K key, V value, BiFunction remappingFunction)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    }
}
{
    "void ifVariableDeclarationExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifLambdaExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifNullLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void tryAddImportToParentCompilationUnit(Class clazz)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "boolean containsData(DataKey key)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifTypeExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean replace(Node node)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": true
    },
    "void ifBooleanLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "List getChildNodesByType(Class clazz)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "CharLiteralExpr asCharLiteralExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "MarkerAnnotationExpr asMarkerAnnotationExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "LiteralExpr asLiteralExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void register(AstObserver observer)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifNameExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setComment(Comment comment)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "SymbolResolver getSymbolResolver()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "List getChildNodes()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "LiteralStringValueExpr asLiteralStringValueExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifMethodReferenceExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifConditionalExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifAssignExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void register(AstObserver observer, Node.ObserverRegistrationMode mode)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "LambdaExpr asLambdaExpr()": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifCastExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "UnaryExpr asUnaryExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifUnaryExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void setData(DataKey key, M object)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void ifCharLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifLongLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "FieldAccessExpr asFieldAccessExpr()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "SingleMemberAnnotationExpr asSingleMemberAnnotationExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifBinaryExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifLiteralStringValueExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifSuperExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node removeComment()": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "NodeMetaModel getMetaModel()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Optional getRange()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifClassExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "List getOrphanComments()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "Node findRootNode()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "LongLiteralExpr asLongLiteralExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Optional getParentNode()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void notifyPropertyChange(ObservableProperty property, P oldValue, P newValue)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void ifAnnotationExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "ArrayInitializerExpr asArrayInitializerExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifMarkerAnnotationExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "ExpressionMetaModel getMetaModel()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "VariableDeclarationExpr asVariableDeclarationExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setBlockComment(String comment)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "CastExpr asCastExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setTokenRange(TokenRange tokenRange)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "ArrayCreationExpr asArrayCreationExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void ifArrayCreationExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean removeOrphanComment(Comment comment)": {
        "memory read": true,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "TypeExpr asTypeExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "EnclosedExpr asEnclosedExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "IntegerLiteralExpr asIntegerLiteralExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifThisExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void addOrphanComment(Comment comment)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "Optional getTokenRange()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifStringLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Optional findCompilationUnit()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "BinaryExpr asBinaryExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "ConditionalExpr asConditionalExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifObjectCreationExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "BooleanLiteralExpr asBooleanLiteralExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifSingleMemberAnnotationExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "NameExpr asNameExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifInstanceOfExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "List getAllContainedComments()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node.Parsedness getParsed()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "AnnotationExpr asAnnotationExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void unregister(AstObserver observer)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "StringLiteralExpr asStringLiteralExpr()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void registerForSubtree(AstObserver observer)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "MethodCallExpr asMethodCallExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifArrayAccessExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifNormalAnnotationExpr(Consumer action)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "DoubleLiteralExpr asDoubleLiteralExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setParentNode(Node newParentNode)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "ThisExpr asThisExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setRange(Range range)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void ifDoubleLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Optional getComment()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "NullLiteralExpr asNullLiteralExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "SuperExpr asSuperExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean remove(Node node)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "ArrayAccessExpr asArrayAccessExpr()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifArrayInitializerExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean isRegistered(AstObserver observer)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node getParentNodeForChildren()": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "AssignExpr asAssignExpr()": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "ObjectCreationExpr asObjectCreationExpr()": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void setAsParentNodeOf(Node childNode)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifEnclosedExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifFieldAccessExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void setAsParentNodeOf(NodeList list)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "void ifIntegerLiteralExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "void ifMethodCallExpr(Consumer action)": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "NormalAnnotationExpr asNormalAnnotationExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "boolean replace(Node node, Node replacementNode)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": true,
        "insertion upon memory": false
    },
    "InstanceOfExpr asInstanceOfExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "ClassExpr asClassExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setParsed(Node.Parsedness parsed)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "Node setLineComment(String comment)": {
        "memory read": false,
        "memory write": true,
        "deletion upon memory": false,
        "insertion upon memory": true
    },
    "MethodReferenceExpr asMethodReferenceExpr()": {
        "memory read": false,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    },
    "M getData(DataKey key)": {
        "memory read": true,
        "memory write": false,
        "deletion upon memory": false,
        "insertion upon memory": false
    }
}
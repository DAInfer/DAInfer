{
    "org.mvel2.templates.TemplateRegistry": {
        "org.mvel2.templates.TemplateRegistry": {
            "class": "TemplateRegistry",
            "category": "Interface",
            "methods": {
                "void addNamedTemplate(String name, CompiledTemplate template)": "Adds a named template to the registry.",
                "boolean contains(String name)": "Returns true if the registry contains a named template with the specified name.",
                "CompiledTemplate getNamedTemplate(String name)": "Returns the named template with the specified name, or null if no such template exists.",
                "Set<String> getNames()": "Returns a set of all the names of the named templates in the registry.",
                "Iterator iterator()": "Returns an iterator over the named templates in the registry."
            },
            "super class": []
        }
    },
    "org.apache.hadoop.conf.Configured": {
        "org.apache.hadoop.conf.Configured": {
            "class": "Configured",
            "category": "Class",
            "methods": {
                "Configuration getConf()": "Return the configuration used by this object.",
                "void setConf(Configuration conf)": "Set the configuration to be used by this object."
            },
            "super class": []
        }
    },
    "java.util.List": {
        "java.util.List": {
            "class": "List",
            "category": "Interface",
            "methods": {
                "boolean add(E e)": "Ensures that this collection contains the specified element (optional operation).",
                "void add(int index, E element)": "Inserts the specified element at the specified position in this list (optional operation).",
                "boolean addAll(Collection c)": "Adds all of the elements in the specified collection to this collection (optional operation).",
                "boolean addAll(int index, Collection c)": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).",
                "void clear()": "Removes all of the elements from this collection (optional operation).",
                "boolean contains(Object o)": "Returns true if this collection contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this collection contains all of the elements in the specified collection.",
                "boolean equals(Object o)": "Compares the specified object with this collection for equality.",
                "E get(int index)": "Returns the element at the specified position in this list.",
                "int hashCode()": "Returns the hash code value for this collection.",
                "int indexOf(Object o)": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "boolean isEmpty()": "Returns true if this collection contains no elements.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "int lastIndexOf(Object o)": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "ListIterator listIterator()": "Returns a list iterator over the elements in this list (in proper sequence).",
                "ListIterator listIterator(int index)": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.",
                "E remove(int index)": "Removes the element at the specified position in this list (optional operation).",
                "boolean remove(Object o)": "Removes a single instance of the specified element from this collection, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes all of this collection's elements that are also contained in the specified collection (optional operation).",
                "void replaceAll(UnaryOperator operator)": "Replaces each element of this list with the result of applying the operator to that element.",
                "boolean retainAll(Collection c)": "Retains only the elements in this collection that are contained in the specified collection (optional operation).",
                "E set(int index, E element)": "Replaces the element at the specified position in this list with the specified element (optional operation).",
                "int size()": "Returns the number of elements in this collection.",
                "void sort(Comparator c)": "Sorts this list according to the order induced by the specified Comparator.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "List subList(int fromIndex, int toIndex)": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
                "Object[] toArray()": "Returns an array containing all of the elements in this collection.",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.Collection",
                "java.lang.Iterable"
            ]
        }
    },
    "javax.servlet.ServletContext": {
        "javax.servlet.ServletContext": {
            "class": "ServletContext",
            "category": "Interface",
            "methods": {
                "FilterRegistration.Dynamic addFilter(String filterName, Class filterClass)": "Adds the filter with the given name and class type to this servlet context.",
                "FilterRegistration.Dynamic addFilter(String filterName, Filter filter)": "Registers the given filter instance with this ServletContext under the given filterName.",
                "FilterRegistration.Dynamic addFilter(String filterName, String className)": "Adds the filter with the given name and class name to this servlet context.",
                "ServletRegistration.Dynamic addJspFile(String servletName, String jspFile)": "Adds the servlet with the given jsp file to this servlet context.",
                "void addListener(Class listenerClass)": "Adds a listener of the given class type to this ServletContext.",
                "void addListener(String className)": "Adds the listener with the given class name to this ServletContext.",
                "void addListener(T t)": "Adds the given listener to this ServletContext.",
                "ServletRegistration.Dynamic addServlet(String servletName, Class servletClass)": "Adds the servlet with the given name and class type to this servlet context.",
                "ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet)": "Registers the given servlet instance with this ServletContext under the given servletName.",
                "ServletRegistration.Dynamic addServlet(String servletName, String className)": "Adds the servlet with the given name and class name to this servlet context.",
                "T createFilter(Class clazz)": "Instantiates the given Filter class.",
                "T createListener(Class clazz)": "Instantiates the given EventListener class.",
                "T createServlet(Class clazz)": "Instantiates the given Servlet class.",
                "void declareRoles(String... roleNames)": "Declares role names that are tested using isUserInRole.",
                "Object getAttribute(String name)": "Returns the servlet container attribute with the given name, or null if there is no attribute by that name.",
                "Enumeration getAttributeNames()": "Returns an Enumeration containing the attribute names available within this ServletContext.",
                "ClassLoader getClassLoader()": "Gets the class loader of the web application represented by this ServletContext.",
                "ServletContext getContext(String uripath)": "Returns a ServletContext object that corresponds to a specified URL on the server.",
                "String getContextPath()": "Returns the context path of the web application.",
                "Set getDefaultSessionTrackingModes()": "Gets the session tracking modes that are supported by default for this ServletContext.",
                "int getEffectiveMajorVersion()": "Gets the major version of the Servlet specification that the application represented by this ServletContext is based on.",
                "int getEffectiveMinorVersion()": "Gets the minor version of the Servlet specification that the application represented by this ServletContext is based on.",
                "Set getEffectiveSessionTrackingModes()": "Gets the session tracking modes that are in effect for this ServletContext.",
                "FilterRegistration getFilterRegistration(String filterName)": "Gets the FilterRegistration corresponding to the filter with the given filterName.",
                "Map getFilterRegistrations()": "Gets a (possibly empty) Map of the FilterRegistration objects (keyed by filter name) corresponding to all filters registered with this ServletContext.",
                "String getInitParameter(String name)": "Returns a String containing the value of the named context-wide initialization parameter, or null if the parameter does not exist.",
                "Enumeration getInitParameterNames()": "Returns the names of the context's initialization parameters as an Enumeration of String objects, or an empty Enumeration if the context has no initialization parameters.",
                "JspConfigDescriptor getJspConfigDescriptor()": "Gets the <jsp-config> related configuration that was aggregated from the web.xml and web-fragment.xml descriptor files of the web application represented by this ServletContext.",
                "int getMajorVersion()": "Returns the major version of the Servlet API that this servlet container supports.",
                "String getMimeType(String file)": "Returns the MIME type of the specified file, or null if the MIME type is not known.",
                "int getMinorVersion()": "Returns the minor version of the Servlet API that this servlet container supports.",
                "RequestDispatcher getNamedDispatcher(String name)": "Returns a RequestDispatcher object that acts as a wrapper for the named servlet.",
                "String getRealPath(String path)": "Gets the real path corresponding to the given virtual path.",
                "String getRequestCharacterEncoding()": "Gets the request character encoding that are supported by default for this ServletContext.",
                "RequestDispatcher getRequestDispatcher(String path)": "Returns a RequestDispatcher object that acts as a wrapper for the resource located at the given path.",
                "URL getResource(String path)": "Returns a URL to the resource that is mapped to the given path.",
                "InputStream getResourceAsStream(String path)": "Returns the resource located at the named path as an InputStream object.",
                "Set getResourcePaths(String path)": "Returns a directory-like listing of all the paths to resources within the web application whose longest sub-path matches the supplied path argument.",
                "String getResponseCharacterEncoding()": "Gets the response character encoding that are supported by default for this ServletContext.",
                "String getServerInfo()": "Returns the name and version of the servlet container on which the servlet is running.",
                "String getServletContextName()": "Returns the name of this web application corresponding to this ServletContext as specified in the deployment descriptor for this web application by the display-name element.",
                "ServletRegistration getServletRegistration(String servletName)": "Gets the ServletRegistration corresponding to the servlet with the given servletName.",
                "Map getServletRegistrations()": "Gets a (possibly empty) Map of the ServletRegistration objects (keyed by servlet name) corresponding to all servlets registered with this ServletContext.",
                "SessionCookieConfig getSessionCookieConfig()": "Gets the SessionCookieConfig object through which various properties of the session tracking cookies created on behalf of this ServletContext may be configured.",
                "int getSessionTimeout()": "Gets the session timeout in minutes that are supported by default for this ServletContext.",
                "String getVirtualServerName()": "Returns the configuration name of the logical host on which the ServletContext is deployed.",
                "void log(String msg)": "Writes the specified message to a servlet log file, usually an event log.",
                "void log(String message, Throwable throwable)": "Writes an explanatory message and a stack trace for a given Throwable exception to the servlet log file.",
                "void removeAttribute(String name)": "Removes the attribute with the given name from this ServletContext.",
                "void setAttribute(String name, Object object)": "Binds an object to a given attribute name in this ServletContext.",
                "boolean setInitParameter(String name, String value)": "Sets the context initialization parameter with the given name and value on this ServletContext.",
                "void setRequestCharacterEncoding(String encoding)": "Sets the request character encoding for this ServletContext.",
                "void setResponseCharacterEncoding(String encoding)": "Sets the response character encoding for this ServletContext.",
                "void setSessionTimeout(int sessionTimeout)": "Sets the session timeout in minutes for this ServletContext.",
                "void setSessionTrackingModes(Set sessionTrackingModes)": "Sets the session tracking modes that are to become effective for this ServletContext."
            },
            "super class": []
        }
    },
    "android.location.Address": {
        "android.location.Address": {
            "class": "Address",
            "category": "class",
            "methods": {
                "void clearLatitude()": "Removes any latitude associated with this address.",
                "void clearLongitude()": "Removes any longitude associated with this address.",
                "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
                "String getAddressLine(int index)": "Returns a line of the address numbered by the given index (starting at 0), or null if no such line is present.",
                "String getAdminArea()": "Returns the administrative area name of the address, for example, \"CA\", or null if it is unknown",
                "String getCountryCode()": "Returns the country code of the address, for example \"US\", or null if it is unknown.",
                "String getCountryName()": "Returns the localized country name of the address, for example \"Iceland\", or null if it is unknown.",
                "Bundle getExtras()": "Returns additional provider-specific information about the address as a Bundle.",
                "String getFeatureName()": "Returns the feature name of the address, for example, \"Golden Gate Bridge\", or null if it is unknown",
                "double getLatitude()": "Returns the latitude of the address if known.",
                "Locale getLocale()": "Returns the Locale associated with this address.",
                "String getLocality()": "Returns the locality of the address, for example \"Mountain View\", or null if it is unknown.",
                "double getLongitude()": "Returns the longitude of the address if known.",
                "int getMaxAddressLineIndex()": "Returns the largest index currently in use to specify an address line.",
                "String getPhone()": "Returns the phone number of the address if known, or null if it is unknown.",
                "String getPostalCode()": "Returns the postal code of the address, for example \"94110\", or null if it is unknown.",
                "String getPremises()": "Returns the premises of the address, or null if it is unknown.",
                "String getSubAdminArea()": "Returns the sub-administrative area name of the address, for example, \"Santa Clara County\", or null if it is unknown",
                "String getSubLocality()": "Returns the sub-locality of the address, or null if it is unknown.",
                "String getSubThoroughfare()": "Returns the sub-thoroughfare name of the address, which may be null.",
                "String getThoroughfare()": "Returns the thoroughfare name of the address, for example, \"1600 Ampitheater Parkway\", which may be null",
                "String getUrl()": "Returns the public URL for the address if known, or null if it is unknown.",
                "boolean hasLatitude()": "Returns true if a latitude has been assigned to this Address, false otherwise.",
                "boolean hasLongitude()": "Returns true if a longitude has been assigned to this Address, false otherwise.",
                "void setAddressLine(int index, String line)": "Sets the line of the address numbered by index (starting at 0) to the given String, which may be null.",
                "void setAdminArea(String adminArea)": "Sets the administrative area name of the address to the given String, which may be null",
                "void setCountryCode(String countryCode)": "Sets the country code of the address to the given String, which may be null.",
                "void setCountryName(String countryName)": "Sets the country name of the address to the given String, which may be null.",
                "void setExtras(Bundle extras)": "Sets the extra information associated with this fix to the given Bundle.",
                "void setFeatureName(String featureName)": "Sets the feature name of the address to the given String, which may be null",
                "void setLatitude(double latitude)": "Sets the latitude associated with this address.",
                "void setLocality(String locality)": "Sets the locality of the address to the given String, which may be null.",
                "void setLongitude(double longitude)": "Sets the longitude associated with this address.",
                "void setPhone(String phone)": "Sets the phone number associated with this address.",
                "void setPostalCode(String postalCode)": "Sets the postal code of the address to the given String, which may be null.",
                "void setPremises(String premises)": "Sets the premises of the address to the given String, which may be null.",
                "void setSubAdminArea(String subAdminArea)": "Sets the sub-administrative area name of the address to the given String, which may be null",
                "void setSubLocality(String sublocality)": "Sets the sub-locality of the address to the given String, which may be null.",
                "void setSubThoroughfare(String subthoroughfare)": "Sets the sub-thoroughfare name of the address, which may be null.",
                "void setThoroughfare(String thoroughfare)": "Sets the thoroughfare name of the address, which may be null.",
                "void setUrl(String Url)": "Sets the public URL associated with this address.",
                "String toString()": "Returns a string representation of the object.",
                "void writeToParcel(Parcel parcel, int flags)": "Flatten this object in to a Parcel."
            },
            "super class": []
        }
    },
    "javax.cache.CacheManager": {
        "javax.cache.CacheManager": {
            "class": "CacheManager",
            "category": "Interface",
            "methods": {
                "void close()": "Closes this stream and releases any system resources associated with it.",
                "Cache createCache(String cacheName, C configuration)": "Creates a named Cache at runtime.",
                "void destroyCache(String cacheName)": "Destroys a specifically named and managed Cache.",
                "void enableManagement(String cacheName, boolean enabled)": "Controls whether management is enabled.",
                "void enableStatistics(String cacheName, boolean enabled)": "Enables or disables statistics gathering for a managed Cache at runtime.",
                "Cache getCache(String cacheName)": "Looks up a managed Cache given its name.",
                "Cache getCache(String cacheName, Class keyType, Class valueType)": "Looks up a managed Cache given its name.",
                "Iterable getCacheNames()": "Obtains an Iterable over the names of Caches managed by the CacheManager.",
                "CachingProvider getCachingProvider()": "Get the CachingProvider that created and is responsible for the CacheManager.",
                "ClassLoader getClassLoader()": "Get the ClassLoader used by the CacheManager.",
                "Properties getProperties()": "Get the Properties that were used to create this CacheManager.",
                "URI getURI()": "Get the URI of the CacheManager.",
                "boolean isClosed()": "Determines whether the CacheManager instance has been closed.",
                "T unwrap(Class clazz)": "Provides a standard mechanism to access the underlying concrete caching implementation to provide access to further, proprietary features."
            },
            "super class": [
                "java.lang.AutoCloseable",
                "java.io.Closeable"
            ]
        }
    },
    "gnu.trove.map.hash.TIntObjectHashMap": {
        "gnu.trove.map.hash.TIntObjectHashMap": {
            "class": "TIntObjectHashMap",
            "category": "Class",
            "methods": {
                "TIntObjectHashMap<V> clone()": "",
                "boolean containsKey(int key)": "Checks for the presence of key in the keys of the map.",
                "boolean containsValue(V val)": "Checks for the presence of val in the values of the map.",
                "boolean equals(java.lang.Object other)": "Compares this map with another map for equality of their stored entries.",
                "boolean forEachEntry(TIntObjectProcedure<V> procedure)": "Executes procedure for each key/value entry in the map.",
                "boolean forEachKey(TIntProcedure procedure)": "Executes procedure for each key in the map.",
                "boolean forEachValue(TObjectProcedure<V> procedure)": "Executes procedure for each value in the map.",
                "V get(int key)": "Retrieves the value for key.",
                "java.lang.Object[] getValues()": "Returns the values of the map.",
                "<T> T[] getValues(T[] a)": "Return the values of the map; the runtime type of the returned array is that of the specified array.",
                "int hashCode()": "",
                "TIntObjectIterator<V> iterator()": "",
                "int[] keys()": "Returns the keys of the map.",
                "V put(int key, V value)": "Inserts a key/value pair into the map.",
                "void readExternal(java.io.ObjectInput in)": "",
                "protected void rehash(int newCapacity)": "Rehashes the map to the new capacity.",
                "V remove(int key)": "Deletes a key/value pair from the map.",
                "void removeAt(int index)": "Delete the record at index.",
                "boolean retainEntries(TIntObjectProcedure<V> procedure)": "Retains only those entries in the map for which the procedure returns a true value.",
                "int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1.",
                "void transformValues(TObjectFunction<V,V> function)": "Transform the values in this map using function.",
                "void writeExternal(java.io.ObjectOutput out)": "",
                "int calculateGrownCapacity()": "",
                "abstract int capacity()": "",
                "void clear()": "Empties the collection.",
                "java.lang.Object clone()": "",
                "void compact()": "Compresses the hashtable to the minimum prime size (as defined by PrimeFinder) that will hold all of the elements currently in the table.",
                "void ensureCapacity(int desiredCapacity)": "Ensure that this hashtable has sufficient capacity to hold desiredCapacity additional elements without requiring a rehash.",
                "float getAutoCompactionFactor()": "",
                "boolean isEmpty()": "Tells whether this set is currently holding any elements.",
                "void postInsertHook(boolean usedFreeSlot)": "After an insert, this hook is called to adjust the size/free values of the set and to perform rehashing if necessary.",
                "void reenableAutoCompaction(boolean check_for_compaction)": "Re-enable auto-compaction after it was disabled via tempDisableAutoCompaction().",
                "abstract void rehash(int newCapacity)": "Rehashes the set.",
                "void setAutoCompactionFactor(float factor)": "The auto-compaction factor controls whether and when a table performs a compact() automatically after a certain number of remove operations.",
                "int size()": "Returns the number of distinct elements in this collection.",
                "void tempDisableAutoCompaction()": "Temporarily disables auto-compaction.",
                "void trimToSize()": "This simply calls compact.",
                "int capacity()": "Returns the capacity of the hash table.",
                "int computeHashCode(int val)": "Default implementation of TIntHashingStrategy: delegates hashing to HashFunctions.hash(int).",
                "boolean contains(int val)": "Searches the set for val.",
                "boolean forEach(TIntProcedure procedure)": "Executes procedure for each element in the set.",
                "protected int index(int val)": "Locates the index of val.",
                "protected int insertionIndex(int val)": "Locates the index at which val can be inserted.",
                "protected void removeAt(int index)": "Releases the element currently stored at index.",
                "protected int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1."
            },
            "super class": [
                "gnu.trove.THash",
                "gnu.trove.TPrimitiveHash",
                "gnu.trove.TIntHash"
            ]
        }
    },
    "okhttp3.ResponseBody": {
        "okhttp3.ResponseBody": {
            "class": "ResponseBody",
            "category": "Class",
            "methods": {
                "byte[] bytes()": "",
                "InputStream byteStream()": "",
                "Reader charStream()": "Returns the response as a character stream decoded with the charset of the Content-Type header.",
                "void close()": "",
                "long contentLength()": "Returns the number of bytes in that will returned by bytes(), or byteStream(), or -1 if unknown.",
                "MediaType contentType()": "",
                "ResponseBody create(MediaType contentType, byte[] content)": "Returns a new response body that transmits content.",
                "ResponseBody create(MediaType contentType, long contentLength, okio.BufferedSource content)": "Returns a new response body that transmits content.",
                "ResponseBody create(MediaType contentType, String content)": "Returns a new response body that transmits content.",
                "okio.BufferedSource source()": "",
                "String string()": "Returns the response as a string decoded with the charset of the Content-Type header."
            },
            "super class": []
        }
    },
    "com.baidu.location.BDLocation": {
        "com.baidu.location.BDLocation": {
            "class": "BDLocation",
            "category": "Class",
            "methods": {
                "int describeContents()": "This method is used to describe the kinds of special objects contained in the Parcelable instance.",
                "java.lang.String getAdCode()": "This method is used to get the city adcode.",
                "com.baidu.location.Address getAddress()": "This method is used to get the address object.",
                "java.lang.String getAddrStr()": "This method is used to get the detailed address information.",
                "double getAltitude()": "This method is used to get the altitude information. It is only valid when the location result is GPS or when LocationClientOption.setIsNeedAltitude(true) is set, in meters.",
                "java.lang.String getBuildingID()": "This method is used to get the building ID information.",
                "java.lang.String getBuildingName()": "This method is used to get the building name information.",
                "java.lang.String getCity()": "This method is used to get the city information.",
                "java.lang.String getCityCode()": "This method is used to get the city code information.",
                "java.lang.String getCoorType()": "This method is used to get the coordinate system used, based on the coordinate system set in locationClientOption (wgs84, gcj02, bd09, bd09ll).",
                "java.lang.String getCountry()": "This method is used to get the country information.",
                "java.lang.String getCountryCode()": "This method is used to get the country code information.",
                "float getDerect()": "This method is deprecated.",
                "float getDirection()": "This method is used to get the direction of travel in degrees, when the location result is GPS.",
                "java.lang.String getDistrict()": "This method is used to get the district/county information.",
                "android.location.Location getExtraLocation(java.lang.String key)": "This method is used to get the extra location information with the specified key.",
                "java.lang.String getFloor()": "This method is used to get the floor information.",
                "double[] getFusionLocInfo(java.lang.String key)": "This method is used to get the results of IndoorFusionLoc.",
                "int getGpsAccuracyStatus()": "This method is used to get the GPS quality if the location result is GPS, as determined by Baidu's proprietary algorithm.",
                "int getGpsCheckStatus()": "This method is used to get the GPS check status.",
                "int getIndoorLocationSource()": "This method is used to get the supported indoor location types.",
                "int getIndoorLocationSurpport()": "This method is used to get whether indoor location is supported.",
                "java.lang.String getIndoorLocationSurpportBuidlingID()": "This method is used to get the building ID of the supported indoor location.",
                "java.lang.String getIndoorLocationSurpportBuidlingName()": "This method is used to get the building name of the supported indoor location.",
                "int getIndoorNetworkState()": "This method is used to get the indoor location network status.",
                "java.lang.String getIndoorSurpportPolygon()": "This method is used to get the supported indoor location polygon.",
                "double getLatitude()": "This method is used to get the latitude coordinate.",
                "java.lang.String getLocationDescribe()": "This method is used to get the semantic location information. Returns NULL if there is none.",
                "java.lang.String getLocationID()": "This method is used to get the location ID data.",
                "int getLocationWhere()": "This method is used to get whether the current location is in China or abroad.",
                "int getLocType()": "This method is used to get the location type.",
                "java.lang.String getLocTypeDescription()": "This method is used to get the location type description.",
                "double getLongitude()": "This method is used to get the longitude coordinate.",
                "java.lang.String getNetworkLocationType()": "This method is used to get the network location type if the location result is network-based.",
                "double[] getNrlResult()": "This method is used to get the results of Nrl.",
                "int getOperators()": "This method is used to get the operator information.",
                "java.util.List<Poi> getPoiList()": "This method is used to get the POI information. Returns null if the network is not available or if there is an error.",
                "java.lang.String getProvince()": "This method is used to get the province information.",
                "float getRadius()": "This method is used to get the location accuracy, with a default value of 0.0f.",
                "java.lang.String getRetFields(java.lang.String key)": "This method is used to get the Wi-Fi direction and degree.",
                "java.lang.String getRoadLocString()": "This method is used to get the road location string.",
                "int getSatelliteNumber()": "This method is used to get the number of satellites used if the location result is GPS.",
                "java.lang.String getSemaAptag()": "This method is deprecated.",
                "float getSpeed()": "This method is used to get the speed. It is only valid when the location result is GPS, in kilometers per hour, with a default value of 0.0f.",
                "java.lang.String getStreet()": "This method is used to get the street information.",
                "java.lang.String getStreetNumber()": "This method is used to get the street number.",
                "java.lang.String getTime()": "This method is used to get the current location time returned by the server.",
                "int getUserIndoorState()": "This method is used to get the user's indoor/outdoor state.",
                "boolean hasAddr()": "This method is used to check if there is address information.",
                "boolean hasAltitude()": "This method is used to check if there is altitude information.",
                "boolean hasRadius()": "This method is used to check if there is radius information.",
                "boolean hasSateNumber()": "This method is used to check if there is satellite number information.",
                "boolean hasSpeed()": "This method is used to check if there is speed information.",
                "boolean isCellChangeFlag()": "This method is used to check if the location type is TypeOffLineLocationNetworkFail.",
                "boolean isIndoorLocMode()": "This method is used to check if the indoor location mode is enabled.",
                "int isParkAvailable()": "This method is not yet available.",
                "void setAddr(com.baidu.location.Address addr)": "This method is used to set the address object.",
                "void setAddrStr(java.lang.String mAddrStr)": "This method is used to set the detailed address information.",
                "void setAltitude(double altitude)": "This method is used to set the altitude information.",
                "void setBuildingID(java.lang.String bldgid)": "This method is used to set the building ID information.",
                "void setBuildingName(java.lang.String buildingName)": "This method is used to set the building name information.",
                "void setCoorType(java.lang.String coorType)": "This method is used to set the coordinate system used.",
                "void setDirection(float direction)": "This method is used to set the direction of travel in degrees.",
                "void setExtraLocation(java.lang.String key, android.location.Location value)": "This method is used to set the extra location information with the specified key.",
                "void setFloor(java.lang.String f)": "This method is used to set the floor information.",
                "void setFusionLocInfo(java.lang.String key, double[] value)": "This method is used to set the results of IndoorFusionLoc.",
                "void setGpsAccuracyStatus(int status)": "This method is used to set the GPS quality if the location result is GPS.",
                "void setGpsCheckStatus(int status)": "This method is used to set the GPS check status.",
                "void setIndoorLocationSource(int value)": "This method is used to set the supported indoor location types.",
                "void setIndoorLocationSurpport(int value)": "This method is used to set whether indoor location is supported.",
                "void setIndoorLocMode(boolean indoormode)": "This method is used to set the indoor location mode.",
                "void setIndoorNetworkState(int value)": "This method is used to set the indoor location network status.",
                "void setIndoorSurpportPolygon(java.lang.String value)": "This method is used to set the supported indoor location polygon.",
                "void setLatitude(double latitude)": "This method is used to set the latitude coordinate.",
                "void setLocationDescribe(java.lang.String locationDescribe)": "This method is used to set the semantic location information.",
                "void setLocationID(java.lang.String data)": "This method is used to set the location ID data.",
                "void setLocationWhere(int where)": "This method is used to set whether the current location is in China or abroad.",
                "void setLocType(int locType)": "This method is used to set the location type.",
                "void setLocTypeDescription(java.lang.String description)": "This method is used to set the location type description.",
                "void setLongitude(double longitude)": "This method is used to set the longitude coordinate.",
                "void setNetworkLocationType(java.lang.String NetworkLocationType)": "This method is used to set the network location type.",
                "void setNrlData(double[] data)": "This method is used to set the results of Nrl.",
                "void setOperators(int operation)": "This method is used to set the operator information.",
                "void setParkAvailable(int state)": "This method is not yet available.",
                "void setPoiList(java.util.List<Poi> poiList)": "This method is used to set the POI information.",
                "void setRadius(float radius)": "This method is used to set the location accuracy.",
                "void setRetFields(java.lang.String key, java.lang.String value)": "This method is used to set the Wi-Fi direction and degree.",
                "void setRoadLocString(float direction, float prob)": "This method is used to set the road location string.",
                "void setSatelliteNumber(int satelliteNumber)": "This method is used to set the number of satellites used if the location result is GPS.",
                "void setSpeed(float speed)": "This method is used to set the speed.",
                "void setTime(java.lang.String time)": "This method is used to set the current location time returned by the server.",
                "void setUserIndoorState(int value)": "This method is used to set the user's indoor/outdoor state.",
                "void writeToParcel(android.os.Parcel dest, int arg1)": "This method is used to write the location information to a parcelable object."
            },
            "super class": []
        }
    },
    "org.codehaus.jackson.node.ContainerNode": {
        "org.codehaus.jackson.node.ContainerNode": {
            "class": "ContainerNode",
            "category": "Class",
            "methods": {
                "void appendElement(JsonNode node)": "Appends the specified node to the end of this array node.",
                "JsonNode getElementValue(int index)": "Method for accessing value of the specified element of an array node.",
                "JsonNode getFieldValue(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "String getValueAsText()": "Method that will return valid String representation of the container value, if the node is a value node (method JsonNode.isValueNode() returns true), otherwise null.",
                "void insertElement(int index, JsonNode value)": "Inserts the specified node at the specified position in this array node.",
                "boolean isContainerNode()": "Method that returns true for container nodes: Arrays and Objects.",
                "JsonNode removeElement(int index)": "Removes the element at the specified position in this array node.",
                "JsonNode removeElement(String fieldName)": "Removes the field with the specified name from this object node.",
                "JsonNode setElement(int index, JsonNode value)": "Replaces the element at the specified position in this array node with the specified node.",
                "JsonNode setElement(String fieldName, JsonNode value)": "Replaces the field with the specified name in this object node with the specified value.",
                "int size()": "Returns the number of child nodes of this container node."
            },
            "super class": [
                "org.codehaus.jackson.map.JsonNode"
            ]
        }
    },
    "com.badlogic.gdx.scenes.scene2d.ui.Skin": {
        "com.badlogic.gdx.scenes.scene2d.ui.Skin": {
            "class": "Skin",
            "category": "Class",
            "methods": {
                "void add(String name, Object resource)": "",
                "void add(String name, Object resource, Class type)": "",
                "void addRegions(TextureAtlas atlas)": "Adds all named texture regions from the atlas.",
                "void dispose()": "Disposes the TextureAtlas and all Disposable resources in the skin.",
                "String find(Object resource)": "Returns the name of the specified style object, or null if it is not in the skin.",
                "T get(Class type)": "",
                "T get(String name, Class type)": "",
                "ObjectMap getAll(Class type)": "Returns the name to resource mapping for the specified type, or null if no resources of that type exist.",
                "TextureAtlas getAtlas()": "Returns the TextureAtlas that resources in this skin reference, or null.",
                "Color getColor(String name)": "",
                "Drawable getDrawable(String name)": "Returns a registered drawable.",
                "BitmapFont getFont(String name)": "",
                "NinePatch getPatch(String name)": "Returns a registered ninepatch.",
                "TextureRegion getRegion(String name)": "Returns a registered texture region.",
                "Sprite getSprite(String name)": "Returns a registered sprite.",
                "TiledDrawable getTiledDrawable(String name)": "Returns a registered tiled drawable.",
                "boolean has(String name, Class type)": "",
                "void load(FileHandle skinFile)": "Adds all resources in the specified skin JSON file.",
                "Drawable newDrawable(Drawable drawable)": "Returns a copy of the specified drawable.",
                "Drawable newDrawable(Drawable drawable, Color tint)": "Returns a tinted copy of a drawable found in the skin via getDrawable(String).",
                "Drawable newDrawable(Drawable drawable, float r, float g, float b, float a)": "Returns a tinted copy of a drawable found in the skin via getDrawable(String).",
                "Drawable newDrawable(String name)": "Returns a copy of a drawable found in the skin via getDrawable(String).",
                "Drawable newDrawable(String name, Color tint)": "Returns a tinted copy of a drawable found in the skin via getDrawable(String).",
                "Drawable newDrawable(String name, float r, float g, float b, float a)": "Returns a tinted copy of a drawable found in the skin via getDrawable(String).",
                "T optional(String name, Class type)": "",
                "void remove(String name, Class type)": "",
                "void setEnabled(Actor actor, boolean enabled)": "Sets the style on the actor to disabled or enabled."
            },
            "super class": []
        }
    },
    "org.apache.http.client.methods.HttpHead": {
        "org.apache.http.client.methods.HttpHead": {
            "class": "HttpGet",
            "category": "Class",
            "methods": {
                "String getMethod()": "Returns the HTTP method this request uses, such as GET, PUT, POST, or other.",
                "RequestConfig getConfig()": "Returns actual request configuration.",
                "ProtocolVersion getProtocolVersion()": "",
                "RequestLine getRequestLine()": "",
                "URI getURI()": "Returns the original request URI.",
                "void releaseConnection()": "A convenience method to simplify migration from HttpClient 3.1 API.",
                "void setConfig(RequestConfig config)": "",
                "void setProtocolVersion(ProtocolVersion version)": "",
                "void setURI(URI uri)": "",
                "void started()": "",
                "String toString()": "",
                "void abort()": "Aborts this http request.",
                "Object clone()": "",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.client.methods.HttpRequestBase",
                "org.apache.http.client.methods.AbstractExecutionAwareRequest",
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "java.lang.Throwable": {
        "java.lang.Throwable": {
            "class": "Throwable",
            "category": "Class",
            "methods": {
                "void addSuppressed(Throwable exception)": "Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.",
                "Throwable fillInStackTrace()": "Fills in the execution stack trace.",
                "Throwable getCause()": "Returns the cause of this throwable or null if the cause is nonexistent or unknown.",
                "String getLocalizedMessage()": "Creates a localized description of this throwable.",
                "String getMessage()": "Returns the detail message string of this throwable.",
                "StackTraceElement[] getStackTrace()": "Provides programmatic access to the stack trace information printed by printStackTrace().",
                "Throwable[] getSuppressed()": "Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception.",
                "Throwable initCause(Throwable cause)": "Initializes the cause of this throwable to the specified value.",
                "void printStackTrace()": "Prints this throwable and its backtrace to the standard error stream.",
                "void printStackTrace(PrintStream s)": "Prints this throwable and its backtrace to the specified print stream.",
                "void printStackTrace(PrintWriter s)": "Prints this throwable and its backtrace to the specified print writer.",
                "void setStackTrace(StackTraceElement[] stackTrace)": "Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.",
                "String toString()": "Returns a short description of this throwable."
            },
            "super class": []
        }
    },
    "javafx.collections.ObservableMap": {
        "javafx.collections.ObservableMap": {
            "class": "ObservableMap",
            "category": "Interface",
            "methods": {
                "void addListener(MapChangeListener listener)": "Add a listener to this observable map.",
                "void removeListener(MapChangeListener listener)": "Tries to removed a listener from this observable list.",
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "void addListener(InvalidationListener listener)": "Adds an InvalidationListener which will be notified whenever the Observable becomes invalid.",
                "void removeListener(InvalidationListener listener)": "Removes the given listener from the list of listeners, that are notified whenever the value of the Observable becomes invalid."
            },
            "super class": [
                "java.util.Map",
                "javafx.collections.Observable"
            ]
        }
    },
    "android.content.IntentFilter": {
        "android.content.IntentFilter": {
            "class": "IntentFilter",
            "category": "class",
            "methods": {
                "Iterator actionsIterator()": "Return an iterator over the filter's actions.",
                "void addAction(String action)": "Add a new Intent action to match against.",
                "void addCategory(String category)": "Add a new Intent category to match against.",
                "void addDataAuthority(String host, String port)": "Add a new Intent data authority to match against.",
                "void addDataPath(String path, int type)": "Add a new Intent data path to match against.",
                "void addDataScheme(String scheme)": "Add a new Intent data scheme to match against.",
                "void addDataSchemeSpecificPart(String ssp, int type)": "Add a new Intent data \"scheme specific part\" to match against.",
                "void addDataType(String type)": "Add a new Intent data type to match against.",
                "Predicate asPredicate()": "Return a Predicate which tests whether this filter matches the given intent.",
                "Predicate asPredicateWithTypeResolution(ContentResolver resolver)": "Return a Predicate which tests whether this filter matches the given intent.",
                "Iterator authoritiesIterator()": "Return an iterator over the filter's data authorities.",
                "Iterator categoriesIterator()": "Return an iterator over the filter's categories.",
                "int countActions()": "Return the number of actions in the filter.",
                "int countCategories()": "Return the number of categories in the filter.",
                "int countDataAuthorities()": "Return the number of data authorities in the filter.",
                "int countDataPaths()": "Return the number of data paths in the filter.",
                "int countDataSchemeSpecificParts()": "Return the number of data scheme specific parts in the filter.",
                "int countDataSchemes()": "Return the number of data schemes in the filter.",
                "int countDataTypes()": "Return the number of data types in the filter.",
                "IntentFilter create(String action, String dataType)": "Create a new IntentFilter instance with a specified action and MIME type, where you know the MIME type is correctly formatted.",
                "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
                "void dump(Printer du, String prefix)": "void dump(Printer du, String prefix)",
                "String getAction(int index)": "Return an action in the filter.",
                "String getCategory(int index)": "Return a category in the filter.",
                "IntentFilter.AuthorityEntry getDataAuthority(int index)": "Return a data authority in the filter.",
                "PatternMatcher getDataPath(int index)": "Return a data path in the filter.",
                "String getDataScheme(int index)": "Return a data scheme in the filter.",
                "PatternMatcher getDataSchemeSpecificPart(int index)": "Return a data scheme specific part in the filter.",
                "String getDataType(int index)": "Return a data type in the filter.",
                "int getPriority()": "Return the priority of this filter.",
                "boolean hasAction(String action)": "Is the given action included in the filter? Note that if the filter does not include any actions, false will always be returned.",
                "boolean hasCategory(String category)": "Is the given category included in the filter?",
                "boolean hasDataAuthority(Uri data)": "Is the given data authority included in the filter? Note that if the filter does not include any authorities, false will always be returned.",
                "boolean hasDataPath(String data)": "Is the given data path included in the filter? Note that if the filter does not include any paths, false will always be returned.",
                "boolean hasDataScheme(String scheme)": "Is the given data scheme included in the filter? Note that if the filter does not include any scheme, false will always be returned.",
                "boolean hasDataSchemeSpecificPart(String data)": "Is the given data scheme specific part included in the filter? Note that if the filter does not include any scheme specific parts, false will always be returned.",
                "boolean hasDataType(String type)": "Is the given data type included in the filter? Note that if the filter does not include any type, false will always be returned.",
                "int match(String action, String type, String scheme, Uri data, Set categories, String logTag)": "Test whether this filter matches the given intent data.",
                "int match(ContentResolver resolver, Intent intent, boolean resolve, String logTag)": "Test whether this filter matches the given intent.",
                "boolean matchAction(String action)": "Match this filter against an Intent's action.",
                "String matchCategories(Set categories)": "Match this filter against an Intent's categories.",
                "int matchData(String type, String scheme, Uri data)": "Match this filter against an Intent's data (type, scheme and path).",
                "int matchDataAuthority(Uri data)": "Match this intent filter against the given Intent data.",
                "Iterator pathsIterator()": "Return an iterator over the filter's data paths.",
                "void readFromXml(XmlPullParser parser)": "void readFromXml(XmlPullParser parser)",
                "Iterator schemeSpecificPartsIterator()": "Return an iterator over the filter's data scheme specific parts.",
                "Iterator schemesIterator()": "Return an iterator over the filter's data schemes.",
                "void setPriority(int priority)": "Modify priority of this filter.",
                "Iterator typesIterator()": "Return an iterator over the filter's data types.",
                "void writeToParcel(Parcel dest, int flags)": "Flatten this object in to a Parcel.",
                "void writeToXml(XmlSerializer serializer)": "Write the contents of the IntentFilter as an XML stream."
            },
            "super class": []
        }
    },
    "com.fasterxml.jackson.databind.JsonNode": {
        "com.fasterxml.jackson.databind.JsonNode": {
            "class": "JsonNode",
            "category": "Class",
            "methods": {
                "JsonNode _at(com.fasterxml.jackson.core.JsonPointer ptr)": "",
                "boolean asBoolean()": "Method that will try to convert value of this node to a Java boolean.",
                "boolean asBoolean(boolean defaultValue)": "Method that will try to convert value of this node to a Java boolean.",
                "double asDouble()": "Method that will try to convert value of this node to a Java double.",
                "double asDouble(double defaultValue)": "Method that will try to convert value of this node to a Java double.",
                "int asInt()": "Method that will try to convert value of this node to a Java int.",
                "int asInt(int defaultValue)": "Method that will try to convert value of this node to a Java int.",
                "long asLong()": "Method that will try to convert value of this node to a Java long.",
                "long asLong(long defaultValue)": "Method that will try to convert value of this node to a Java long.",
                "String asText()": "Method that will return a valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise empty String.",
                "String asText(String defaultValue)": "Method similar to asText(), except that it will return defaultValue in cases where null value would be returned; either for missing nodes (trying to access missing property, or element at invalid item for array) or explicit nulls.",
                "JsonNode at(com.fasterxml.jackson.core.JsonPointer ptr)": "Method for locating node specified by given JSON pointer instances.",
                "JsonNode at(String jsonPtrExpr)": "Convenience method that is functionally equivalent to:",
                "BigInteger bigIntegerValue()": "",
                "byte[] binaryValue()": "Method to use for accessing binary content of binary nodes (nodes for which isBinary() returns true); or for Text Nodes (ones for which textValue() returns non-null value), to read decoded base64 data.",
                "boolean booleanValue()": "Method to use for accessing JSON boolean values (value literals 'true' and 'false').",
                "boolean canConvertToInt()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 32-bit signed integer type, int.",
                "boolean canConvertToLong()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 64-bit signed integer type, long.",
                "BigDecimal decimalValue()": "",
                "T deepCopy()": "Method that can be called to get a node that is guaranteed not to allow changing of this node through mutators on this node or any of its children.",
                "double doubleValue()": "Returns 64-bit floating point (double) value for this node, if and only if this node is numeric (isNumber() returns true).",
                "Iterator elements()": "Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node.",
                "boolean equals(Comparator comparator, JsonNode other)": "Entry method for invoking customizable comparison, using passed-in Comparator object.",
                "boolean equals(Object o)": "Equality for node objects is defined as full (deep) value equality.",
                "Iterator fieldNames()": "",
                "Iterator fields()": "",
                "JsonNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName, List foundSoFar)": "",
                "JsonNode findPath(String fieldName)": "Method similar to findValue(java.lang.String), but that will return a \"missing node\" instead of null if no field is found.",
                "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
                "List findValues(String fieldName)": "Method for finding JSON Object fields with specified name, and returning found ones as a List.",
                "List findValues(String fieldName, List foundSoFar)": "",
                "List findValuesAsText(String fieldName)": "Similar to findValues(java.lang.String), but will additionally convert values into Strings, calling asText().",
                "List findValuesAsText(String fieldName, List foundSoFar)": "",
                "float floatValue()": "Returns 32-bit floating value for this node, if and only if this node is numeric (isNumber() returns true).",
                "JsonNode get(int index)": "Method for accessing value of the specified element of an array node.",
                "JsonNode get(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "JsonNodeType getNodeType()": "Return the type of this node",
                "boolean has(int index)": "Method that allows checking whether this node is JSON Array node and contains a value for specified index If this is the case (including case of specified indexing having null as value), returns true; otherwise returns false.",
                "boolean has(String fieldName)": "Method that allows checking whether this node is JSON Object node and contains value for specified property.",
                "boolean hasNonNull(int index)": "Method that is similar to has(int), but that will return false for explicitly added nulls.",
                "boolean hasNonNull(String fieldName)": "Method that is similar to has(String), but that will return false for explicitly added nulls.",
                "int intValue()": "Returns integer value for this node, if and only if this node is numeric (isNumber() returns true).",
                "boolean isArray()": "",
                "boolean isBigDecimal()": "",
                "boolean isBigInteger()": "",
                "boolean isBinary()": "Method that can be used to check if this node represents binary data (Base64 encoded).",
                "boolean isBoolean()": "Method that can be used to check if this node was created from JSON boolean value (literals \"true\" and \"false\").",
                "boolean isContainerNode()": "",
                "boolean isDouble()": "",
                "boolean isFloat()": "",
                "boolean isFloatingPointNumber()": "",
                "boolean isInt()": "Method that can be used to check whether contained value is a number represented as Java int.",
                "boolean isIntegralNumber()": "",
                "boolean isLong()": "Method that can be used to check whether contained value is a number represented as Java long.",
                "boolean isMissingNode()": "",
                "boolean isNull()": "Method that can be used to check if this node was created from JSON literal null value.",
                "boolean isNumber()": "",
                "boolean isObject()": "",
                "boolean isPojo()": "Method that can be used to check if the node is a wrapper for a POJO (\"Plain Old Java Object\" aka \"bean\".",
                "boolean isShort()": "Method that can be used to check whether contained value is a number represented as Java short.",
                "boolean isTextual()": "Method that checks whether this node represents basic JSON String value.",
                "boolean isValueNode()": "",
                "Iterator iterator()": "Same as calling elements(); implemented so that convenience \"for-each\" loop can be used for looping over elements of JSON Array constructs.",
                "long longValue()": "Returns 64-bit long value for this node, if and only if this node is numeric (isNumber() returns true).",
                "Number numberValue()": "Returns numeric value for this node, if and only if this node is numeric (isNumber() returns true); otherwise returns null",
                "JsonNode path(int index)": "This method is similar to get(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "JsonNode path(String fieldName)": "This method is similar to get(String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "short shortValue()": "Returns 16-bit short value for this node, if and only if this node is numeric (isNumber() returns true).",
                "int size()": "",
                "String textValue()": "Method to use for accessing String values.",
                "String toString()": "Note: marked as abstract to ensure all implementation classes define it properly.",
                "JsonNode with(String propertyName)": "Method that can be called on Object nodes, to access a property that has Object value; or if no such property exists, to create, add and return such Object node.",
                "JsonNode withArray(String propertyName)": "Method that can be called on Object nodes, to access a property that has Array value; or if no such property exists, to create, add and return such Array node.",
                "boolean isEmpty(SerializerProvider serializers)": "Method that may be called on instance to determine if it is considered \"empty\" for purposes of serialization filtering or not."
            },
            "super class": [
                "com.fasterxml.jackson.databind.JsonSerializable.Base"
            ]
        }
    },
    "android.content.pm.PackageManager": {
        "android.content.pm.PackageManager": {
            "class": "PackageManager",
            "category": "class",
            "methods": {
                "void addPackageToPreferred(String packageName)": "This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
                "boolean addPermission(PermissionInfo info)": "Add a new dynamic permission to the system.",
                "boolean addPermissionAsync(PermissionInfo info)": "Like addPermission(android.content.pm.PermissionInfo) but asynchronously persists the package manager state after returning from the call, allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written.",
                "void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)": "This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
                "boolean addWhitelistedRestrictedPermission(String packageName, String permName, int whitelistFlags)": "Adds a whitelisted restricted permission for an app.",
                "boolean canPackageQuery(String sourcePackageName, String targetPackageName)": "Returns true if the source package is able to query for details about the target package.",
                "boolean[] canPackageQuery(String sourcePackageName, String[] targetPackageNames)": "Same as canPackageQuery(java.lang.String, java.lang.String) but accepts an array of target packages to be queried.",
                "boolean canRequestPackageInstalls()": "Checks whether the calling package is allowed to request package installs through package installer.",
                "String[] canonicalToCurrentPackageNames(String[] packageNames)": "Map from a packages canonical name to the current name in use on the device.",
                "int checkPermission(String permName, String packageName)": "Check whether a particular package has been granted a particular permission.",
                "int checkSignatures(String packageName1, String packageName2)": "Compare the signatures of two packages to determine if the same signature appears in both of them.",
                "int checkSignatures(int uid1, int uid2)": "Like checkSignatures(java.lang.String, java.lang.String), but takes UIDs of the two packages to be checked.",
                "void clearInstantAppCookie()": "Clears the instant application cookie for the calling app.",
                "void clearPackagePreferredActivities(String packageName)": "This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
                "String[] currentToCanonicalPackageNames(String[] packageNames)": "Map from the current package names in use on the device to whatever the current canonical name of that package is.",
                "void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)": "Allows a package listening to the broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs.",
                "Drawable getActivityBanner(ComponentName activityName)": "Retrieve the banner associated with an activity.",
                "Drawable getActivityBanner(Intent intent)": "Retrieve the banner associated with an Intent.",
                "Drawable getActivityIcon(Intent intent)": "Retrieve the icon associated with an Intent.",
                "Drawable getActivityIcon(ComponentName activityName)": "Retrieve the icon associated with an activity.",
                "ActivityInfo getActivityInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular activity class.",
                "ActivityInfo getActivityInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getActivityInfo(android.content.ComponentName, int).",
                "Drawable getActivityLogo(Intent intent)": "Retrieve the logo associated with an Intent.",
                "Drawable getActivityLogo(ComponentName activityName)": "Retrieve the logo associated with an activity.",
                "List getAllPermissionGroups(int flags)": "Retrieve all of the known permission groups in the system.",
                "Drawable getApplicationBanner(String packageName)": "Retrieve the banner associated with an application.",
                "Drawable getApplicationBanner(ApplicationInfo info)": "Retrieve the banner associated with an application.",
                "int getApplicationEnabledSetting(String packageName)": "Return the enabled setting for an application.",
                "Drawable getApplicationIcon(ApplicationInfo info)": "Retrieve the icon associated with an application.",
                "Drawable getApplicationIcon(String packageName)": "Retrieve the icon associated with an application.",
                "ApplicationInfo getApplicationInfo(String packageName, PackageManager.ApplicationInfoFlags flags)": "See getApplicationInfo(java.lang.String, int).",
                "ApplicationInfo getApplicationInfo(String packageName, int flags)": "Retrieve all of the information we know about a particular package/application.",
                "CharSequence getApplicationLabel(ApplicationInfo info)": "Return the label to use for this application.",
                "Drawable getApplicationLogo(String packageName)": "Retrieve the logo associated with an application.",
                "Drawable getApplicationLogo(ApplicationInfo info)": "Retrieve the logo associated with an application.",
                "CharSequence getBackgroundPermissionOptionLabel()": "Gets the localized label that corresponds to the option in settings for granting background access.",
                "ChangedPackages getChangedPackages(int sequenceNumber)": "Returns the names of the packages that have been changed [eg.",
                "int getComponentEnabledSetting(ComponentName componentName)": "Return the enabled setting for a package component (activity, receiver, service, provider).",
                "Drawable getDefaultActivityIcon()": "Return the generic icon for an activity that is used when no specific icon is defined.",
                "Drawable getDrawable(String packageName, int resid, ApplicationInfo appInfo)": "Retrieve an image from a package.",
                "void getGroupOfPlatformPermission(String permissionName, Executor executor, Consumer callback)": "Get the platform-defined permission group of a particular permission, if the permission is a platform-defined permission.",
                "InstallSourceInfo getInstallSourceInfo(String packageName)": "Retrieves information about how a package was installed or updated.",
                "List getInstalledApplications(int flags)": "Return a List of all application packages that are installed for the current user.",
                "List getInstalledApplications(PackageManager.ApplicationInfoFlags flags)": "See getInstalledApplications(int)",
                "List getInstalledModules(int flags)": "Return a List of all modules that are installed.",
                "List getInstalledPackages(int flags)": "Return a List of all packages that are installed for the current user.",
                "List getInstalledPackages(PackageManager.PackageInfoFlags flags)": "See getInstalledPackages(int).",
                "String getInstallerPackageName(String packageName)": "This method was deprecated in API level 30. use getInstallSourceInfo(java.lang.String) instead",
                "byte[] getInstantAppCookie()": "Gets the instant application cookie for this app.",
                "int getInstantAppCookieMaxBytes()": "Gets the maximum size in bytes of the cookie data an instant app can store on the device.",
                "InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags)": "Retrieve all of the information we know about a particular instrumentation class.",
                "Intent getLaunchIntentForPackage(String packageName)": "Returns a \"good\" intent to launch a front-door activity in a package.",
                "IntentSender getLaunchIntentSenderForPackage(String packageName)": "Returns an IntentSender that can be used to launch a front-door activity in a package.",
                "Intent getLeanbackLaunchIntentForPackage(String packageName)": "Return a \"good\" intent to launch a front-door Leanback activity in a package, for use for example to implement an \"open\" button when browsing through packages.",
                "Set getMimeGroup(String mimeGroup)": "Gets all MIME types contained by MIME group.",
                "ModuleInfo getModuleInfo(String packageName, int flags)": "Retrieve information for a particular module.",
                "String getNameForUid(int uid)": "Retrieve the official name associated with a uid.",
                "PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags)": "Retrieve overall information about an application package defined in a package archive file Use getPackageArchiveInfo(java.lang.String, android.content.pm.PackageManager.PackageInfoFlags) when long flags are needed.",
                "PackageInfo getPackageArchiveInfo(String archiveFilePath, PackageManager.PackageInfoFlags flags)": "See getPackageArchiveInfo(java.lang.String, int).",
                "int[] getPackageGids(String packageName)": "Return an array of all of the POSIX secondary group IDs that have been assigned to the given package.",
                "int[] getPackageGids(String packageName, int flags)": "Return an array of all of the POSIX secondary group IDs that have been assigned to the given package.",
                "int[] getPackageGids(String packageName, PackageManager.PackageInfoFlags flags)": "See getPackageGids(java.lang.String, int).",
                "PackageInfo getPackageInfo(String packageName, int flags)": "Retrieve overall information about an application package that is installed on the system.",
                "PackageInfo getPackageInfo(String packageName, PackageManager.PackageInfoFlags flags)": "See getPackageInfo(java.lang.String, int)",
                "PackageInfo getPackageInfo(VersionedPackage versionedPackage, PackageManager.PackageInfoFlags flags)": "See getPackageInfo(android.content.pm.VersionedPackage, int)",
                "PackageInfo getPackageInfo(VersionedPackage versionedPackage, int flags)": "Retrieve overall information about an application package that is installed on the system.",
                "PackageInstaller getPackageInstaller()": "Return interface that offers the ability to install, upgrade, and remove applications on the device.",
                "int getPackageUid(String packageName, PackageManager.PackageInfoFlags flags)": "See getPackageUid(java.lang.String, int).",
                "int getPackageUid(String packageName, int flags)": "Return the UID associated with the given package name.",
                "String[] getPackagesForUid(int uid)": "Retrieve the names of all packages that are associated with a particular user id.",
                "List getPackagesHoldingPermissions(String[] permissions, int flags)": "Return a List of all installed packages that are currently holding any of the given permissions.",
                "List getPackagesHoldingPermissions(String[] permissions, PackageManager.PackageInfoFlags flags)": "See getPackagesHoldingPermissions(java.lang.String[], int).",
                "PermissionGroupInfo getPermissionGroupInfo(String groupName, int flags)": "Retrieve all of the information we know about a particular group of permissions.",
                "PermissionInfo getPermissionInfo(String permName, int flags)": "Retrieve all of the information we know about a particular permission.",
                "void getPlatformPermissionsForGroup(String permissionGroupName, Executor executor, Consumer callback)": "Get the platform-defined permissions which belong to a particular permission group.",
                "int getPreferredActivities(List outFilters, List outActivities, String packageName)": "This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
                "List getPreferredPackages(int flags)": "This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
                "PackageManager.Property getProperty(String propertyName, String packageName)": "Returns the property defined in the given package's <appliction> tag.",
                "PackageManager.Property getProperty(String propertyName, ComponentName component)": "Returns the property defined in the given component declaration.",
                "ProviderInfo getProviderInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular content provider class.",
                "ProviderInfo getProviderInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getProviderInfo(android.content.ComponentName, int).",
                "ActivityInfo getReceiverInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular receiver class.",
                "ActivityInfo getReceiverInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getReceiverInfo(android.content.ComponentName, int).",
                "Resources getResourcesForActivity(ComponentName activityName)": "Retrieve the resources associated with an activity.",
                "Resources getResourcesForApplication(ApplicationInfo app)": "Retrieve the resources for an application.",
                "Resources getResourcesForApplication(String packageName)": "Retrieve the resources associated with an application.",
                "Resources getResourcesForApplication(ApplicationInfo app, Configuration configuration)": "Retrieve the resources for an application for the provided configuration.",
                "ServiceInfo getServiceInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getServiceInfo(android.content.ComponentName, int).",
                "ServiceInfo getServiceInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular service class.",
                "List getSharedLibraries(PackageManager.PackageInfoFlags flags)": "See getSharedLibraries(int).",
                "List getSharedLibraries(int flags)": "Get a list of shared libraries on the device.",
                "Bundle getSuspendedPackageAppExtras()": "Returns a Bundle of extras that was meant to be sent to the calling app when it was suspended.",
                "boolean getSyntheticAppDetailsActivityEnabled(String packageName)": "Return whether a synthetic app details activity will be generated if the app has no enabled launcher activity.",
                "FeatureInfo[] getSystemAvailableFeatures()": "Get a list of features that are available on the system.",
                "String[] getSystemSharedLibraryNames()": "Get a list of shared libraries that are available on the system.",
                "int getTargetSdkVersion(String packageName)": "int getTargetSdkVersion(String packageName)",
                "CharSequence getText(String packageName, int resid, ApplicationInfo appInfo)": "Retrieve text from a package.",
                "Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity)": "If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable.",
                "Drawable getUserBadgedIcon(Drawable drawable, UserHandle user)": "If the target user is a managed profile, then this returns a badged copy of the given icon to be able to distinguish it from the original icon.",
                "CharSequence getUserBadgedLabel(CharSequence label, UserHandle user)": "If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback.",
                "Set getWhitelistedRestrictedPermissions(String packageName, int whitelistFlag)": "Gets the restricted permissions that have been whitelisted and the app is allowed to have them granted in their full form.",
                "XmlResourceParser getXml(String packageName, int resid, ApplicationInfo appInfo)": "Retrieve an XML file from a package.",
                "boolean hasSigningCertificate(int uid, byte[] certificate, int type)": "Searches the set of signing certificates by which the package(s) for the given uid has proven to have been signed.",
                "boolean hasSigningCertificate(String packageName, byte[] certificate, int type)": "Searches the set of signing certificates by which the given package has proven to have been signed.",
                "boolean hasSystemFeature(String featureName)": "Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures().",
                "boolean hasSystemFeature(String featureName, int version)": "Check whether the given feature name and version is one of the available features as returned by getSystemAvailableFeatures().",
                "boolean isAutoRevokeWhitelisted(String packageName)": "Checks whether an application is exempt from having its permissions be automatically revoked when the app is unused for an extended period of time.",
                "boolean isAutoRevokeWhitelisted()": "Note: In retrospect it would have been preferred to use more inclusive terminology when naming this API.",
                "boolean isDefaultApplicationIcon(Drawable drawable)": "Returns if the provided drawable represents the default activity icon provided by the system.",
                "boolean isDeviceUpgrading()": "Returns true if the device is upgrading, such as first boot after OTA.",
                "boolean isInstantApp()": "Gets whether this application is an instant app.",
                "boolean isInstantApp(String packageName)": "Gets whether the given package is an instant app.",
                "boolean isPackageSuspended(String packageName)": "Query if an app is currently suspended.",
                "boolean isPackageSuspended()": "Apps can query this to know if they have been suspended.",
                "boolean isPermissionRevokedByPolicy(String permName, String packageName)": "Checks whether a particular permissions has been revoked for a package by policy.",
                "boolean isSafeMode()": "Return whether the device has been booted into safe mode.",
                "List queryActivityProperty(String propertyName)": "Returns the property definition for all <activity> and <activity-alias> tags.",
                "List queryApplicationProperty(String propertyName)": "Returns the property definition for all <application> tags.",
                "List queryBroadcastReceivers(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryBroadcastReceivers(android.content.Intent, int).",
                "List queryBroadcastReceivers(Intent intent, int flags)": "Retrieve all receivers that can handle a broadcast of the given intent.",
                "List queryContentProviders(String processName, int uid, int flags)": "Retrieve content provider information.",
                "List queryContentProviders(String processName, int uid, PackageManager.ComponentInfoFlags flags)": "See queryContentProviders(java.lang.String, int, int).",
                "List queryInstrumentation(String targetPackage, int flags)": "Retrieve information about available instrumentation code.",
                "List queryIntentActivities(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentActivities(android.content.Intent, int).",
                "List queryIntentActivities(Intent intent, int flags)": "Retrieve all activities that can be performed for the given intent.",
                "List queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags)": "Retrieve a set of activities that should be presented to the user as similar options.",
                "List queryIntentActivityOptions(ComponentName caller, List specifics, Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int).",
                "List queryIntentContentProviders(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentContentProviders(android.content.Intent, int).",
                "List queryIntentContentProviders(Intent intent, int flags)": "Retrieve all providers that can match the given intent.",
                "List queryIntentServices(Intent intent, int flags)": "Retrieve all services that can match the given intent.",
                "List queryIntentServices(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentServices(android.content.Intent, int).",
                "List queryPermissionsByGroup(String permissionGroup, int flags)": "Query for all of the permissions associated with a particular group.",
                "List queryProviderProperty(String propertyName)": "Returns the property definition for all <provider> tags.",
                "List queryReceiverProperty(String propertyName)": "Returns the property definition for all <receiver> tags.",
                "List queryServiceProperty(String propertyName)": "Returns the property definition for all <service> tags.",
                "void relinquishUpdateOwnership(String targetPackage)": "Attempt to relinquish the update ownership of the given package.",
                "void removePackageFromPreferred(String packageName)": "This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
                "void removePermission(String permName)": "Removes a permission that was previously added with addPermission(android.content.pm.PermissionInfo).",
                "boolean removeWhitelistedRestrictedPermission(String packageName, String permName, int whitelistFlags)": "Removes a whitelisted restricted permission for an app.",
                "void requestChecksums(String packageName, boolean includeSplits, int required, List trustedInstallers, PackageManager.OnChecksumsReadyListener onChecksumsReadyListener)": "Requests the checksums for APKs within a package.",
                "ResolveInfo resolveActivity(Intent intent, PackageManager.ResolveInfoFlags flags)": "See resolveActivity(android.content.Intent, int).",
                "ResolveInfo resolveActivity(Intent intent, int flags)": "Determine the best action to perform for a given Intent.",
                "ProviderInfo resolveContentProvider(String authority, PackageManager.ComponentInfoFlags flags)": "See resolveContentProvider(java.lang.String, int).",
                "ProviderInfo resolveContentProvider(String authority, int flags)": "Find a single content provider by its authority.",
                "ResolveInfo resolveService(Intent intent, int flags)": "Determine the best service to handle for a given Intent.",
                "ResolveInfo resolveService(Intent intent, PackageManager.ResolveInfoFlags flags)": "See resolveService(android.content.Intent, int).",
                "void setApplicationCategoryHint(String packageName, int categoryHint)": "Provide a hint of what the ApplicationInfo#category value should be for the given package.",
                "void setApplicationEnabledSetting(String packageName, int newState, int flags)": "Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest.",
                "boolean setAutoRevokeWhitelisted(String packageName, boolean whitelisted)": "Marks an application exempt from having its permissions be automatically revoked when the app is unused for an extended period of time.",
                "void setComponentEnabledSetting(ComponentName componentName, int newState, int flags)": "Set the enabled setting for a package component (activity, receiver, service, provider).",
                "void setComponentEnabledSettings(List settings)": "Set the enabled settings for package components such as activities, receivers, services and providers.",
                "void setInstallerPackageName(String targetPackage, String installerPackageName)": "Change the installer associated with a given package.",
                "void setMimeGroup(String mimeGroup, Set mimeTypes)": "Sets MIME group's MIME types.",
                "void updateInstantAppCookie(byte[] cookie)": "Updates the instant application cookie for the calling app.",
                "void verifyPendingInstall(int id, int verificationCode)": "Allows a package listening to the broadcast to respond to the package manager."
            },
            "super class": []
        }
    },
    "org.apache.hadoop.fs.FileSystem": {
        "org.apache.hadoop.fs.FileSystem": {
            "class": "FileSystem",
            "category": "Class",
            "methods": {
                "FSDataOutputStream append(Path f)": "Append to an existing file (optional operation).",
                "FSDataOutputStream append(Path f, boolean appendToNewBlock)": "Append to an existing file (optional operation).",
                "FSDataOutputStream append(Path f, int bufferSize)": "Append to an existing file (optional operation).",
                "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)": "Append to an existing file (optional operation).",
                "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)": "Append to an existing file (optional operation).",
                "FSDataOutputStreamBuilder appendFile(Path path)": "Create a Builder to append a file.",
                "boolean areSymlinksEnabled()": "",
                "boolean cancelDeleteOnExit(Path f)": "Cancel the scheduled deletion of the path when the FileSystem is closed.",
                "URI canonicalizeUri(URI uri)": "Canonicalize the given URI.",
                "void checkPath(Path path)": "Check that a Path belongs to this FileSystem.",
                "void clearStatistics()": "Reset all statistics for all file systems.",
                "void close()": "Close this FileSystem instance.",
                "void closeAll()": "Close all cached FileSystem instances.",
                "void closeAllForUGI(UserGroupInformation ugi)": "Close all cached FileSystem instances for a given UGI.",
                "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)": "Called when we're all done writing to the target.",
                "void concat(Path trg, Path[] psrcs)": "Concat existing files together.",
                "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)": "The src files are on the local disk.",
                "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)": "The src file is on the local disk.",
                "void copyFromLocalFile(boolean delSrc, Path src, Path dst)": "The src file is on the local disk.",
                "void copyFromLocalFile(Path src, Path dst)": "The src file is on the local disk.",
                "void copyToLocalFile(boolean delSrc, Path src, Path dst)": "Copy it a file from a remote filesystem to the local one.",
                "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)": "The src file is under this filesystem, and the dst is on the local disk.",
                "void copyToLocalFile(Path src, Path dst)": "Copy it a file from the remote filesystem to the local one.",
                "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)": "Create a file with the provided permission.",
                "FSDataOutputStream create(Path f)": "Create an FSDataOutputStream at the indicated Path.",
                "FSDataOutputStream create(Path f, boolean overwrite)": "Create an FSDataOutputStream at the indicated Path.",
                "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)": "Create an FSDataOutputStream at the indicated Path.",
                "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)": "Create an FSDataOutputStream at the indicated Path.",
                "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)": "Create an FSDataOutputStream at the indicated Path with a custom checksum option.",
                "FSDataOutputStream create(Path f, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStream create(Path f, short replication)": "Create an FSDataOutputStream at the indicated Path.",
                "FSDataOutputStream create(Path f, short replication, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)": "Create instance of the standard FSDataOutputStreamBuilder for the given filesystem and path.",
                "FSDataOutputStreamBuilder createFile(Path path)": "Create a new FSDataOutputStreamBuilder for the file with path.",
                "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)": "Create a multipart uploader.",
                "boolean createNewFile(Path f)": "Creates the given Path as a brand-new zero-length file.",
                "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Opens an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Opens an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)": "Opens an FSDataOutputStream at the indicated Path with write-progress reporting.",
                "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)": "Hook to implement support for PathHandle operations.",
                "Path createSnapshot(Path path)": "Create a snapshot with a default name.",
                "Path createSnapshot(Path path, String snapshotName)": "Create a snapshot.",
                "void createSymlink(Path target, Path link, boolean createParent)": "See FileContext.createSymlink(Path, Path, boolean).",
                "boolean delete(Path f, boolean recursive)": "Delete a file.",
                "boolean deleteOnExit(Path f)": "Mark a path to be deleted when its FileSystem is closed.",
                "void deleteSnapshot(Path path, String snapshotName)": "Delete a snapshot of a directory.",
                "void enableSymlinks()": "",
                "boolean exists(Path f)": "Check if a path exists.",
                "Path fixRelativePart(Path p)": "See FileContext.fixRelativePart(org.apache.hadoop.fs.Path).",
                "FileSystem get(Configuration conf)": "Returns the configured FileSystem implementation.",
                "FileSystem get(URI uri, Configuration conf)": "Get a FileSystem for this URI's scheme and authority.",
                "FileSystem get(URI uri, Configuration conf, String user)": "Get a FileSystem instance based on the uri, the passed in configuration and the user.",
                "AclStatus getAclStatus(Path path)": "Gets the ACL of a file or directory.",
                "Collection getAllStoragePolicies()": "Retrieve all the storage policies supported by this file system.",
                "String getCanonicalServiceName()": "Get a canonical service name for this FileSystem.",
                "URI getCanonicalUri()": "Return a canonicalized form of this FileSystem's URI.",
                "ContentSummary getContentSummary(Path f)": "Return the ContentSummary of a given Path.",
                "long getDefaultBlockSize(Path f)": "Return the number of bytes that large input files should be optimally be split into to minimize I/O time.",
                "int getDefaultPort()": "Get the default port for this FileSystem.",
                "short getDefaultReplication(Path path)": "Get the default replication for a path.",
                "URI getDefaultUri(Configuration conf)": "Get the default FileSystem URI from a configuration.",
                "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)": "Return an array containing hostnames, offset and size of portions of the given file.",
                "BlockLocation[] getFileBlockLocations(Path p, long start, long len)": "Return an array containing hostnames, offset and size of portions of the given file.",
                "FileChecksum getFileChecksum(Path f)": "Get the checksum of a file, if the FS supports checksums.",
                "FileChecksum getFileChecksum(Path f, long length)": "Get the checksum of a file, from the beginning of the file till the specific length.",
                "FileStatus getFileLinkStatus(Path f)": "See FileContext.getFileLinkStatus(Path).",
                "FileStatus getFileStatus(Path f)": "Return a file status object that represents the path.",
                "Class getFileSystemClass(String scheme, Configuration conf)": "Get the FileSystem implementation class of a filesystem.",
                "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)": "",
                "GlobalStorageStatistics getGlobalStorageStatistics()": "Get the global storage statistics.",
                "Path getHomeDirectory()": "Return the current user's home directory in this FileSystem.",
                "Path getInitialWorkingDirectory()": "Note: with the new FileContext class, getWorkingDirectory() will be removed.",
                "Path getLinkTarget(Path f)": "See FileContext.getLinkTarget(Path).",
                "LocalFileSystem getLocal(Configuration conf)": "Get the local FileSystem.",
                "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)": "Create a durable, serializable handle to the referent of the given entity.",
                "QuotaUsage getQuotaUsage(Path f)": "Return the QuotaUsage of a given Path.",
                "String getScheme()": "Return the protocol scheme for this FileSystem.",
                "FsServerDefaults getServerDefaults(Path p)": "Return a set of server default configuration values.",
                "FsStatus getStatus()": "Returns a status object describing the use and capacity of the filesystem.",
                "FsStatus getStatus(Path p)": "Returns a status object describing the use and capacity of the filesystem.",
                "BlockStoragePolicySpi getStoragePolicy(Path src)": "Query the effective storage policy ID for the given file or directory.",
                "StorageStatistics getStorageStatistics()": "Get the StorageStatistics for this FileSystem object.",
                "Path getTrashRoot(Path path)": "Get the root directory of Trash for current user when the path specified is deleted.",
                "Collection getTrashRoots(boolean allUsers)": "Get all the trash roots for current user or all users.",
                "URI getUri()": "Returns a URI which identifies this FileSystem.",
                "long getUsed()": "Return the total size of all files in the filesystem.",
                "long getUsed(Path path)": "Return the total size of all files from a specified path.",
                "Path getWorkingDirectory()": "Get the current working directory for the given FileSystem",
                "byte[] getXAttr(Path path, String name)": "Get an xattr name and value for a file or directory.",
                "Map getXAttrs(Path path)": "Get all of the xattr name/value pairs for a file or directory.",
                "Map getXAttrs(Path path, List names)": "Get all of the xattrs name/value pairs for a file or directory.",
                "FileStatus[] globStatus(Path pathPattern)": "Return all the files that match filePattern and are not checksum files.",
                "FileStatus[] globStatus(Path pathPattern, PathFilter filter)": "Return an array of FileStatus objects whose path names match pathPattern and is accepted by the user-supplied path filter.",
                "boolean hasPathCapability(Path path, String capability)": "The base FileSystem implementation generally has no knowledge of the capabilities of actual implementations.",
                "void initialize(URI name, Configuration conf)": "Initialize a FileSystem.",
                "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)": "List corrupted file blocks.",
                "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)": "List the statuses and block locations of the files in the given path.",
                "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)": "List the statuses of the files/directories in the given path if the path is a directory.",
                "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)": "List a directory.",
                "FileStatus[] listStatus(Path f)": "List the statuses of the files/directories in the given path if the path is a directory.",
                "FileStatus[] listStatus(Path[] files)": "Filter files/directories in the given list of paths using default path filter.",
                "FileStatus[] listStatus(Path[] files, PathFilter filter)": "Filter files/directories in the given list of paths using user-supplied path filter.",
                "FileStatus[] listStatus(Path f, PathFilter filter)": "Filter files/directories in the given path using the user-supplied path filter.",
                "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)": "Returns a remote iterator so that followup calls are made on demand while consuming the entries.",
                "List listXAttrs(Path path)": "Get all of the xattr names for a file or directory.",
                "Path makeQualified(Path path)": "Qualify a path to one which uses this FileSystem and, if relative, made absolute.",
                "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)": "Create a directory with the provided permission.",
                "boolean mkdirs(Path f)": "Call mkdirs(Path, FsPermission) with default permission.",
                "boolean mkdirs(Path f, FsPermission permission)": "Make the given file and all non-existent parents into directories.",
                "void modifyAclEntries(Path path, List aclSpec)": "Modifies ACL entries of files and directories.",
                "void moveFromLocalFile(Path[] srcs, Path dst)": "The src files is on the local disk.",
                "void moveFromLocalFile(Path src, Path dst)": "The src file is on the local disk.",
                "void moveToLocalFile(Path src, Path dst)": "Copy a file to the local filesystem, then delete it from the remote filesystem (if successfully copied).",
                "void msync()": "Synchronize client metadata state.",
                "FileSystem newInstance(Configuration conf)": "Returns a unique configured FileSystem implementation for the default filesystem of the supplied configuration.",
                "FileSystem newInstance(URI uri, Configuration config)": "Returns the FileSystem for this URI's scheme and authority.",
                "FileSystem newInstance(URI uri, Configuration conf, String user)": "Returns the FileSystem for this URI's scheme and authority and the given user.",
                "LocalFileSystem newInstanceLocal(Configuration conf)": "Get a unique local FileSystem object.",
                "FSDataInputStream open(Path f)": "Opens an FSDataInputStream at the indicated Path.",
                "FSDataInputStream open(PathHandle fd)": "Open an FSDataInputStream matching the PathHandle instance.",
                "FSDataInputStream open(PathHandle fd, int bufferSize)": "Open an FSDataInputStream matching the PathHandle instance.",
                "FSDataInputStream open(Path f, int bufferSize)": "Opens an FSDataInputStream at the indicated Path.",
                "FutureDataInputStreamBuilder openFile(Path path)": "Open a file for reading through a builder API.",
                "FutureDataInputStreamBuilder openFile(PathHandle pathHandle)": "Open a file for reading through a builder API.",
                "CompletableFuture openFileWithOptions(PathHandle pathHandle, org.apache.hadoop.fs.impl.OpenFileParameters parameters)": "Execute the actual open file operation.",
                "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)": "Execute the actual open file operation.",
                "void printStatistics()": "Print all statistics for all file systems to System.out",
                "void processDeleteOnExit()": "Delete all paths that were marked as delete-on-exit.",
                "void removeAcl(Path path)": "Removes all but the base ACL entries of files and directories.",
                "void removeAclEntries(Path path, List aclSpec)": "Removes ACL entries from files and directories.",
                "void removeDefaultAcl(Path path)": "Removes all default ACL entries from files and directories.",
                "void removeXAttr(Path path, String name)": "Remove an xattr of a file or directory.",
                "boolean rename(Path src, Path dst)": "Renames Path src to Path dst.",
                "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)": "Rename a snapshot.",
                "Path resolveLink(Path f)": "See AbstractFileSystem.getLinkTarget(Path).",
                "Path resolvePath(Path p)": "Return the fully-qualified path of path, resolving the path through any symlinks or mount point.",
                "void satisfyStoragePolicy(Path path)": "Set the source path to satisfy storage policy.",
                "void setAcl(Path path, List aclSpec)": "Fully replaces ACL of files and directories, discarding all existing entries.",
                "void setDefaultUri(Configuration conf, String uri)": "Set the default FileSystem URI in a configuration.",
                "void setDefaultUri(Configuration conf, URI uri)": "Set the default FileSystem URI in a configuration.",
                "void setOwner(Path p, String username, String groupname)": "Set owner of a path (i.e.",
                "void setPermission(Path p, FsPermission permission)": "Set permission of a path.",
                "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)": "Set quota for the given Path.",
                "void setQuotaByStorageType(Path src, StorageType type, long quota)": "Set per storage type quota for the given Path.",
                "boolean setReplication(Path src, short replication)": "Set the replication for an existing file.",
                "void setStoragePolicy(Path src, String policyName)": "Set the storage policy for a given file or directory.",
                "void setTimes(Path p, long mtime, long atime)": "Set access time of a file.",
                "void setVerifyChecksum(boolean verifyChecksum)": "Set the verify checksum flag.",
                "void setWorkingDirectory(Path new_dir)": "Set the current working directory for the given FileSystem.",
                "void setWriteChecksum(boolean writeChecksum)": "Set the write checksum flag.",
                "void setXAttr(Path path, String name, byte[] value)": "Set an xattr of a file or directory.",
                "void setXAttr(Path path, String name, byte[] value, EnumSet flag)": "Set an xattr of a file or directory.",
                "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)": "Returns a local file that the user can write output to.",
                "boolean supportsSymlinks()": "See AbstractFileSystem.supportsSymlinks().",
                "boolean truncate(Path f, long newLength)": "Truncate the file in the indicated path to the indicated size.",
                "void unsetStoragePolicy(Path src)": "Unset the storage policy set for a given file or directory.",
                "Configuration getConf()": "Return the configuration used by this object.",
                "void setConf(Configuration conf)": "Set the configuration to be used by this object."
            },
            "super class": [
                "org.apache.hadoop.conf.Configured"
            ]
        }
    },
    "java.util.Map": {
        "java.util.Map": {
            "class": "Map",
            "category": "Interface",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map."
            },
            "super class": []
        }
    },
    "java.util.NavigableMap": {
        "java.util.NavigableMap": {
            "class": "NavigableMap",
            "category": "Interface",
            "methods": {
                "Map.Entry ceilingEntry(K key)": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.",
                "K ceilingKey(K key)": "Returns the least key greater than or equal to the given key, or null if there is no such key.",
                "NavigableSet descendingKeySet()": "Returns a reverse order NavigableSet view of the keys contained in this map.",
                "NavigableMap descendingMap()": "Returns a reverse order view of the mappings contained in this map.",
                "Map.Entry firstEntry()": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
                "Map.Entry floorEntry(K key)": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.",
                "K floorKey(K key)": "Returns the greatest key less than or equal to the given key, or null if there is no such key.",
                "SortedMap headMap(K toKey)": "Returns a view of the portion of this map whose keys are strictly less than toKey.",
                "NavigableMap headMap(K toKey, boolean inclusive)": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.",
                "Map.Entry higherEntry(K key)": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.",
                "K higherKey(K key)": "Returns the least key strictly greater than the given key, or null if there is no such key.",
                "Map.Entry lastEntry()": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
                "Map.Entry lowerEntry(K key)": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.",
                "K lowerKey(K key)": "Returns the greatest key strictly less than the given key, or null if there is no such key.",
                "NavigableSet navigableKeySet()": "Returns a NavigableSet view of the keys contained in this map.",
                "Map.Entry pollFirstEntry()": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
                "Map.Entry pollLastEntry()": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
                "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)": "Returns a view of the portion of this map whose keys range from fromKey to toKey.",
                "SortedMap subMap(K fromKey, K toKey)": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.",
                "SortedMap tailMap(K fromKey)": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey.",
                "NavigableMap tailMap(K fromKey, boolean inclusive)": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.",
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "Comparator comparator()": "Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.",
                "K firstKey()": "Returns the first (lowest) key currently in this map.",
                "K lastKey()": "Returns the last (highest) key currently in this map."
            },
            "super class": [
                "java.util.Map",
                "java.util.SortedMap"
            ]
        }
    },
    "java.sql.CallableStatement": {
        "java.sql.CallableStatement": {
            "class": "CallableStatement",
            "category": "Interface",
            "methods": {
                "Array getArray(int parameterIndex)": "Retrieves the value of the designated JDBC ARRAY parameter as an Array object in the Java programming language.",
                "Array getArray(String parameterName)": "Retrieves the value of a JDBC ARRAY parameter as an Array object in the Java programming language.",
                "BigDecimal getBigDecimal(int parameterIndex)": "Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.",
                "BigDecimal getBigDecimal(String parameterName)": "Retrieves the value of a JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.",
                "Blob getBlob(int parameterIndex)": "Retrieves the value of the designated JDBC BLOB parameter as a Blob object in the Java programming language.",
                "Blob getBlob(String parameterName)": "Retrieves the value of a JDBC BLOB parameter as a Blob object in the Java programming language.",
                "boolean getBoolean(int parameterIndex)": "Retrieves the value of the designated JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.",
                "boolean getBoolean(String parameterName)": "Retrieves the value of a JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.",
                "byte getByte(int parameterIndex)": "Retrieves the value of the designated JDBC TINYINT parameter as a byte in the Java programming language.",
                "byte getByte(String parameterName)": "Retrieves the value of a JDBC TINYINT parameter as a byte in the Java programming language.",
                "byte[] getBytes(int parameterIndex)": "Retrieves the value of the designated JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.",
                "byte[] getBytes(String parameterName)": "Retrieves the value of a JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.",
                "Reader getCharacterStream(int parameterIndex)": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.",
                "Reader getCharacterStream(String parameterName)": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.",
                "Clob getClob(int parameterIndex)": "Retrieves the value of the designated JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.",
                "Clob getClob(String parameterName)": "Retrieves the value of a JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.",
                "Date getDate(int parameterIndex)": "Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object.",
                "Date getDate(int parameterIndex, Calendar cal)": "Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date.",
                "Date getDate(String parameterName)": "Retrieves the value of a JDBC DATE parameter as a java.sql.Date object.",
                "Date getDate(String parameterName, Calendar cal)": "Retrieves the value of a JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date.",
                "double getDouble(int parameterIndex)": "Retrieves the value of the designated JDBC DOUBLE parameter as a double in the Java programming language.",
                "double getDouble(String parameterName)": "Retrieves the value of a JDBC DOUBLE parameter as a double in the Java programming language.",
                "float getFloat(int parameterIndex)": "Retrieves the value of the designated JDBC FLOAT parameter as a float in the Java programming language.",
                "float getFloat(String parameterName)": "Retrieves the value of a JDBC FLOAT parameter as a float in the Java programming language.",
                "int getInt(int parameterIndex)": "Retrieves the value of the designated JDBC INTEGER parameter as an int in the Java programming language.",
                "int getInt(String parameterName)": "Retrieves the value of a JDBC INTEGER parameter as an int in the Java programming language.",
                "long getLong(int parameterIndex)": "Retrieves the value of the designated JDBC BIGINT parameter as a long in the Java programming language.",
                "long getLong(String parameterName)": "Retrieves the value of a JDBC BIGINT parameter as a long in the Java programming language.",
                "Reader getNCharacterStream(int parameterIndex)": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.",
                "Reader getNCharacterStream(String parameterName)": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.",
                "NClob getNClob(int parameterIndex)": "Retrieves the value of the designated JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.",
                "NClob getNClob(String parameterName)": "Retrieves the value of a JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.",
                "String getNString(int parameterIndex)": "Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language.",
                "String getNString(String parameterName)": "Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language.",
                "Object getObject(int parameterIndex)": "Retrieves the value of the designated parameter as an Object in the Java programming language.",
                "T getObject(int parameterIndex, Class type)": "Returns an object representing the value of OUT parameter parameterIndex and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported.",
                "Object getObject(int parameterIndex, Map map)": "Returns an object representing the value of OUT parameter parameterIndex and uses map for the custom mapping of the parameter value.",
                "Object getObject(String parameterName)": "Retrieves the value of a parameter as an Object in the Java programming language.",
                "T getObject(String parameterName, Class type)": "Returns an object representing the value of OUT parameter parameterName and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported.",
                "Object getObject(String parameterName, Map map)": "Returns an object representing the value of OUT parameter parameterName and uses map for the custom mapping of the parameter value.",
                "Ref getRef(int parameterIndex)": "Retrieves the value of the designated JDBC REF(<structured-type>) parameter as a Ref object in the Java programming language.",
                "Ref getRef(String parameterName)": "Retrieves the value of a JDBC REF(<structured-type>) parameter as a Ref object in the Java programming language.",
                "RowId getRowId(int parameterIndex)": "Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.",
                "RowId getRowId(String parameterName)": "Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.",
                "short getShort(int parameterIndex)": "Retrieves the value of the designated JDBC SMALLINT parameter as a short in the Java programming language.",
                "short getShort(String parameterName)": "Retrieves the value of a JDBC SMALLINT parameter as a short in the Java programming language.",
                "SQLXML getSQLXML(int parameterIndex)": "Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.",
                "SQLXML getSQLXML(String parameterName)": "Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.",
                "String getString(int parameterIndex)": "Retrieves the value of the designated JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language.",
                "String getString(String parameterName)": "Retrieves the value of a JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language.",
                "Time getTime(int parameterIndex)": "Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object.",
                "Time getTime(int parameterIndex, Calendar cal)": "Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time.",
                "Time getTime(String parameterName)": "Retrieves the value of a JDBC TIME parameter as a java.sql.Time object.",
                "Time getTime(String parameterName, Calendar cal)": "Retrieves the value of a JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time.",
                "Timestamp getTimestamp(int parameterIndex)": "Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object.",
                "Timestamp getTimestamp(int parameterIndex, Calendar cal)": "Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object.",
                "Timestamp getTimestamp(String parameterName)": "Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object.",
                "Timestamp getTimestamp(String parameterName, Calendar cal)": "Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object.",
                "URL getURL(int parameterIndex)": "Retrieves the value of the designated JDBC DATALINK parameter as a java.net.URL object.",
                "URL getURL(String parameterName)": "Retrieves the value of a JDBC DATALINK parameter as a java.net.URL object.",
                "void registerOutParameter(int parameterIndex, int sqlType)": "Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType.",
                "void registerOutParameter(int parameterIndex, int sqlType, int scale)": "Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType.",
                "void registerOutParameter(int parameterIndex, int sqlType, String typeName)": "Registers the designated output parameter.",
                "void registerOutParameter(int parameterIndex, SQLType sqlType)": "Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType.",
                "void registerOutParameter(int parameterIndex, SQLType sqlType, int scale)": "Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType.",
                "void registerOutParameter(int parameterIndex, SQLType sqlType, String typeName)": "Registers the designated output parameter.",
                "void registerOutParameter(String parameterName, int sqlType)": "Registers the OUT parameter named parameterName to the JDBC type sqlType.",
                "void registerOutParameter(String parameterName, int sqlType, int scale)": "Registers the parameter named parameterName to be of JDBC type sqlType.",
                "void registerOutParameter(String parameterName, int sqlType, String typeName)": "Registers the designated output parameter.",
                "void registerOutParameter(String parameterName, SQLType sqlType)": "Registers the OUT parameter named parameterName to the JDBC type sqlType.",
                "void registerOutParameter(String parameterName, SQLType sqlType, int scale)": "Registers the parameter named parameterName to be of JDBC type sqlType.",
                "void registerOutParameter(String parameterName, SQLType sqlType, String typeName)": "Registers the designated output parameter.",
                "void setAsciiStream(String parameterName, InputStream x)": "Sets the designated parameter to the given input stream.",
                "void setAsciiStream(String parameterName, InputStream x, int length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setAsciiStream(String parameterName, InputStream x, long length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBigDecimal(String parameterName, BigDecimal x)": "Sets the designated parameter to the given java.math.BigDecimal value.",
                "void setBinaryStream(String parameterName, InputStream x)": "Sets the designated parameter to the given input stream.",
                "void setBinaryStream(String parameterName, InputStream x, int length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBinaryStream(String parameterName, InputStream x, long length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBlob(String parameterName, Blob x)": "Sets the designated parameter to the given java.sql.Blob object.",
                "void setBlob(String parameterName, InputStream inputStream)": "Sets the designated parameter to a InputStream object.",
                "void setBlob(String parameterName, InputStream inputStream, long length)": "Sets the designated parameter to a InputStream object.",
                "void setBoolean(String parameterName, boolean x)": "Sets the designated parameter to the given Java boolean value.",
                "void setByte(String parameterName, byte x)": "Sets the designated parameter to the given Java byte value.",
                "void setBytes(String parameterName, byte[] x)": "Sets the designated parameter to the given Java array of bytes.",
                "void setCharacterStream(String parameterName, Reader reader)": "Sets the designated parameter to the given Reader object.",
                "void setCharacterStream(String parameterName, Reader reader, int length)": "Sets the designated parameter to the given Reader object, which is the given number of characters long.",
                "void setCharacterStream(String parameterName, Reader reader, long length)": "Sets the designated parameter to the given Reader object, which is the given number of characters long.",
                "void setClob(String parameterName, Clob x)": "Sets the designated parameter to the given java.sql.Clob object.",
                "void setClob(String parameterName, Reader reader)": "Sets the designated parameter to a Reader object.",
                "void setClob(String parameterName, Reader reader, long length)": "Sets the designated parameter to a Reader object.",
                "void setDate(String parameterName, Date x)": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application.",
                "void setDate(String parameterName, Date x, Calendar cal)": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object.",
                "void setDouble(String parameterName, double x)": "Sets the designated parameter to the given Java double value.",
                "void setFloat(String parameterName, float x)": "Sets the designated parameter to the given Java float value.",
                "void setInt(String parameterName, int x)": "Sets the designated parameter to the given Java int value.",
                "void setLong(String parameterName, long x)": "Sets the designated parameter to the given Java long value.",
                "void setNCharacterStream(String parameterName, Reader value)": "Sets the designated parameter to a Reader object.",
                "void setNCharacterStream(String parameterName, Reader value, long length)": "Sets the designated parameter to a Reader object.",
                "void setNClob(String parameterName, NClob value)": "Sets the designated parameter to a java.sql.NClob object.",
                "void setNClob(String parameterName, Reader reader)": "Sets the designated parameter to a Reader object.",
                "void setNClob(String parameterName, Reader reader, long length)": "Sets the designated parameter to a Reader object.",
                "void setNString(String parameterName, String value)": "Sets the designated parameter to the given String object.",
                "void setNull(String parameterName, int sqlType)": "Sets the designated parameter to SQL NULL.",
                "void setNull(String parameterName, int sqlType, String typeName)": "Sets the designated parameter to SQL NULL.",
                "void setObject(String parameterName, Object x)": "Sets the value of the designated parameter with the given object.",
                "void setObject(String parameterName, Object x, int targetSqlType)": "Sets the value of the designated parameter with the given object.",
                "void setObject(String parameterName, Object x, int targetSqlType, int scale)": "Sets the value of the designated parameter with the given object.",
                "void setObject(String parameterName, Object x, SQLType targetSqlType)": "Sets the value of the designated parameter with the given object.",
                "void setObject(String parameterName, Object x, SQLType targetSqlType, int scaleOrLength)": "Sets the value of the designated parameter with the given object.",
                "void setRowId(String parameterName, RowId x)": "Sets the designated parameter to the given java.sql.RowId object.",
                "void setShort(String parameterName, short x)": "Sets the designated parameter to the given Java short value.",
                "void setSQLXML(String parameterName, SQLXML xmlObject)": "Sets the designated parameter to the given java.sql.SQLXML object.",
                "void setString(String parameterName, String x)": "Sets the designated parameter to the given Java String value.",
                "void setTime(String parameterName, Time x)": "Sets the designated parameter to the given java.sql.Time value.",
                "void setTime(String parameterName, Time x, Calendar cal)": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object.",
                "void setTimestamp(String parameterName, Timestamp x)": "Sets the designated parameter to the given java.sql.Timestamp value.",
                "void setTimestamp(String parameterName, Timestamp x, Calendar cal)": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object.",
                "void setURL(String parameterName, URL val)": "Sets the designated parameter to the given java.net.URL object.",
                "boolean wasNull()": "Retrieves whether the last OUT parameter read had the value of SQL NULL.",
                "void close()": "Releases this Statement object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed.",
                "void addBatch()": "Adds a set of parameters to this PreparedStatement object's batch of commands.",
                "void clearParameters()": "Clears the current parameter values immediately.",
                "boolean execute()": "Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement.",
                "long executeLargeUpdate()": "Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.",
                "ResultSet executeQuery()": "Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.",
                "int executeUpdate()": "Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.",
                "ResultSetMetaData getMetaData()": "Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed.",
                "ParameterMetaData getParameterMetaData()": "Retrieves the number, types and properties of this PreparedStatement object's parameters.",
                "void setArray(int parameterIndex, Array x)": "Sets the designated parameter to the given java.sql.Array object.",
                "void setAsciiStream(int parameterIndex, InputStream x)": "Sets the designated parameter to the given input stream.",
                "void setAsciiStream(int parameterIndex, InputStream x, int length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setAsciiStream(int parameterIndex, InputStream x, long length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBigDecimal(int parameterIndex, BigDecimal x)": "Sets the designated parameter to the given java.math.BigDecimal value.",
                "void setBinaryStream(int parameterIndex, InputStream x)": "Sets the designated parameter to the given input stream.",
                "void setBinaryStream(int parameterIndex, InputStream x, int length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBinaryStream(int parameterIndex, InputStream x, long length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBlob(int parameterIndex, Blob x)": "Sets the designated parameter to the given java.sql.Blob object.",
                "void setBlob(int parameterIndex, InputStream inputStream)": "Sets the designated parameter to a InputStream object.",
                "void setBlob(int parameterIndex, InputStream inputStream, long length)": "Sets the designated parameter to a InputStream object.",
                "void setBoolean(int parameterIndex, boolean x)": "Sets the designated parameter to the given Java boolean value.",
                "void setByte(int parameterIndex, byte x)": "Sets the designated parameter to the given Java byte value.",
                "void setBytes(int parameterIndex, byte[] x)": "Sets the designated parameter to the given Java array of bytes.",
                "void setCharacterStream(int parameterIndex, Reader reader)": "Sets the designated parameter to the given Reader object.",
                "void setCharacterStream(int parameterIndex, Reader reader, int length)": "Sets the designated parameter to the given Reader object, which is the given number of characters long.",
                "void setCharacterStream(int parameterIndex, Reader reader, long length)": "Sets the designated parameter to the given Reader object, which is the given number of characters long.",
                "void setClob(int parameterIndex, Clob x)": "Sets the designated parameter to the given java.sql.Clob object.",
                "void setClob(int parameterIndex, Reader reader)": "Sets the designated parameter to a Reader object.",
                "void setClob(int parameterIndex, Reader reader, long length)": "Sets the designated parameter to a Reader object.",
                "void setDate(int parameterIndex, Date x)": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application.",
                "void setDate(int parameterIndex, Date x, Calendar cal)": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object.",
                "void setDouble(int parameterIndex, double x)": "Sets the designated parameter to the given Java double value.",
                "void setFloat(int parameterIndex, float x)": "Sets the designated parameter to the given Java float value.",
                "void setInt(int parameterIndex, int x)": "Sets the designated parameter to the given Java int value.",
                "void setLong(int parameterIndex, long x)": "Sets the designated parameter to the given Java long value.",
                "void setNCharacterStream(int parameterIndex, Reader value)": "Sets the designated parameter to a Reader object.",
                "void setNCharacterStream(int parameterIndex, Reader value, long length)": "Sets the designated parameter to a Reader object.",
                "void setNClob(int parameterIndex, NClob value)": "Sets the designated parameter to a java.sql.NClob object.",
                "void setNClob(int parameterIndex, Reader reader)": "Sets the designated parameter to a Reader object.",
                "void setNClob(int parameterIndex, Reader reader, long length)": "Sets the designated parameter to a Reader object.",
                "void setNString(int parameterIndex, String value)": "Sets the designated parameter to the given String object.",
                "void setNull(int parameterIndex, int sqlType)": "Sets the designated parameter to SQL NULL.",
                "void setNull(int parameterIndex, int sqlType, String typeName)": "Sets the designated parameter to SQL NULL.",
                "void setObject(int parameterIndex, Object x)": "Sets the value of the designated parameter using the given object.",
                "void setObject(int parameterIndex, Object x, int targetSqlType)": "Sets the value of the designated parameter with the given object.",
                "void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength)": "Sets the value of the designated parameter with the given object.",
                "void setObject(int parameterIndex, Object x, SQLType targetSqlType)": "Sets the value of the designated parameter with the given object.",
                "void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength)": "Sets the value of the designated parameter with the given object.",
                "void setRef(int parameterIndex, Ref x)": "Sets the designated parameter to the given REF(<structured-type>) value.",
                "void setRowId(int parameterIndex, RowId x)": "Sets the designated parameter to the given java.sql.RowId object.",
                "void setShort(int parameterIndex, short x)": "Sets the designated parameter to the given Java short value.",
                "void setSQLXML(int parameterIndex, SQLXML xmlObject)": "Sets the designated parameter to the given java.sql.SQLXML object.",
                "void setString(int parameterIndex, String x)": "Sets the designated parameter to the given Java String value.",
                "void setTime(int parameterIndex, Time x)": "Sets the designated parameter to the given java.sql.Time value.",
                "void setTime(int parameterIndex, Time x, Calendar cal)": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object.",
                "void setTimestamp(int parameterIndex, Timestamp x)": "Sets the designated parameter to the given java.sql.Timestamp value.",
                "void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object.",
                "void setURL(int parameterIndex, URL x)": "Sets the designated parameter to the given java.net.URL value.",
                "void addBatch(String sql)": "Adds the given SQL command to the current list of commands for this Statement object.",
                "void cancel()": "Cancels this Statement object if both the DBMS and driver support aborting an SQL statement.",
                "void clearBatch()": "Empties this Statement object's current list of SQL commands.",
                "void clearWarnings()": "Clears all the warnings reported on this Statement object.",
                "void closeOnCompletion()": "Specifies that this Statement will be closed when all its dependent result sets are closed.",
                "boolean execute(String sql)": "Executes the given SQL statement, which may return multiple results.",
                "boolean execute(String sql, int autoGeneratedKeys)": "Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval.",
                "boolean execute(String sql, int[] columnIndexes)": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "boolean execute(String sql, String[] columnNames)": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "int[] executeBatch()": "Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts.",
                "long[] executeLargeBatch()": "Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts.",
                "long executeLargeUpdate(String sql)": "Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement.",
                "long executeLargeUpdate(String sql, int autoGeneratedKeys)": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval.",
                "long executeLargeUpdate(String sql, int[] columnIndexes)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "long executeLargeUpdate(String sql, String[] columnNames)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "ResultSet executeQuery(String sql)": "Executes the given SQL statement, which returns a single ResultSet object.",
                "int executeUpdate(String sql)": "Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement.",
                "int executeUpdate(String sql, int autoGeneratedKeys)": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval.",
                "int executeUpdate(String sql, int[] columnIndexes)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "int executeUpdate(String sql, String[] columnNames)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "Connection getConnection()": "Retrieves the Connection object that produced this Statement object.",
                "int getFetchDirection()": "Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object.",
                "int getFetchSize()": "Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object.",
                "ResultSet getGeneratedKeys()": "Retrieves any auto-generated keys created as a result of executing this Statement object.",
                "long getLargeMaxRows()": "Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain.",
                "long getLargeUpdateCount()": "Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned.",
                "int getMaxFieldSize()": "Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object.",
                "int getMaxRows()": "Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain.",
                "boolean getMoreResults()": "Moves to this Statement object's next result, returns true if it is a ResultSet object, and implicitly closes any current ResultSet object(s) obtained with the method getResultSet.",
                "boolean getMoreResults(int current)": "Moves to this Statement object's next result, deals with any current ResultSet object(s) according to the instructions specified by the given flag, and returns true if the next result is a ResultSet object.",
                "int getQueryTimeout()": "Retrieves the number of seconds the driver will wait for a Statement object to execute.",
                "ResultSet getResultSet()": "Retrieves the current result as a ResultSet object.",
                "int getResultSetConcurrency()": "Retrieves the result set concurrency for ResultSet objects generated by this Statement object.",
                "int getResultSetHoldability()": "Retrieves the result set holdability for ResultSet objects generated by this Statement object.",
                "int getResultSetType()": "Retrieves the result set type for ResultSet objects generated by this Statement object.",
                "int getUpdateCount()": "Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned.",
                "SQLWarning getWarnings()": "Retrieves the first warning reported by calls on this Statement object.",
                "boolean isClosed()": "Retrieves whether this Statement object has been closed.",
                "boolean isCloseOnCompletion()": "Returns a value indicating whether this Statement will be closed when all its dependent result sets are closed.",
                "boolean isPoolable()": "Returns a value indicating whether the Statement is poolable or not.",
                "void setCursorName(String name)": "Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods.",
                "void setEscapeProcessing(boolean enable)": "Sets escape processing on or off.",
                "void setFetchDirection(int direction)": "Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object.",
                "void setFetchSize(int rows)": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for ResultSet objects generated by this Statement.",
                "void setLargeMaxRows(long max)": "Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number.",
                "void setMaxFieldSize(int max)": "Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object.",
                "void setMaxRows(int max)": "Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number.",
                "void setPoolable(boolean poolable)": "Requests that a Statement be pooled or not pooled.",
                "void setQueryTimeout(int seconds)": "Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds.",
                "boolean isWrapperFor(Class iface)": "Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does.",
                "T unwrap(Class iface)": "Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy."
            },
            "super class": [
                "java.lang.AutoCloseable",
                "java.sql.PreparedStatement",
                "java.sql.Statement",
                "java.sql.Wrapper"
            ]
        }
    },
    "android.os.Bundle": {
        "android.os.Bundle": {
            "class": "Bundle",
            "category": "class",
            "methods": {
                "void clear()": "Removes all elements from the mapping of this Bundle.",
                "Object clone()": "Clones the current Bundle.",
                "Bundle deepCopy()": "Make a deep copy of the given bundle.",
                "int describeContents()": "Report the nature of this Parcelable's contents",
                "IBinder getBinder(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "Bundle getBundle(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "byte getByte(String key)": "Returns the value associated with the given key, or (byte) 0 if no mapping of the desired type exists for the given key.",
                "Byte getByte(String key, byte defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "byte[] getByteArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "char getChar(String key)": "Returns the value associated with the given key, or (char) 0 if no mapping of the desired type exists for the given key.",
                "char getChar(String key, char defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "char[] getCharArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "CharSequence getCharSequence(String key, CharSequence defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associatd with the given key.",
                "CharSequence getCharSequence(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "CharSequence[] getCharSequenceArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "ArrayList getCharSequenceArrayList(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "ClassLoader getClassLoader()": "Return the ClassLoader currently associated with this Bundle.",
                "float getFloat(String key, float defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "float getFloat(String key)": "Returns the value associated with the given key, or 0.0f if no mapping of the desired type exists for the given key.",
                "float[] getFloatArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "ArrayList getIntegerArrayList(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "T getParcelable(String key)": "This method was deprecated in API level 33. Use the type-safer getParcelable(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "T getParcelable(String key, Class clazz)": "Returns the value associated with the given key or null if: No mapping of the desired type exists for the given key.",
                "T[] getParcelableArray(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
                "Parcelable[] getParcelableArray(String key)": "This method was deprecated in API level 33. Use the type-safer getParcelableArray(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "ArrayList getParcelableArrayList(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
                "ArrayList getParcelableArrayList(String key)": "This method was deprecated in API level 33. Use the type-safer getParcelable(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "T getSerializable(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
                "Serializable getSerializable(String key)": "This method was deprecated in API level 33. Use the type-safer getSerializable(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "short getShort(String key)": "Returns the value associated with the given key, or (short) 0 if no mapping of the desired type exists for the given key.",
                "short getShort(String key, short defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "short[] getShortArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "Size getSize(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "SizeF getSizeF(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "SparseArray getSparseParcelableArray(String key)": "This method was deprecated in API level 33. Use the type-safer getSparseParcelableArray(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "SparseArray getSparseParcelableArray(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
                "ArrayList getStringArrayList(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "boolean hasFileDescriptors()": "Reports whether the bundle contains any parcelled file descriptors.",
                "void putAll(Bundle bundle)": "Inserts all mappings from the given Bundle into this Bundle.",
                "void putBinder(String key, IBinder value)": "Inserts an IBinder value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putBundle(String key, Bundle value)": "Inserts a Bundle value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putByte(String key, byte value)": "Inserts a byte value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putByteArray(String key, byte[] value)": "Inserts a byte array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putChar(String key, char value)": "Inserts a char value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putCharArray(String key, char[] value)": "Inserts a char array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putCharSequence(String key, CharSequence value)": "Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putCharSequenceArray(String key, CharSequence[] value)": "Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putCharSequenceArrayList(String key, ArrayList value)": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putFloat(String key, float value)": "Inserts a float value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putFloatArray(String key, float[] value)": "Inserts a float array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putIntegerArrayList(String key, ArrayList value)": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putParcelable(String key, Parcelable value)": "Inserts a Parcelable value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putParcelableArray(String key, Parcelable[] value)": "Inserts an array of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putParcelableArrayList(String key, ArrayList value)": "Inserts a List of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putSerializable(String key, Serializable value)": "Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putShort(String key, short value)": "Inserts a short value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putShortArray(String key, short[] value)": "Inserts a short array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putSize(String key, Size value)": "Inserts a Size value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putSizeF(String key, SizeF value)": "Inserts a SizeF value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putSparseParcelableArray(String key, SparseArray value)": "Inserts a SparceArray of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putStringArrayList(String key, ArrayList value)": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void readFromParcel(Parcel parcel)": "Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection.",
                "void remove(String key)": "Removes any entry with the given key from the mapping of this Bundle.",
                "void setClassLoader(ClassLoader loader)": "Changes the ClassLoader this Bundle uses when instantiating objects.",
                "String toString()": "Returns a string representation of the Bundle that may be suitable for debugging.",
                "void writeToParcel(Parcel parcel, int flags)": "Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection.",
                "boolean containsKey(String key)": "Returns true if the given key is contained in the mapping of this Bundle.",
                "Object get(String key)": "This method was deprecated in API level 33. Use the type-safe specific APIs depending on the type of the item to be retrieved, eg. getString(java.lang.String).",
                "boolean getBoolean(String key, boolean defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "boolean getBoolean(String key)": "Returns the value associated with the given key, or false if no mapping of the desired type exists for the given key.",
                "boolean[] getBooleanArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "double getDouble(String key, double defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "double getDouble(String key)": "Returns the value associated with the given key, or 0.0 if no mapping of the desired type exists for the given key.",
                "double[] getDoubleArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "int getInt(String key)": "Returns the value associated with the given key, or 0 if no mapping of the desired type exists for the given key.",
                "int getInt(String key, int defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "int[] getIntArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "long getLong(String key)": "Returns the value associated with the given key, or 0L if no mapping of the desired type exists for the given key.",
                "long getLong(String key, long defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "long[] getLongArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "String getString(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "String getString(String key, String defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associated with the given key.",
                "String[] getStringArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "boolean isEmpty()": "Returns true if the mapping of this Bundle is empty, false otherwise.",
                "Set keySet()": "Returns a Set containing the Strings used as keys in this Bundle.",
                "void putAll(PersistableBundle bundle)": "Inserts all mappings from the given PersistableBundle into this BaseBundle.",
                "void putBoolean(String key, boolean value)": "Inserts a Boolean value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putBooleanArray(String key, boolean[] value)": "Inserts a boolean array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putDouble(String key, double value)": "Inserts a double value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putDoubleArray(String key, double[] value)": "Inserts a double array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putInt(String key, int value)": "Inserts an int value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putIntArray(String key, int[] value)": "Inserts an int array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putLong(String key, long value)": "Inserts a long value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putLongArray(String key, long[] value)": "Inserts a long array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putString(String key, String value)": "Inserts a String value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putStringArray(String key, String[] value)": "Inserts a String array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "int size()": "Returns the number of mappings contained in this Bundle."
            },
            "super class": [
                "android.os.BaseBundle"
            ]
        }
    },
    "com.google.common.collect.Multimap": {
        "com.google.common.collect.Multimap": {
            "class": "Multimap",
            "category": "Interface",
            "methods": {
                "Map asMap()": "Returns a view of this multimap as a Map from each distinct key to the nonempty collection of that key's associated values.",
                "void clear()": "Removes all key-value pairs from the multimap, leaving it empty.",
                "boolean containsEntry(Object key, Object value)": "Returns true if this multimap contains at least one key-value pair with the key key and the value value.",
                "boolean containsKey(Object key)": "Returns true if this multimap contains at least one key-value pair with the key key.",
                "boolean containsValue(Object value)": "Returns true if this multimap contains at least one key-value pair with the value value.",
                "Collection entries()": "Returns a view collection of all key-value pairs contained in this multimap, as Map.Entry instances.",
                "boolean equals(Object obj)": "Compares the specified object with this multimap for equality.",
                "Collection get(K key)": "Returns a view collection of the values associated with key in this multimap, if any.",
                "int hashCode()": "Returns the hash code for this multimap.",
                "boolean isEmpty()": "Returns true if this multimap contains no key-value pairs.",
                "Multiset keys()": "Returns a view collection containing the key from each key-value pair in this multimap, without collapsing duplicates.",
                "Set keySet()": "Returns a view collection of all distinct keys contained in this multimap.",
                "boolean put(K key, V value)": "Stores a key-value pair in this multimap.",
                "boolean putAll(K key, Iterable values)": "Stores a key-value pair in this multimap for each of values, all using the same key, key.",
                "boolean putAll(Multimap multimap)": "Stores all key-value pairs of multimap in this multimap, in the order returned by multimap.entries().",
                "boolean remove(Object key, Object value)": "Removes a single key-value pair with the key key and the value value from this multimap, if such exists.",
                "Collection removeAll(Object key)": "Removes all values associated with the key key.",
                "Collection replaceValues(K key, Iterable values)": "Stores a collection of values with the same key, replacing any existing values for that key.",
                "int size()": "Returns the number of key-value pairs in this multimap.",
                "Collection values()": "Returns a view collection containing the value from each key-value pair contained in this multimap, without collapsing duplicates (so values().size() == size())."
            },
            "super class": []
        }
    },
    "org.w3c.dom.Node": {
        "org.w3c.dom.Node": {
            "class": "Node",
            "category": "Interface",
            "methods": {
                "Node appendChild(Node newChild)": "Adds the node newChild to the end of the list of children of this node.",
                "Node cloneNode(boolean deep)": "Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.",
                "short compareDocumentPosition(Node other)": "Compares the reference node, i.e.",
                "NamedNodeMap getAttributes()": "A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.",
                "String getBaseURI()": "The absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI.",
                "NodeList getChildNodes()": "A NodeList that contains all children of this node.",
                "Object getFeature(String feature, String version)": "This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in .",
                "Node getFirstChild()": "The first child of this node.",
                "Node getLastChild()": "The last child of this node.",
                "String getLocalName()": "Returns the local part of the qualified name of this node.",
                "String getNamespaceURI()": "The namespace URI of this node, or null if it is unspecified (see ).",
                "Node getNextSibling()": "The node immediately following this node.",
                "String getNodeName()": "The name of this node, depending on its type; see the table above.",
                "short getNodeType()": "A code representing the type of the underlying object, as defined above.",
                "String getNodeValue()": "The value of this node, depending on its type; see the table above.",
                "Document getOwnerDocument()": "The Document object associated with this node.",
                "Node getParentNode()": "The parent of this node.",
                "String getPrefix()": "The namespace prefix of this node, or null if it is unspecified.",
                "Node getPreviousSibling()": "The node immediately preceding this node.",
                "String getTextContent()": "This attribute returns the text content of this node and its descendants.",
                "Object getUserData(String key)": "Retrieves the object associated to a key on a this node.",
                "boolean hasAttributes()": "Returns whether this node (if it is an element) has any attributes.",
                "boolean hasChildNodes()": "Returns whether this node has any children.",
                "Node insertBefore(Node newChild, Node refChild)": "Inserts the node newChild before the existing child node refChild.",
                "boolean isDefaultNamespace(String namespaceURI)": "This method checks if the specified namespaceURI is the default namespace or not.",
                "boolean isEqualNode(Node arg)": "Tests whether two nodes are equal.",
                "boolean isSameNode(Node other)": "Returns whether this node is the same node as the given one.",
                "boolean isSupported(String feature, String version)": "Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in .",
                "String lookupNamespaceURI(String prefix)": "Look up the namespace URI associated to the given prefix, starting from this node.",
                "String lookupPrefix(String namespaceURI)": "Look up the prefix associated to the given namespace URI, starting from this node.",
                "void normalize()": "Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes.",
                "Node removeChild(Node oldChild)": "Removes the child node indicated by oldChild from the list of children, and returns it.",
                "Node replaceChild(Node newChild, Node oldChild)": "Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node.",
                "void setNodeValue(String nodeValue)": "The value of this node, depending on its type; see the table above.",
                "void setPrefix(String prefix)": "The namespace prefix of this node, or null if it is unspecified.",
                "void setTextContent(String textContent)": "This attribute returns the text content of this node and its descendants.",
                "Object setUserData(String key, Object data, UserDataHandler handler)": "Associate an object to a key on this node."
            },
            "super class": []
        }
    },
    "java.util.Queue": {
        "java.util.Queue": {
            "class": "Queue",
            "category": "Interface",
            "methods": {
                "boolean add(E e)": "Ensures that this collection contains the specified element (optional operation).",
                "E element()": "Retrieves, but does not remove, the head of this queue.",
                "boolean offer(E e)": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.",
                "E peek()": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.",
                "E poll()": "Retrieves and removes the head of this queue, or returns null if this queue is empty.",
                "E remove()": "Retrieves and removes the head of this queue.",
                "boolean addAll(Collection c)": "Adds all of the elements in the specified collection to this collection (optional operation).",
                "void clear()": "Removes all of the elements from this collection (optional operation).",
                "boolean contains(Object o)": "Returns true if this collection contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this collection contains all of the elements in the specified collection.",
                "boolean equals(Object o)": "Compares the specified object with this collection for equality.",
                "int hashCode()": "Returns the hash code value for this collection.",
                "boolean isEmpty()": "Returns true if this collection contains no elements.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean remove(Object o)": "Removes a single instance of the specified element from this collection, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes all of this collection's elements that are also contained in the specified collection (optional operation).",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "boolean retainAll(Collection c)": "Retains only the elements in this collection that are contained in the specified collection (optional operation).",
                "int size()": "Returns the number of elements in this collection.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "Object[] toArray()": "Returns an array containing all of the elements in this collection.",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.Collection",
                "java.lang.Iterable"
            ]
        }
    },
    "org.eclipse.swt.widgets.Widget": {
        "org.eclipse.swt.widgets.Widget": {
            "class": "Widget",
            "category": "Class",
            "methods": {
                "void addListener(int eventType, Listener listener)": "Adds the listener to the collection of listeners who will be notified when an event of the given type occurs.",
                "void checkSubclass()": "Checks that this class can be subclassed.",
                "void checkWidget()": "Throws an SWTException if the receiver cannot be accessed by the caller.",
                "void dispose()": "Disposes of the operating system resources associated with the receiver and all its descendants.",
                "Object getData()": "Returns the application-defined widget data associated with the receiver, or null if it has not been set.",
                "Object getData(String key)": "Returns the application-defined property of the receiver with the specified name, or null if it has not been set.",
                "abstract Display getDisplay()": "Returns the Display that is associated with the receiver.",
                "int getStyle()": "Returns the receiver's style information.",
                "boolean isDisposed()": "Returns true if the widget has been disposed, and false otherwise.",
                "boolean isListening(int eventType)": "Returns true if there are any listeners for the specified event type associated with the receiver, and false otherwise.",
                "void notifyListeners(int eventType, Event event)": "Notifies all of the receiver's listeners for events of the given type that one such event has occurred by invoking their handleEvent() method.",
                "void removeDisposeListener(DisposeListener listener)": "Removes the listener from the collection of listeners who will be notified when the widget is disposed.",
                "void removeListener(int eventType, Listener listener)": "Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.",
                "void removeListener(int eventType, org.eclipse.swt.internal.SWTEventListener listener)": "Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.",
                "void setData(Object data)": "Sets the application-defined widget data associated with the receiver to be the argument.",
                "void setData(String key, Object value)": "Sets the application-defined property of the receiver with the specified name to the given value.",
                "String toString()": "Returns a string containing a concise, human-readable description of the receiver."
            },
            "super class": []
        }
    },
    "com.squareup.okhttp.ResponseBody": {
        "com.squareup.okhttp.ResponseBody": {
            "class": "ResponseBody",
            "category": "Class",
            "methods": {
                "byte[] bytes()": "",
                "InputStream byteStream()": "",
                "Reader charStream()": "Returns the response as a character stream decoded with the charset of the Content-Type header.",
                "void close()": "",
                "long contentLength()": "Returns the number of bytes in that will returned by bytes(), or byteStream(), or -1 if unknown.",
                "MediaType contentType()": "",
                "ResponseBody create(MediaType contentType, byte[] content)": "Returns a new response body that transmits content.",
                "ResponseBody create(MediaType contentType, long contentLength, okio.BufferedSource content)": "Returns a new response body that transmits content.",
                "ResponseBody create(MediaType contentType, String content)": "Returns a new response body that transmits content.",
                "okio.BufferedSource source()": "",
                "String string()": "Returns the response as a string decoded with the charset of the Content-Type header."
            },
            "super class": []
        }
    },
    "javax.swing.JEditorPane": {
        "javax.swing.JEditorPane": {
            "class": "JEditorPane",
            "category": "Class",
            "methods": {
                "void addHyperlinkListener(HyperlinkListener listener)": "Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.",
                "EditorKit createDefaultEditorKit()": "Creates the default editor kit (PlainEditorKit) for when the component is first created.",
                "EditorKit createEditorKitForContentType(String type)": "Creates a handler for the given type from the default registry of editor kits.",
                "void fireHyperlinkUpdate(HyperlinkEvent e)": "Notifies all listeners that have registered interest for notification on this event type.",
                "AccessibleContext getAccessibleContext()": "Gets the AccessibleContext associated with this Component.",
                "String getContentType()": "Gets the type of content that this editor is currently set to deal with.",
                "EditorKit getEditorKit()": "Fetches the currently installed kit for handling content.",
                "String getEditorKitClassNameForContentType(String type)": "Returns the currently registered EditorKit class name for the type type.",
                "EditorKit getEditorKitForContentType(String type)": "Fetches the editor kit to use for the given type of content.",
                "HyperlinkListener[] getHyperlinkListeners()": "Returns an array of all the HyperLinkListeners added to this JEditorPane with addHyperlinkListener().",
                "URL getPage()": "Gets the current URL being displayed.",
                "Dimension getPreferredSize()": "Gets the preferred size of this component.",
                "boolean getScrollableTracksViewportHeight()": "Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.",
                "boolean getScrollableTracksViewportWidth()": "Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.",
                "InputStream getStream(URL page)": "Fetches a stream for the given URL, which is about to be loaded by the setPage method.",
                "String getText()": "Returns the text contained in this TextComponent.",
                "String getUIClassID()": "Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component.",
                "String paramString()": "Returns a string representing the state of this component.",
                "void read(InputStream in, Object desc)": "This method initializes from a stream.",
                "void registerEditorKitForContentType(String type, String classname)": "Establishes the default bindings of type to classname.",
                "void registerEditorKitForContentType(String type, String classname, ClassLoader loader)": "Establishes the default bindings of type to classname.",
                "void removeHyperlinkListener(HyperlinkListener listener)": "Removes a hyperlink listener.",
                "void replaceSelection(String content)": "Replaces the currently selected content with new content represented by the given string.",
                "void scrollToReference(String reference)": "Scrolls the view to the given reference location (that is, the value returned by the UL.getRef method for the URL being displayed).",
                "void setContentType(String type)": "Sets the type of content that this editor handles.",
                "void setEditorKit(EditorKit kit)": "Sets the currently installed kit for handling content.",
                "void setEditorKitForContentType(String type, EditorKit k)": "Directly sets the editor kit to use for the given type.",
                "void setPage(String url)": "Sets the current URL being displayed.",
                "void setPage(URL page)": "Sets the current URL being displayed.",
                "void setText(String t)": "Sets the text of this TextComponent to the specified text.",
                "void addCaretListener(CaretListener listener)": "Adds a caret listener for notification of any changes to the caret.",
                "void addInputMethodListener(InputMethodListener l)": "Adds the specified input method listener to receive input method events from this component.",
                "Keymap addKeymap(String nm, Keymap parent)": "Adds a new keymap into the keymap hierarchy.",
                "void copy()": "Transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model.",
                "void cut()": "Transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model.",
                "void fireCaretUpdate(CaretEvent e)": "Notifies all listeners that have registered interest for notification on this event type.",
                "Action[] getActions()": "Fetches the command list for the editor.",
                "Caret getCaret()": "Fetches the caret that allows text-oriented navigation over the view.",
                "Color getCaretColor()": "Fetches the current color used to render the caret.",
                "CaretListener[] getCaretListeners()": "Returns an array of all the caret listeners registered on this text component.",
                "int getCaretPosition()": "Returns the position of the text insertion caret for the text component.",
                "Color getDisabledTextColor()": "Fetches the current color used to render the disabled text.",
                "Document getDocument()": "Fetches the model associated with the editor.",
                "boolean getDragEnabled()": "Returns whether or not automatic drag handling is enabled.",
                "JTextComponent.DropLocation getDropLocation()": "Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown.",
                "DropMode getDropMode()": "Returns the drop mode for this component.",
                "char getFocusAccelerator()": "Returns the key accelerator that will cause the receiving text component to get the focus.",
                "Highlighter getHighlighter()": "Fetches the object responsible for making highlights.",
                "InputMethodRequests getInputMethodRequests()": "Gets the input method request handler which supports requests from input methods for this component.",
                "Keymap getKeymap()": "Fetches the keymap currently active in this text component.",
                "Keymap getKeymap(String nm)": "Fetches a named keymap previously added to the document.",
                "Insets getMargin()": "Returns the margin between the text component's border and its text.",
                "NavigationFilter getNavigationFilter()": "Returns the NavigationFilter.",
                "Dimension getPreferredScrollableViewportSize()": "Returns the preferred size of the viewport for a view component.",
                "Printable getPrintable(MessageFormat headerFormat, MessageFormat footerFormat)": "Returns a Printable to use for printing the content of this JTextComponent.",
                "int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)": "Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation.",
                "int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)": "Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation.",
                "String getSelectedText()": "Returns the selected text contained in this TextComponent.",
                "Color getSelectedTextColor()": "Fetches the current color used to render the selected text.",
                "Color getSelectionColor()": "Fetches the current color used to render the selection.",
                "int getSelectionEnd()": "Returns the selected text's end position.",
                "int getSelectionStart()": "Returns the selected text's start position.",
                "String getText(int offs, int len)": "Fetches a portion of the text represented by the component.",
                "String getToolTipText(MouseEvent event)": "Returns the string to be used as the tooltip for event.",
                "TextUI getUI()": "Fetches the user-interface factory for this text-oriented editor.",
                "boolean isEditable()": "Returns the boolean indicating whether this TextComponent is editable or not.",
                "void loadKeymap(Keymap map, JTextComponent.KeyBinding[] bindings, Action[] actions)": "Loads a keymap with a bunch of bindings.",
                "Rectangle modelToView(int pos)": "Converts the given location in the model to a place in the view coordinate system.",
                "void moveCaretPosition(int pos)": "Moves the caret to a new position, leaving behind a mark defined by the last time setCaretPosition was called.",
                "void paste()": "Transfers the contents of the system clipboard into the associated text model.",
                "boolean print()": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with no header or footer text.",
                "boolean print(MessageFormat headerFormat, MessageFormat footerFormat)": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with the specified header and footer text.",
                "boolean print(MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintService service, PrintRequestAttributeSet attributes, boolean interactive)": "Prints the content of this JTextComponent.",
                "void processInputMethodEvent(InputMethodEvent e)": "Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.",
                "void read(Reader in, Object desc)": "Initializes from a stream.",
                "void removeCaretListener(CaretListener listener)": "Removes a caret listener.",
                "Keymap removeKeymap(String nm)": "Removes a named keymap previously added to the document.",
                "void removeNotify()": "Makes this Component undisplayable by destroying it native screen resource.",
                "void restoreComposedText()": "Restores composed text previously saved by saveComposedText.",
                "boolean saveComposedText(int pos)": "Saves composed text around the specified position.",
                "void select(int selectionStart, int selectionEnd)": "Selects the text between the specified start and end positions.",
                "void selectAll()": "Selects all the text in the TextComponent.",
                "void setCaret(Caret c)": "Sets the caret to be used.",
                "void setCaretColor(Color c)": "Sets the current color used to render the caret.",
                "void setCaretPosition(int position)": "Sets the position of the text insertion caret for the TextComponent.",
                "void setComponentOrientation(ComponentOrientation o)": "Sets the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "void setDisabledTextColor(Color c)": "Sets the current color used to render the disabled text.",
                "void setDocument(Document doc)": "Associates the editor with a text document.",
                "void setDragEnabled(boolean b)": "Turns on or off automatic drag handling.",
                "void setDropMode(DropMode dropMode)": "Sets the drop mode for this component.",
                "void setEditable(boolean b)": "Sets the specified boolean to indicate whether or not this TextComponent should be editable.",
                "void setFocusAccelerator(char aKey)": "Sets the key accelerator that will cause the receiving text component to get the focus.",
                "void setHighlighter(Highlighter h)": "Sets the highlighter to be used.",
                "void setKeymap(Keymap map)": "Sets the keymap to use for binding events to actions.",
                "void setMargin(Insets m)": "Sets margin space between the text component's border and its text.",
                "void setNavigationFilter(NavigationFilter filter)": "Sets the NavigationFilter.",
                "void setSelectedTextColor(Color c)": "Sets the current color used to render the selected text.",
                "void setSelectionColor(Color c)": "Sets the current color used to render the selection.",
                "void setSelectionEnd(int selectionEnd)": "Sets the selection end to the specified position.",
                "void setSelectionStart(int selectionStart)": "Sets the selection start to the specified position.",
                "void setUI(TextUI ui)": "Sets the user-interface factory for this text-oriented editor.",
                "void updateUI()": "Resets the UI property to a value from the current look and feel.",
                "int viewToModel(Point pt)": "Converts the given place in the view coordinate system to the nearest representative location in the model.",
                "void write(Writer out)": "Stores the contents of the model into the given stream.",
                "void addAncestorListener(AncestorListener listener)": "Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible.",
                "void addNotify()": "Makes this Component displayable by connecting it to a native screen resource.",
                "void addVetoableChangeListener(VetoableChangeListener listener)": "Adds a VetoableChangeListener to the listener list.",
                "void computeVisibleRect(Rectangle visibleRect)": "Returns the Component's \"visible rect rectangle\" - the intersection of the visible rectangles for this component and all of its ancestors.",
                "boolean contains(int x, int y)": "Checks whether this component \"contains\" the specified point, where x and y are defined to be relative to the coordinate system of this component.",
                "JToolTip createToolTip()": "Returns the instance of JToolTip that should be used to display the tooltip.",
                "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
                "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
                "void fireVetoableChange(String propertyName, Object oldValue, Object newValue)": "Supports reporting constrained property changes.",
                "ActionListener getActionForKeyStroke(KeyStroke aKeyStroke)": "Returns the object that will perform the action registered for a given keystroke.",
                "ActionMap getActionMap()": "Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding.",
                "float getAlignmentX()": "Returns the alignment along the x axis.",
                "float getAlignmentY()": "Returns the alignment along the y axis.",
                "AncestorListener[] getAncestorListeners()": "Returns an array of all the ancestor listeners registered on this component.",
                "boolean getAutoscrolls()": "Gets the autoscrolls property.",
                "int getBaseline(int width, int height)": "Returns the baseline.",
                "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
                "Border getBorder()": "Returns the border of this component or null if no border is currently set.",
                "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and return rv.",
                "Object getClientProperty(Object key)": "Returns the value of the property with the specified key.",
                "Graphics getComponentGraphics(Graphics g)": "Returns the graphics object used to paint this component.",
                "JPopupMenu getComponentPopupMenu()": "Returns JPopupMenu that assigned for this component.",
                "int getConditionForKeyStroke(KeyStroke aKeyStroke)": "Returns the condition that determines whether a registered action occurs in response to the specified keystroke.",
                "int getDebugGraphicsOptions()": "Returns the state of graphics debugging.",
                "Locale getDefaultLocale()": "Returns the default locale used to initialize each JComponent's locale property upon creation.",
                "FontMetrics getFontMetrics(Font font)": "Gets the font metrics for the specified font.",
                "Graphics getGraphics()": "Creates a graphics context for this component.",
                "int getHeight()": "Returns the current height of this component.",
                "boolean getInheritsPopupMenu()": "Returns true if the JPopupMenu should be inherited from the parent.",
                "InputMap getInputMap()": "Returns the InputMap that is used when the component has focus.",
                "InputMap getInputMap(int condition)": "Returns the InputMap that is used during condition.",
                "InputVerifier getInputVerifier()": "Returns the input verifier for this component.",
                "Insets getInsets()": "Determines the insets of this container, which indicate the size of the container's border.",
                "Insets getInsets(Insets insets)": "Returns an Insets object containing this component's inset values.",
                "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this Component.",
                "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and return rv.",
                "Dimension getMaximumSize()": "Gets the maximum size of this component.",
                "Dimension getMinimumSize()": "Gets the minimum size of this component.",
                "Point getPopupLocation(MouseEvent event)": "Returns the preferred location to display the popup menu in this component's coordinate system.",
                "KeyStroke[] getRegisteredKeyStrokes()": "Returns the KeyStrokes that will initiate registered actions.",
                "JRootPane getRootPane()": "Returns the JRootPane ancestor for this component.",
                "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and return rv.",
                "Point getToolTipLocation(MouseEvent event)": "Returns the tooltip location in this component's coordinate system.",
                "String getToolTipText()": "Returns the tooltip string that has been set with setToolTipText.",
                "Container getTopLevelAncestor()": "Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.",
                "TransferHandler getTransferHandler()": "Gets the transferHandler property.",
                "boolean getVerifyInputWhenFocusTarget()": "Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.",
                "VetoableChangeListener[] getVetoableChangeListeners()": "Returns an array of all the vetoable change listeners registered on this component.",
                "Rectangle getVisibleRect()": "Returns the Component's \"visible rectangle\" - the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.",
                "int getWidth()": "Returns the current width of this component.",
                "int getX()": "Returns the current x coordinate of the components origin.",
                "int getY()": "Returns the current y coordinate of the components origin.",
                "void grabFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean isDoubleBuffered()": "Returns true if this component is painted to an offscreen image (\"buffer\") that's copied to the screen later.",
                "boolean isLightweightComponent(Component c)": "Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.",
                "boolean isOpaque()": "Returns true if this component is completely opaque, returns false by default.",
                "boolean isOptimizedDrawingEnabled()": "Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap.",
                "boolean isPaintingForPrint()": "Returns true if the current painting operation on this component is part of a print operation.",
                "boolean isPaintingOrigin()": "Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors.",
                "boolean isPaintingTile()": "Returns true if the component is currently painting a tile.",
                "boolean isRequestFocusEnabled()": "Returns true if this JComponent should get focus; otherwise returns false.",
                "boolean isValidateRoot()": "Indicates if this container is a validate root.",
                "void paint(Graphics g)": "Paints this component.",
                "void paintBorder(Graphics g)": "Paints the component's border.",
                "void paintChildren(Graphics g)": "Paints this component's children.",
                "void paintComponent(Graphics g)": "Calls the UI delegate's paint method, if the UI delegate is non-null.",
                "void paintImmediately(int x, int y, int w, int h)": "Paints the specified region in this component and all of its descendants that overlap the region, immediately.",
                "void paintImmediately(Rectangle r)": "Paints the specified region now.",
                "void print(Graphics g)": "Prints this component.",
                "void printAll(Graphics g)": "Prints this component and all of its subcomponents.",
                "void printBorder(Graphics g)": "Prints the component's border.",
                "void printChildren(Graphics g)": "Prints this component's children.",
                "void printComponent(Graphics g)": "This is invoked during a printing operation.",
                "void processComponentKeyEvent(KeyEvent e)": "Processes any key events that the component itself recognizes.",
                "boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)": "Invoked to process the key bindings for ks as the result of the KeyEvent e.",
                "void processKeyEvent(KeyEvent e)": "Processes key events occurring on this component by dispatching them to any registered KeyListener objects.",
                "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects.",
                "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.",
                "void putClientProperty(Object key, Object value)": "Adds an arbitrary key/value \"client property\" to this component.",
                "void registerKeyboardAction(ActionListener anAction, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void registerKeyboardAction(ActionListener anAction, String aCommand, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void removeAncestorListener(AncestorListener listener)": "Unregisters listener so that it will no longer receive AncestorEvents.",
                "void removeVetoableChangeListener(VetoableChangeListener listener)": "Removes a VetoableChangeListener from the listener list.",
                "void repaint(long tm, int x, int y, int width, int height)": "Repaints the specified rectangle of this component within tm milliseconds.",
                "void repaint(Rectangle r)": "Adds the specified region to the dirty region list if the component is showing.",
                "void requestFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocus(boolean temporary)": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocusInWindow()": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "void resetKeyboardActions()": "Unregisters all the bindings in the first tier InputMaps and ActionMap.",
                "void revalidate()": "Revalidates the component hierarchy up to the nearest validate root.",
                "void scrollRectToVisible(Rectangle aRect)": "Forwards the scrollRectToVisible() message to the JComponent's parent.",
                "void setActionMap(ActionMap am)": "Sets the ActionMap to am.",
                "void setAlignmentX(float alignmentX)": "Sets the the vertical alignment.",
                "void setAlignmentY(float alignmentY)": "Sets the the horizontal alignment.",
                "void setAutoscrolls(boolean autoscrolls)": "Sets the autoscrolls property.",
                "void setBackground(Color bg)": "Sets the background color of this component.",
                "void setBorder(Border border)": "Sets the border of this component.",
                "void setComponentPopupMenu(JPopupMenu popup)": "Sets the JPopupMenu for this JComponent.",
                "void setDebugGraphicsOptions(int debugOptions)": "Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.",
                "void setDefaultLocale(Locale l)": "Sets the default locale used to initialize each JComponent's locale property upon creation.",
                "void setDoubleBuffered(boolean aFlag)": "Sets whether this component should use a buffer to paint.",
                "void setEnabled(boolean enabled)": "Sets whether or not this component is enabled.",
                "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
                "void setFont(Font font)": "Sets the font for this component.",
                "void setForeground(Color fg)": "Sets the foreground color of this component.",
                "void setInheritsPopupMenu(boolean value)": "Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it.",
                "void setInputMap(int condition, InputMap map)": "Sets the InputMap to use under the condition condition to map.",
                "void setInputVerifier(InputVerifier inputVerifier)": "Sets the input verifier for this component.",
                "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
                "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
                "void setOpaque(boolean isOpaque)": "If true the component paints every pixel within its bounds.",
                "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component to a constant value.",
                "void setRequestFocusEnabled(boolean requestFocusEnabled)": "Provides a hint as to whether or not this JComponent should get focus.",
                "void setToolTipText(String text)": "Registers the text to display in a tool tip.",
                "void setTransferHandler(TransferHandler newHandler)": "Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop.",
                "void setUI(ComponentUI newUI)": "Sets the look and feel delegate for this component.",
                "void setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget)": "Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.",
                "void setVisible(boolean aFlag)": "Makes the component visible or invisible.",
                "void unregisterKeyboardAction(KeyStroke aKeyStroke)": "This method is now obsolete.",
                "void update(Graphics g)": "Updates this component.",
                "Component add(Component comp)": "Appends the specified component to the end of this container.",
                "Component add(Component comp, int index)": "Adds the specified component to this container at the given position.",
                "void add(Component comp, Object constraints)": "Adds the specified component to the end of this container.",
                "void add(Component comp, Object constraints, int index)": "Adds the specified component to this container with the specified constraints at the specified index.",
                "Component add(String name, Component comp)": "Adds the specified component to this container.",
                "void addContainerListener(ContainerListener l)": "Adds the specified container listener to receive container events from this container.",
                "void addImpl(Component comp, Object constraints, int index)": "Adds the specified component to this container at the specified index.",
                "void addPropertyChangeListener(PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list.",
                "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list for a specific property.",
                "void applyComponentOrientation(ComponentOrientation o)": "Sets the ComponentOrientation property of this container and all components contained within it.",
                "boolean areFocusTraversalKeysSet(int id)": "Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component.",
                "void doLayout()": "Prompts the layout manager to lay out this component.",
                "Component findComponentAt(int x, int y)": "Locates the visible child component that contains the specified position.",
                "Component findComponentAt(Point p)": "Locates the visible child component that contains the specified point.",
                "Component getComponent(int n)": "Gets the nth component in this container.",
                "Component getComponentAt(int x, int y)": "Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component.",
                "Component getComponentAt(Point p)": "Returns the component or subcomponent that contains the specified point.",
                "int getComponentCount()": "Gets the number of components in this panel.",
                "Component[] getComponents()": "Gets all the components in this container.",
                "int getComponentZOrder(Component comp)": "Returns the z-order index of the component inside the container.",
                "ContainerListener[] getContainerListeners()": "Returns an array of all the container listeners registered on this container.",
                "Set getFocusTraversalKeys(int id)": "Returns the Set of focus traversal keys for a given traversal operation for this Component.",
                "FocusTraversalPolicy getFocusTraversalPolicy()": "Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root.",
                "LayoutManager getLayout()": "Gets the layout manager for this container.",
                "Point getMousePosition(boolean allowChildren)": "Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null.",
                "void invalidate()": "Invalidates this component and its ancestors.",
                "boolean isAncestorOf(Component c)": "Checks if the component is contained in the component hierarchy of this container.",
                "boolean isFocusCycleRoot()": "Returns whether this Container is the root of a focus traversal cycle.",
                "boolean isFocusCycleRoot(Container container)": "Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle.",
                "boolean isFocusTraversalPolicyProvider()": "Returns whether this container provides focus traversal policy.",
                "boolean isFocusTraversalPolicySet()": "Returns whether the focus traversal policy has been explicitly set for this Container.",
                "void list(PrintStream out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print stream.",
                "void list(PrintWriter out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print writer.",
                "void paintComponents(Graphics g)": "Paints each of the components in this container.",
                "void printComponents(Graphics g)": "Prints each of the components in this container.",
                "void processContainerEvent(ContainerEvent e)": "Processes container events occurring on this container by dispatching them to any registered ContainerListener objects.",
                "void processEvent(AWTEvent e)": "Processes events occurring on this component.",
                "void remove(Component comp)": "Removes the specified component from this container.",
                "void remove(int index)": "Removes the component, specified by index, from this container.",
                "void removeAll()": "Removes all the components from this container.",
                "void removeContainerListener(ContainerListener l)": "Removes the specified container listener so it no longer receives container events from this container.",
                "void setComponentZOrder(Component comp, int index)": "Moves the specified component to the specified z-order index in the container.",
                "void setFocusCycleRoot(boolean focusCycleRoot)": "Sets whether this Container is the root of a focus traversal cycle.",
                "void setFocusTraversalPolicy(FocusTraversalPolicy policy)": "Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root.",
                "void setFocusTraversalPolicyProvider(boolean provider)": "Sets whether this container will be used to provide focus traversal policy.",
                "void setFont(Font f)": "Sets the font of this component.",
                "void setLayout(LayoutManager mgr)": "Sets the layout manager for this container.",
                "void transferFocusDownCycle()": "Transfers the focus down one focus traversal cycle.",
                "void validate()": "Validates this component.",
                "void validateTree()": "Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid).",
                "void add(PopupMenu popup)": "Adds the specified popup menu to the component.",
                "void addComponentListener(ComponentListener l)": "Adds the specified component listener to receive component events from this component.",
                "void addFocusListener(FocusListener l)": "Adds the specified focus listener to receive focus events from this component when this component gains input focus.",
                "void addHierarchyBoundsListener(HierarchyBoundsListener l)": "Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.",
                "void addHierarchyListener(HierarchyListener l)": "Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.",
                "void addKeyListener(KeyListener l)": "Adds the specified key listener to receive key events from this component.",
                "void addMouseListener(MouseListener l)": "Adds the specified mouse listener to receive mouse events from this component.",
                "void addMouseMotionListener(MouseMotionListener l)": "Adds the specified mouse motion listener to receive mouse motion events from this component.",
                "void addMouseWheelListener(MouseWheelListener l)": "Adds the specified mouse wheel listener to receive mouse wheel events from this component.",
                "void applyComponentOrientation(ComponentOrientation orientation)": "Sets the ComponentOrientation property of this component and all components contained within it.",
                "int checkImage(Image image, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "int checkImage(Image image, int width, int height, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)": "Potentially coalesce an event being posted with an existing event.",
                "boolean contains(Point p)": "Checks whether this component \"contains\" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.",
                "Image createImage(ImageProducer producer)": "Creates an image from the specified image producer.",
                "Image createImage(int width, int height)": "Creates an off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height)": "Creates a volatile off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height, ImageCapabilities caps)": "Creates a volatile off-screen drawable image, with the given capabilities.",
                "void disableEvents(long eventsToDisable)": "Disables the events defined by the specified event mask parameter from being delivered to this component.",
                "void dispatchEvent(AWTEvent e)": "Dispatches an event to this component or one of its sub components.",
                "void enableEvents(long eventsToEnable)": "Enables the events defined by the specified event mask parameter to be delivered to this component.",
                "void enableInputMethods(boolean enable)": "Enables or disables input method support for this component.",
                "void firePropertyChange(String propertyName, byte oldValue, byte newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, double oldValue, double newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, float oldValue, float newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, long oldValue, long newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, Object oldValue, Object newValue)": "Support for reporting bound property changes for Object properties.",
                "void firePropertyChange(String propertyName, short oldValue, short newValue)": "Reports a bound property change.",
                "Color getBackground()": "Gets the background color of this component.",
                "Rectangle getBounds()": "Gets the bounds of this component in the form of a Rectangle object.",
                "ColorModel getColorModel()": "Gets the instance of ColorModel used to display the component on the output device.",
                "ComponentListener[] getComponentListeners()": "Returns an array of all the component listeners registered on this component.",
                "ComponentOrientation getComponentOrientation()": "Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "Cursor getCursor()": "Gets the cursor set in the component.",
                "DropTarget getDropTarget()": "Gets the DropTarget associated with this Component.",
                "Container getFocusCycleRootAncestor()": "Returns the Container which is the focus cycle root of this Component's focus traversal cycle.",
                "FocusListener[] getFocusListeners()": "Returns an array of all the focus listeners registered on this component.",
                "boolean getFocusTraversalKeysEnabled()": "Returns whether focus traversal keys are enabled for this Component.",
                "Font getFont()": "Gets the font of this component.",
                "Color getForeground()": "Gets the foreground color of this component.",
                "GraphicsConfiguration getGraphicsConfiguration()": "Gets the GraphicsConfiguration associated with this Component.",
                "HierarchyBoundsListener[] getHierarchyBoundsListeners()": "Returns an array of all the hierarchy bounds listeners registered on this component.",
                "HierarchyListener[] getHierarchyListeners()": "Returns an array of all the hierarchy listeners registered on this component.",
                "boolean getIgnoreRepaint()": "",
                "InputContext getInputContext()": "Gets the input context used by this component for handling the communication with input methods when text is entered in this component.",
                "InputMethodListener[] getInputMethodListeners()": "Returns an array of all the input method listeners registered on this component.",
                "KeyListener[] getKeyListeners()": "Returns an array of all the key listeners registered on this component.",
                "Locale getLocale()": "Gets the locale of this component.",
                "Point getLocation()": "Gets the location of this component in the form of a point specifying the component's top-left corner.",
                "Point getLocationOnScreen()": "Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.",
                "MouseListener[] getMouseListeners()": "Returns an array of all the mouse listeners registered on this component.",
                "MouseMotionListener[] getMouseMotionListeners()": "Returns an array of all the mouse motion listeners registered on this component.",
                "Point getMousePosition()": "Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null.",
                "MouseWheelListener[] getMouseWheelListeners()": "Returns an array of all the mouse wheel listeners registered on this component.",
                "String getName()": "Gets the name of the component.",
                "Container getParent()": "Gets the parent of this component.",
                "PropertyChangeListener[] getPropertyChangeListeners()": "Returns an array of all the property change listeners registered on this component.",
                "PropertyChangeListener[] getPropertyChangeListeners(String propertyName)": "Returns an array of all the listeners which have been associated with the named property.",
                "Dimension getSize()": "Returns the size of this component in the form of a Dimension object.",
                "Toolkit getToolkit()": "Gets the toolkit of this component.",
                "Object getTreeLock()": "Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.",
                "boolean hasFocus()": "Returns true if this Component is the focus owner.",
                "boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)": "Repaints the component when the image has changed.",
                "boolean isBackgroundSet()": "Returns whether the background color has been explicitly set for this Component.",
                "boolean isCursorSet()": "Returns whether the cursor has been explicitly set for this Component.",
                "boolean isDisplayable()": "Determines whether this component is displayable.",
                "boolean isEnabled()": "Determines whether this component is enabled.",
                "boolean isFocusable()": "Returns whether this Component can be focused.",
                "boolean isFocusOwner()": "Returns true if this Component is the focus owner.",
                "boolean isFontSet()": "Returns whether the font has been explicitly set for this Component.",
                "boolean isForegroundSet()": "Returns whether the foreground color has been explicitly set for this Component.",
                "boolean isLightweight()": "A lightweight component doesn't have a native toolkit peer.",
                "boolean isMaximumSizeSet()": "Returns true if the maximum size has been set to a non-null value otherwise returns false.",
                "boolean isMinimumSizeSet()": "Returns whether or not setMinimumSize has been invoked with a non-null value.",
                "boolean isPreferredSizeSet()": "Returns true if the preferred size has been set to a non-null value otherwise returns false.",
                "boolean isShowing()": "Determines whether this component is showing on screen.",
                "boolean isValid()": "Determines whether this component is valid.",
                "boolean isVisible()": "Determines whether this component should be visible when its parent is visible.",
                "void list()": "Prints a listing of this component to the standard system output stream System.out.",
                "void list(PrintStream out)": "Prints a listing of this component to the specified output stream.",
                "void list(PrintWriter out)": "Prints a listing to the specified print writer.",
                "void paintAll(Graphics g)": "Paints this component and all of its subcomponents.",
                "boolean prepareImage(Image image, ImageObserver observer)": "Prepares an image for rendering on this component.",
                "boolean prepareImage(Image image, int width, int height, ImageObserver observer)": "Prepares an image for rendering on this component at the specified width and height.",
                "void processComponentEvent(ComponentEvent e)": "Processes component events occurring on this component by dispatching them to any registered ComponentListener objects.",
                "void processFocusEvent(FocusEvent e)": "Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.",
                "void processHierarchyBoundsEvent(HierarchyEvent e)": "Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects.",
                "void processHierarchyEvent(HierarchyEvent e)": "Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects.",
                "void processMouseWheelEvent(MouseWheelEvent e)": "Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects.",
                "void remove(MenuComponent popup)": "Removes the specified popup menu from the component.",
                "void removeComponentListener(ComponentListener l)": "Removes the specified component listener so that it no longer receives component events from this component.",
                "void removeFocusListener(FocusListener l)": "Removes the specified focus listener so that it no longer receives focus events from this component.",
                "void removeHierarchyBoundsListener(HierarchyBoundsListener l)": "Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.",
                "void removeHierarchyListener(HierarchyListener l)": "Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.",
                "void removeInputMethodListener(InputMethodListener l)": "Removes the specified input method listener so that it no longer receives input method events from this component.",
                "void removeKeyListener(KeyListener l)": "Removes the specified key listener so that it no longer receives key events from this component.",
                "void removeMouseListener(MouseListener l)": "Removes the specified mouse listener so that it no longer receives mouse events from this component.",
                "void removeMouseMotionListener(MouseMotionListener l)": "Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.",
                "void removeMouseWheelListener(MouseWheelListener l)": "Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.",
                "void removePropertyChangeListener(PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list.",
                "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list for a specific property.",
                "void repaint()": "Repaints this component.",
                "void repaint(int x, int y, int width, int height)": "Repaints the specified rectangle of this component.",
                "void repaint(long tm)": "Repaints the component.",
                "void setBackground(Color c)": "Sets the background color of this component.",
                "void setBounds(int x, int y, int width, int height)": "Moves and resizes this component.",
                "void setBounds(Rectangle r)": "Moves and resizes this component to conform to the new bounding rectangle r.",
                "void setCursor(Cursor cursor)": "Sets the cursor image to the specified cursor.",
                "void setDropTarget(DropTarget dt)": "Associate a DropTarget with this component.",
                "void setEnabled(boolean b)": "Enables or disables this component, depending on the value of the parameter b.",
                "void setFocusable(boolean focusable)": "Sets the focusable state of this Component to the specified value.",
                "void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)": "Sets whether focus traversal keys are enabled for this Component.",
                "void setForeground(Color c)": "Sets the foreground color of this component.",
                "void setIgnoreRepaint(boolean ignoreRepaint)": "Sets whether or not paint messages received from the operating system should be ignored.",
                "void setLocale(Locale l)": "Sets the locale of this component.",
                "void setLocation(int x, int y)": "Moves this component to a new location.",
                "void setLocation(Point p)": "Moves this component to a new location.",
                "void setName(String name)": "Sets the name of the component to the specified string.",
                "void setSize(Dimension d)": "Resizes this component so that it has width d.width and height d.height.",
                "void setSize(int width, int height)": "Resizes this component so that it has width width and height height.",
                "void setVisible(boolean b)": "Shows or hides this component depending on the value of parameter b.",
                "String toString()": "Returns a string representation of this component and its values.",
                "void transferFocus()": "Transfers the focus to the next component, as though this Component were the focus owner.",
                "void transferFocusBackward()": "Transfers the focus to the previous component, as though this Component were the focus owner.",
                "void transferFocusUpCycle()": "Transfers the focus up one focus traversal cycle."
            },
            "super class": [
                "javax.swing.text.JTextComponent",
                "javax.swing.JComponent",
                "java.awt.Container",
                "java.awt.Component"
            ]
        }
    },
    "android.os.BaseBundle": {
        "android.os.BaseBundle": {
            "class": "BaseBundle",
            "category": "class",
            "methods": {
                "void clear()": "Removes all elements from the mapping of this Bundle.",
                "boolean containsKey(String key)": "Returns true if the given key is contained in the mapping of this Bundle.",
                "Object get(String key)": "This method was deprecated in API level 33. Use the type-safe specific APIs depending on the type of the item to be retrieved, eg. getString(java.lang.String).",
                "boolean getBoolean(String key, boolean defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "boolean getBoolean(String key)": "Returns the value associated with the given key, or false if no mapping of the desired type exists for the given key.",
                "boolean[] getBooleanArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "double getDouble(String key, double defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "double getDouble(String key)": "Returns the value associated with the given key, or 0.0 if no mapping of the desired type exists for the given key.",
                "double[] getDoubleArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "int getInt(String key)": "Returns the value associated with the given key, or 0 if no mapping of the desired type exists for the given key.",
                "int getInt(String key, int defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "int[] getIntArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "long getLong(String key)": "Returns the value associated with the given key, or 0L if no mapping of the desired type exists for the given key.",
                "long getLong(String key, long defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
                "long[] getLongArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "String getString(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "String getString(String key, String defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associated with the given key.",
                "String[] getStringArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
                "boolean isEmpty()": "Returns true if the mapping of this Bundle is empty, false otherwise.",
                "Set keySet()": "Returns a Set containing the Strings used as keys in this Bundle.",
                "void putAll(PersistableBundle bundle)": "Inserts all mappings from the given PersistableBundle into this BaseBundle.",
                "void putBoolean(String key, boolean value)": "Inserts a Boolean value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putBooleanArray(String key, boolean[] value)": "Inserts a boolean array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putDouble(String key, double value)": "Inserts a double value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putDoubleArray(String key, double[] value)": "Inserts a double array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putInt(String key, int value)": "Inserts an int value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putIntArray(String key, int[] value)": "Inserts an int array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putLong(String key, long value)": "Inserts a long value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putLongArray(String key, long[] value)": "Inserts a long array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putString(String key, String value)": "Inserts a String value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void putStringArray(String key, String[] value)": "Inserts a String array value into the mapping of this Bundle, replacing any existing value for the given key.",
                "void remove(String key)": "Removes any entry with the given key from the mapping of this Bundle.",
                "int size()": "Returns the number of mappings contained in this Bundle."
            },
            "super class": []
        }
    },
    "android.content.Intent": {
        "android.content.Intent": {
            "class": "Intent",
            "category": "class",
            "methods": {
                "Intent addCategory(String category)": "Add a new category to the intent.",
                "Intent addFlags(int flags)": "Add additional flags to the intent (or with existing flags value).",
                "Object clone()": "Creates and returns a copy of this object.",
                "Intent cloneFilter()": "Make a clone of only the parts of the Intent that are relevant for filter matching: the action, data, type, component, and categories.",
                "Intent createChooser(Intent target, CharSequence title, IntentSender sender)": "Convenience function for creating a ACTION_CHOOSER Intent.",
                "Intent createChooser(Intent target, CharSequence title)": "Convenience function for creating a ACTION_CHOOSER Intent.",
                "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
                "int fillIn(Intent other, int flags)": "Copy the contents of other in to this object, but only where fields are not defined by this object.",
                "boolean filterEquals(Intent other)": "Determine if two intents are the same for the purposes of intent resolution (filtering).",
                "int filterHashCode()": "Generate hash code that matches semantics of filterEquals().",
                "String getAction()": "Retrieve the general action to be performed, such as ACTION_VIEW.",
                "boolean[] getBooleanArrayExtra(String name)": "Retrieve extended data from the intent.",
                "boolean getBooleanExtra(String name, boolean defaultValue)": "Retrieve extended data from the intent.",
                "Bundle getBundleExtra(String name)": "Retrieve extended data from the intent.",
                "byte[] getByteArrayExtra(String name)": "Retrieve extended data from the intent.",
                "byte getByteExtra(String name, byte defaultValue)": "Retrieve extended data from the intent.",
                "Set getCategories()": "Return the set of all categories in the intent.",
                "char[] getCharArrayExtra(String name)": "Retrieve extended data from the intent.",
                "char getCharExtra(String name, char defaultValue)": "Retrieve extended data from the intent.",
                "CharSequence[] getCharSequenceArrayExtra(String name)": "Retrieve extended data from the intent.",
                "ArrayList getCharSequenceArrayListExtra(String name)": "Retrieve extended data from the intent.",
                "CharSequence getCharSequenceExtra(String name)": "Retrieve extended data from the intent.",
                "ClipData getClipData()": "Return the ClipData associated with this Intent.",
                "ComponentName getComponent()": "Retrieve the concrete component associated with the intent.",
                "Uri getData()": "Retrieve data this intent is operating on.",
                "String getDataString()": "The same as getData(), but returns the URI as an encoded String.",
                "double[] getDoubleArrayExtra(String name)": "Retrieve extended data from the intent.",
                "double getDoubleExtra(String name, double defaultValue)": "Retrieve extended data from the intent.",
                "Bundle getExtras()": "Retrieves a map of extended data from the intent.",
                "int getFlags()": "Retrieve any special flags associated with this intent.",
                "float[] getFloatArrayExtra(String name)": "Retrieve extended data from the intent.",
                "float getFloatExtra(String name, float defaultValue)": "Retrieve extended data from the intent.",
                "String getIdentifier()": "Retrieve the identifier for this Intent.",
                "int[] getIntArrayExtra(String name)": "Retrieve extended data from the intent.",
                "int getIntExtra(String name, int defaultValue)": "Retrieve extended data from the intent.",
                "ArrayList getIntegerArrayListExtra(String name)": "Retrieve extended data from the intent.",
                "Intent getIntent(String uri)": "This method was deprecated in API level 15. Use parseUri(String, int) instead.",
                "Intent getIntentOld(String uri)": "Intent getIntentOld(String uri)",
                "long[] getLongArrayExtra(String name)": "Retrieve extended data from the intent.",
                "long getLongExtra(String name, long defaultValue)": "Retrieve extended data from the intent.",
                "String getPackage()": "Retrieve the application package name this Intent is limited to.",
                "Parcelable[] getParcelableArrayExtra(String name)": "This method was deprecated in API level 33. Use the type-safer getParcelableArrayExtra(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "T[] getParcelableArrayExtra(String name, Class clazz)": "Retrieve extended data from the intent.",
                "ArrayList getParcelableArrayListExtra(String name, Class clazz)": "Retrieve extended data from the intent.",
                "ArrayList getParcelableArrayListExtra(String name)": "This method was deprecated in API level 33. Use the type-safer getParcelableArrayListExtra(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "T getParcelableExtra(String name)": "This method was deprecated in API level 33. Use the type-safer getParcelableExtra(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "T getParcelableExtra(String name, Class clazz)": "Retrieve extended data from the intent.",
                "String getScheme()": "Return the scheme portion of the intent's data.",
                "Intent getSelector()": "Return the specific selector associated with this Intent.",
                "T getSerializableExtra(String name, Class clazz)": "Retrieve extended data from the intent.",
                "Serializable getSerializableExtra(String name)": "This method was deprecated in API level 33. Use the type-safer getSerializableExtra(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
                "short[] getShortArrayExtra(String name)": "Retrieve extended data from the intent.",
                "short getShortExtra(String name, short defaultValue)": "Retrieve extended data from the intent.",
                "Rect getSourceBounds()": "Get the bounds of the sender of this intent, in screen coordinates.",
                "String[] getStringArrayExtra(String name)": "Retrieve extended data from the intent.",
                "ArrayList getStringArrayListExtra(String name)": "Retrieve extended data from the intent.",
                "String getStringExtra(String name)": "Retrieve extended data from the intent.",
                "String getType()": "Retrieve any explicit MIME type included in the intent.",
                "boolean hasCategory(String category)": "Check if a category exists in the intent.",
                "boolean hasExtra(String name)": "Returns true if an extra value is associated with the given name.",
                "boolean hasFileDescriptors()": "Returns true if the Intent's extras contain a parcelled file descriptor.",
                "Intent makeMainActivity(ComponentName mainActivity)": "Create an intent to launch the main (root) activity of a task.",
                "Intent makeMainSelectorActivity(String selectorAction, String selectorCategory)": "Make an Intent for the main activity of an application, without specifying a specific activity to run but giving a selector to find the activity.",
                "Intent makeRestartActivityTask(ComponentName mainActivity)": "Make an Intent that can be used to re-launch an application's task in its base state.",
                "String normalizeMimeType(String type)": "Normalize a MIME data type.",
                "Intent parseIntent(Resources resources, XmlPullParser parser, AttributeSet attrs)": "Parses the \"intent\" element (and its children) from XML and instantiates an Intent object.",
                "Intent parseUri(String uri, int flags)": "Create an intent from a URI.",
                "Intent putCharSequenceArrayListExtra(String name, ArrayList value)": "Add extended data to the intent.",
                "Intent putExtra(String name, Parcelable value)": "Add extended data to the intent.",
                "Intent putExtra(String name, long[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, byte value)": "Add extended data to the intent.",
                "Intent putExtra(String name, double[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, CharSequence value)": "Add extended data to the intent.",
                "Intent putExtra(String name, boolean[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, int value)": "Add extended data to the intent.",
                "Intent putExtra(String name, char[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, byte[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, Parcelable[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, Bundle value)": "Add extended data to the intent.",
                "Intent putExtra(String name, CharSequence[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, float[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, double value)": "Add extended data to the intent.",
                "Intent putExtra(String name, int[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, String[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, short[] value)": "Add extended data to the intent.",
                "Intent putExtra(String name, boolean value)": "Add extended data to the intent.",
                "Intent putExtra(String name, String value)": "Add extended data to the intent.",
                "Intent putExtra(String name, long value)": "Add extended data to the intent.",
                "Intent putExtra(String name, char value)": "Add extended data to the intent.",
                "Intent putExtra(String name, Serializable value)": "Add extended data to the intent.",
                "Intent putExtra(String name, float value)": "Add extended data to the intent.",
                "Intent putExtra(String name, short value)": "Add extended data to the intent.",
                "Intent putExtras(Intent src)": "Copy all extras in 'src' in to this intent.",
                "Intent putExtras(Bundle extras)": "Add a set of extended data to the intent.",
                "Intent putIntegerArrayListExtra(String name, ArrayList value)": "Add extended data to the intent.",
                "Intent putParcelableArrayListExtra(String name, ArrayList value)": "Add extended data to the intent.",
                "Intent putStringArrayListExtra(String name, ArrayList value)": "Add extended data to the intent.",
                "void readFromParcel(Parcel in)": "void readFromParcel(Parcel in)",
                "void removeCategory(String category)": "Remove a category from an intent.",
                "void removeExtra(String name)": "Remove extended data from the intent.",
                "void removeFlags(int flags)": "Remove these flags from the intent.",
                "Intent replaceExtras(Intent src)": "Completely replace the extras in the Intent with the extras in the given Intent.",
                "Intent replaceExtras(Bundle extras)": "Completely replace the extras in the Intent with the given Bundle of extras.",
                "ComponentName resolveActivity(PackageManager pm)": "Return the Activity component that should be used to handle this intent.",
                "ActivityInfo resolveActivityInfo(PackageManager pm, int flags)": "Resolve the Intent into an ActivityInfo describing the activity that should execute the intent.",
                "String resolveType(Context context)": "Return the MIME data type of this intent.",
                "String resolveType(ContentResolver resolver)": "Return the MIME data type of this intent.",
                "String resolveTypeIfNeeded(ContentResolver resolver)": "Return the MIME data type of this intent, only if it will be needed for intent resolution.",
                "Intent setAction(String action)": "Set the general action to be performed.",
                "Intent setClass(Context packageContext, Class cls)": "Convenience for calling setComponent(android.content.ComponentName) with the name returned by a Class object.",
                "Intent setClassName(String packageName, String className)": "Convenience for calling setComponent(ComponentName) with an explicit application package name and class name.",
                "Intent setClassName(Context packageContext, String className)": "Convenience for calling setComponent(ComponentName) with an explicit class name.",
                "void setClipData(ClipData clip)": "Set a ClipData associated with this Intent.",
                "Intent setComponent(ComponentName component)": "(Usually optional) Explicitly set the component to handle the intent.",
                "Intent setData(Uri data)": "Set the data this intent is operating on.",
                "Intent setDataAndNormalize(Uri data)": "Normalize and set the data this intent is operating on.",
                "Intent setDataAndType(Uri data, String type)": "(Usually optional) Set the data for the intent along with an explicit MIME data type.",
                "Intent setDataAndTypeAndNormalize(Uri data, String type)": "(Usually optional) Normalize and set both the data Uri and an explicit MIME data type.",
                "void setExtrasClassLoader(ClassLoader loader)": "Sets the ClassLoader that will be used when unmarshalling any Parcelable values from the extras of this Intent.",
                "Intent setFlags(int flags)": "Set special flags controlling how this intent is handled.",
                "Intent setIdentifier(String identifier)": "Set an identifier for this Intent.",
                "Intent setPackage(String packageName)": "(Usually optional) Set an explicit application package name that limits the components this Intent will resolve to.",
                "void setSelector(Intent selector)": "Set a selector for this Intent.",
                "void setSourceBounds(Rect r)": "Set the bounds of the sender of this intent, in screen coordinates.",
                "Intent setType(String type)": "Set an explicit MIME data type.",
                "Intent setTypeAndNormalize(String type)": "Normalize and set an explicit MIME data type.",
                "String toString()": "Returns a string representation of the object.",
                "String toURI()": "This method was deprecated in API level 15. Use toUri(int) instead.",
                "String toUri(int flags)": "Convert this Intent into a String holding a URI representation of it.",
                "void writeToParcel(Parcel out, int flags)": "Flatten this object in to a Parcel."
            },
            "super class": []
        }
    },
    "javax.swing.text.JTextComponent": {
        "javax.swing.text.JTextComponent": {
            "class": "JTextComponent",
            "category": "Class",
            "methods": {
                "void addCaretListener(CaretListener listener)": "Adds a caret listener for notification of any changes to the caret.",
                "void addInputMethodListener(InputMethodListener l)": "Adds the specified input method listener to receive input method events from this component.",
                "Keymap addKeymap(String nm, Keymap parent)": "Adds a new keymap into the keymap hierarchy.",
                "void copy()": "Transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model.",
                "void cut()": "Transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model.",
                "void fireCaretUpdate(CaretEvent e)": "Notifies all listeners that have registered interest for notification on this event type.",
                "AccessibleContext getAccessibleContext()": "Gets the AccessibleContext associated with this Component.",
                "Action[] getActions()": "Fetches the command list for the editor.",
                "Caret getCaret()": "Fetches the caret that allows text-oriented navigation over the view.",
                "Color getCaretColor()": "Fetches the current color used to render the caret.",
                "CaretListener[] getCaretListeners()": "Returns an array of all the caret listeners registered on this text component.",
                "int getCaretPosition()": "Returns the position of the text insertion caret for the text component.",
                "Color getDisabledTextColor()": "Fetches the current color used to render the disabled text.",
                "Document getDocument()": "Fetches the model associated with the editor.",
                "boolean getDragEnabled()": "Returns whether or not automatic drag handling is enabled.",
                "JTextComponent.DropLocation getDropLocation()": "Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown.",
                "DropMode getDropMode()": "Returns the drop mode for this component.",
                "char getFocusAccelerator()": "Returns the key accelerator that will cause the receiving text component to get the focus.",
                "Highlighter getHighlighter()": "Fetches the object responsible for making highlights.",
                "InputMethodRequests getInputMethodRequests()": "Gets the input method request handler which supports requests from input methods for this component.",
                "Keymap getKeymap()": "Fetches the keymap currently active in this text component.",
                "Keymap getKeymap(String nm)": "Fetches a named keymap previously added to the document.",
                "Insets getMargin()": "Returns the margin between the text component's border and its text.",
                "NavigationFilter getNavigationFilter()": "Returns the NavigationFilter.",
                "Dimension getPreferredScrollableViewportSize()": "Returns the preferred size of the viewport for a view component.",
                "Printable getPrintable(MessageFormat headerFormat, MessageFormat footerFormat)": "Returns a Printable to use for printing the content of this JTextComponent.",
                "int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)": "Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation.",
                "boolean getScrollableTracksViewportHeight()": "Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.",
                "boolean getScrollableTracksViewportWidth()": "Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.",
                "int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)": "Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation.",
                "String getSelectedText()": "Returns the selected text contained in this TextComponent.",
                "Color getSelectedTextColor()": "Fetches the current color used to render the selected text.",
                "Color getSelectionColor()": "Fetches the current color used to render the selection.",
                "int getSelectionEnd()": "Returns the selected text's end position.",
                "int getSelectionStart()": "Returns the selected text's start position.",
                "String getText()": "Returns the text contained in this TextComponent.",
                "String getText(int offs, int len)": "Fetches a portion of the text represented by the component.",
                "String getToolTipText(MouseEvent event)": "Returns the string to be used as the tooltip for event.",
                "TextUI getUI()": "Fetches the user-interface factory for this text-oriented editor.",
                "boolean isEditable()": "Returns the boolean indicating whether this TextComponent is editable or not.",
                "void loadKeymap(Keymap map, JTextComponent.KeyBinding[] bindings, Action[] actions)": "Loads a keymap with a bunch of bindings.",
                "Rectangle modelToView(int pos)": "Converts the given location in the model to a place in the view coordinate system.",
                "void moveCaretPosition(int pos)": "Moves the caret to a new position, leaving behind a mark defined by the last time setCaretPosition was called.",
                "String paramString()": "Returns a string representing the state of this component.",
                "void paste()": "Transfers the contents of the system clipboard into the associated text model.",
                "boolean print()": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with no header or footer text.",
                "boolean print(MessageFormat headerFormat, MessageFormat footerFormat)": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with the specified header and footer text.",
                "boolean print(MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintService service, PrintRequestAttributeSet attributes, boolean interactive)": "Prints the content of this JTextComponent.",
                "void processInputMethodEvent(InputMethodEvent e)": "Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.",
                "void read(Reader in, Object desc)": "Initializes from a stream.",
                "void removeCaretListener(CaretListener listener)": "Removes a caret listener.",
                "Keymap removeKeymap(String nm)": "Removes a named keymap previously added to the document.",
                "void removeNotify()": "Makes this Component undisplayable by destroying it native screen resource.",
                "void replaceSelection(String content)": "Replaces the currently selected content with new content represented by the given string.",
                "void restoreComposedText()": "Restores composed text previously saved by saveComposedText.",
                "boolean saveComposedText(int pos)": "Saves composed text around the specified position.",
                "void select(int selectionStart, int selectionEnd)": "Selects the text between the specified start and end positions.",
                "void selectAll()": "Selects all the text in the TextComponent.",
                "void setCaret(Caret c)": "Sets the caret to be used.",
                "void setCaretColor(Color c)": "Sets the current color used to render the caret.",
                "void setCaretPosition(int position)": "Sets the position of the text insertion caret for the TextComponent.",
                "void setComponentOrientation(ComponentOrientation o)": "Sets the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "void setDisabledTextColor(Color c)": "Sets the current color used to render the disabled text.",
                "void setDocument(Document doc)": "Associates the editor with a text document.",
                "void setDragEnabled(boolean b)": "Turns on or off automatic drag handling.",
                "void setDropMode(DropMode dropMode)": "Sets the drop mode for this component.",
                "void setEditable(boolean b)": "Sets the specified boolean to indicate whether or not this TextComponent should be editable.",
                "void setFocusAccelerator(char aKey)": "Sets the key accelerator that will cause the receiving text component to get the focus.",
                "void setHighlighter(Highlighter h)": "Sets the highlighter to be used.",
                "void setKeymap(Keymap map)": "Sets the keymap to use for binding events to actions.",
                "void setMargin(Insets m)": "Sets margin space between the text component's border and its text.",
                "void setNavigationFilter(NavigationFilter filter)": "Sets the NavigationFilter.",
                "void setSelectedTextColor(Color c)": "Sets the current color used to render the selected text.",
                "void setSelectionColor(Color c)": "Sets the current color used to render the selection.",
                "void setSelectionEnd(int selectionEnd)": "Sets the selection end to the specified position.",
                "void setSelectionStart(int selectionStart)": "Sets the selection start to the specified position.",
                "void setText(String t)": "Sets the text of this TextComponent to the specified text.",
                "void setUI(TextUI ui)": "Sets the user-interface factory for this text-oriented editor.",
                "void updateUI()": "Resets the UI property to a value from the current look and feel.",
                "int viewToModel(Point pt)": "Converts the given place in the view coordinate system to the nearest representative location in the model.",
                "void write(Writer out)": "Stores the contents of the model into the given stream.",
                "void addAncestorListener(AncestorListener listener)": "Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible.",
                "void addNotify()": "Makes this Component displayable by connecting it to a native screen resource.",
                "void addVetoableChangeListener(VetoableChangeListener listener)": "Adds a VetoableChangeListener to the listener list.",
                "void computeVisibleRect(Rectangle visibleRect)": "Returns the Component's \"visible rect rectangle\" - the intersection of the visible rectangles for this component and all of its ancestors.",
                "boolean contains(int x, int y)": "Checks whether this component \"contains\" the specified point, where x and y are defined to be relative to the coordinate system of this component.",
                "JToolTip createToolTip()": "Returns the instance of JToolTip that should be used to display the tooltip.",
                "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
                "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
                "void fireVetoableChange(String propertyName, Object oldValue, Object newValue)": "Supports reporting constrained property changes.",
                "ActionListener getActionForKeyStroke(KeyStroke aKeyStroke)": "Returns the object that will perform the action registered for a given keystroke.",
                "ActionMap getActionMap()": "Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding.",
                "float getAlignmentX()": "Returns the alignment along the x axis.",
                "float getAlignmentY()": "Returns the alignment along the y axis.",
                "AncestorListener[] getAncestorListeners()": "Returns an array of all the ancestor listeners registered on this component.",
                "boolean getAutoscrolls()": "Gets the autoscrolls property.",
                "int getBaseline(int width, int height)": "Returns the baseline.",
                "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
                "Border getBorder()": "Returns the border of this component or null if no border is currently set.",
                "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and return rv.",
                "Object getClientProperty(Object key)": "Returns the value of the property with the specified key.",
                "Graphics getComponentGraphics(Graphics g)": "Returns the graphics object used to paint this component.",
                "JPopupMenu getComponentPopupMenu()": "Returns JPopupMenu that assigned for this component.",
                "int getConditionForKeyStroke(KeyStroke aKeyStroke)": "Returns the condition that determines whether a registered action occurs in response to the specified keystroke.",
                "int getDebugGraphicsOptions()": "Returns the state of graphics debugging.",
                "Locale getDefaultLocale()": "Returns the default locale used to initialize each JComponent's locale property upon creation.",
                "FontMetrics getFontMetrics(Font font)": "Gets the font metrics for the specified font.",
                "Graphics getGraphics()": "Creates a graphics context for this component.",
                "int getHeight()": "Returns the current height of this component.",
                "boolean getInheritsPopupMenu()": "Returns true if the JPopupMenu should be inherited from the parent.",
                "InputMap getInputMap()": "Returns the InputMap that is used when the component has focus.",
                "InputMap getInputMap(int condition)": "Returns the InputMap that is used during condition.",
                "InputVerifier getInputVerifier()": "Returns the input verifier for this component.",
                "Insets getInsets()": "Determines the insets of this container, which indicate the size of the container's border.",
                "Insets getInsets(Insets insets)": "Returns an Insets object containing this component's inset values.",
                "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this Component.",
                "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and return rv.",
                "Dimension getMaximumSize()": "Gets the maximum size of this component.",
                "Dimension getMinimumSize()": "Gets the minimum size of this component.",
                "Point getPopupLocation(MouseEvent event)": "Returns the preferred location to display the popup menu in this component's coordinate system.",
                "Dimension getPreferredSize()": "Gets the preferred size of this component.",
                "KeyStroke[] getRegisteredKeyStrokes()": "Returns the KeyStrokes that will initiate registered actions.",
                "JRootPane getRootPane()": "Returns the JRootPane ancestor for this component.",
                "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and return rv.",
                "Point getToolTipLocation(MouseEvent event)": "Returns the tooltip location in this component's coordinate system.",
                "String getToolTipText()": "Returns the tooltip string that has been set with setToolTipText.",
                "Container getTopLevelAncestor()": "Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.",
                "TransferHandler getTransferHandler()": "Gets the transferHandler property.",
                "String getUIClassID()": "Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component.",
                "boolean getVerifyInputWhenFocusTarget()": "Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.",
                "VetoableChangeListener[] getVetoableChangeListeners()": "Returns an array of all the vetoable change listeners registered on this component.",
                "Rectangle getVisibleRect()": "Returns the Component's \"visible rectangle\" - the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.",
                "int getWidth()": "Returns the current width of this component.",
                "int getX()": "Returns the current x coordinate of the components origin.",
                "int getY()": "Returns the current y coordinate of the components origin.",
                "void grabFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean isDoubleBuffered()": "Returns true if this component is painted to an offscreen image (\"buffer\") that's copied to the screen later.",
                "boolean isLightweightComponent(Component c)": "Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.",
                "boolean isOpaque()": "Returns true if this component is completely opaque, returns false by default.",
                "boolean isOptimizedDrawingEnabled()": "Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap.",
                "boolean isPaintingForPrint()": "Returns true if the current painting operation on this component is part of a print operation.",
                "boolean isPaintingOrigin()": "Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors.",
                "boolean isPaintingTile()": "Returns true if the component is currently painting a tile.",
                "boolean isRequestFocusEnabled()": "Returns true if this JComponent should get focus; otherwise returns false.",
                "boolean isValidateRoot()": "Indicates if this container is a validate root.",
                "void paint(Graphics g)": "Paints this component.",
                "void paintBorder(Graphics g)": "Paints the component's border.",
                "void paintChildren(Graphics g)": "Paints this component's children.",
                "void paintComponent(Graphics g)": "Calls the UI delegate's paint method, if the UI delegate is non-null.",
                "void paintImmediately(int x, int y, int w, int h)": "Paints the specified region in this component and all of its descendants that overlap the region, immediately.",
                "void paintImmediately(Rectangle r)": "Paints the specified region now.",
                "void print(Graphics g)": "Prints this component.",
                "void printAll(Graphics g)": "Prints this component and all of its subcomponents.",
                "void printBorder(Graphics g)": "Prints the component's border.",
                "void printChildren(Graphics g)": "Prints this component's children.",
                "void printComponent(Graphics g)": "This is invoked during a printing operation.",
                "void processComponentKeyEvent(KeyEvent e)": "Processes any key events that the component itself recognizes.",
                "boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)": "Invoked to process the key bindings for ks as the result of the KeyEvent e.",
                "void processKeyEvent(KeyEvent e)": "Processes key events occurring on this component by dispatching them to any registered KeyListener objects.",
                "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects.",
                "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.",
                "void putClientProperty(Object key, Object value)": "Adds an arbitrary key/value \"client property\" to this component.",
                "void registerKeyboardAction(ActionListener anAction, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void registerKeyboardAction(ActionListener anAction, String aCommand, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void removeAncestorListener(AncestorListener listener)": "Unregisters listener so that it will no longer receive AncestorEvents.",
                "void removeVetoableChangeListener(VetoableChangeListener listener)": "Removes a VetoableChangeListener from the listener list.",
                "void repaint(long tm, int x, int y, int width, int height)": "Repaints the specified rectangle of this component within tm milliseconds.",
                "void repaint(Rectangle r)": "Adds the specified region to the dirty region list if the component is showing.",
                "void requestFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocus(boolean temporary)": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocusInWindow()": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "void resetKeyboardActions()": "Unregisters all the bindings in the first tier InputMaps and ActionMap.",
                "void revalidate()": "Revalidates the component hierarchy up to the nearest validate root.",
                "void scrollRectToVisible(Rectangle aRect)": "Forwards the scrollRectToVisible() message to the JComponent's parent.",
                "void setActionMap(ActionMap am)": "Sets the ActionMap to am.",
                "void setAlignmentX(float alignmentX)": "Sets the the vertical alignment.",
                "void setAlignmentY(float alignmentY)": "Sets the the horizontal alignment.",
                "void setAutoscrolls(boolean autoscrolls)": "Sets the autoscrolls property.",
                "void setBackground(Color bg)": "Sets the background color of this component.",
                "void setBorder(Border border)": "Sets the border of this component.",
                "void setComponentPopupMenu(JPopupMenu popup)": "Sets the JPopupMenu for this JComponent.",
                "void setDebugGraphicsOptions(int debugOptions)": "Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.",
                "void setDefaultLocale(Locale l)": "Sets the default locale used to initialize each JComponent's locale property upon creation.",
                "void setDoubleBuffered(boolean aFlag)": "Sets whether this component should use a buffer to paint.",
                "void setEnabled(boolean enabled)": "Sets whether or not this component is enabled.",
                "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
                "void setFont(Font font)": "Sets the font for this component.",
                "void setForeground(Color fg)": "Sets the foreground color of this component.",
                "void setInheritsPopupMenu(boolean value)": "Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it.",
                "void setInputMap(int condition, InputMap map)": "Sets the InputMap to use under the condition condition to map.",
                "void setInputVerifier(InputVerifier inputVerifier)": "Sets the input verifier for this component.",
                "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
                "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
                "void setOpaque(boolean isOpaque)": "If true the component paints every pixel within its bounds.",
                "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component to a constant value.",
                "void setRequestFocusEnabled(boolean requestFocusEnabled)": "Provides a hint as to whether or not this JComponent should get focus.",
                "void setToolTipText(String text)": "Registers the text to display in a tool tip.",
                "void setTransferHandler(TransferHandler newHandler)": "Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop.",
                "void setUI(ComponentUI newUI)": "Sets the look and feel delegate for this component.",
                "void setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget)": "Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.",
                "void setVisible(boolean aFlag)": "Makes the component visible or invisible.",
                "void unregisterKeyboardAction(KeyStroke aKeyStroke)": "This method is now obsolete.",
                "void update(Graphics g)": "Updates this component.",
                "Component add(Component comp)": "Appends the specified component to the end of this container.",
                "Component add(Component comp, int index)": "Adds the specified component to this container at the given position.",
                "void add(Component comp, Object constraints)": "Adds the specified component to the end of this container.",
                "void add(Component comp, Object constraints, int index)": "Adds the specified component to this container with the specified constraints at the specified index.",
                "Component add(String name, Component comp)": "Adds the specified component to this container.",
                "void addContainerListener(ContainerListener l)": "Adds the specified container listener to receive container events from this container.",
                "void addImpl(Component comp, Object constraints, int index)": "Adds the specified component to this container at the specified index.",
                "void addPropertyChangeListener(PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list.",
                "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list for a specific property.",
                "void applyComponentOrientation(ComponentOrientation o)": "Sets the ComponentOrientation property of this container and all components contained within it.",
                "boolean areFocusTraversalKeysSet(int id)": "Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component.",
                "void doLayout()": "Prompts the layout manager to lay out this component.",
                "Component findComponentAt(int x, int y)": "Locates the visible child component that contains the specified position.",
                "Component findComponentAt(Point p)": "Locates the visible child component that contains the specified point.",
                "Component getComponent(int n)": "Gets the nth component in this container.",
                "Component getComponentAt(int x, int y)": "Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component.",
                "Component getComponentAt(Point p)": "Returns the component or subcomponent that contains the specified point.",
                "int getComponentCount()": "Gets the number of components in this panel.",
                "Component[] getComponents()": "Gets all the components in this container.",
                "int getComponentZOrder(Component comp)": "Returns the z-order index of the component inside the container.",
                "ContainerListener[] getContainerListeners()": "Returns an array of all the container listeners registered on this container.",
                "Set getFocusTraversalKeys(int id)": "Returns the Set of focus traversal keys for a given traversal operation for this Component.",
                "FocusTraversalPolicy getFocusTraversalPolicy()": "Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root.",
                "LayoutManager getLayout()": "Gets the layout manager for this container.",
                "Point getMousePosition(boolean allowChildren)": "Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null.",
                "void invalidate()": "Invalidates this component and its ancestors.",
                "boolean isAncestorOf(Component c)": "Checks if the component is contained in the component hierarchy of this container.",
                "boolean isFocusCycleRoot()": "Returns whether this Container is the root of a focus traversal cycle.",
                "boolean isFocusCycleRoot(Container container)": "Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle.",
                "boolean isFocusTraversalPolicyProvider()": "Returns whether this container provides focus traversal policy.",
                "boolean isFocusTraversalPolicySet()": "Returns whether the focus traversal policy has been explicitly set for this Container.",
                "void list(PrintStream out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print stream.",
                "void list(PrintWriter out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print writer.",
                "void paintComponents(Graphics g)": "Paints each of the components in this container.",
                "void printComponents(Graphics g)": "Prints each of the components in this container.",
                "void processContainerEvent(ContainerEvent e)": "Processes container events occurring on this container by dispatching them to any registered ContainerListener objects.",
                "void processEvent(AWTEvent e)": "Processes events occurring on this component.",
                "void remove(Component comp)": "Removes the specified component from this container.",
                "void remove(int index)": "Removes the component, specified by index, from this container.",
                "void removeAll()": "Removes all the components from this container.",
                "void removeContainerListener(ContainerListener l)": "Removes the specified container listener so it no longer receives container events from this container.",
                "void setComponentZOrder(Component comp, int index)": "Moves the specified component to the specified z-order index in the container.",
                "void setFocusCycleRoot(boolean focusCycleRoot)": "Sets whether this Container is the root of a focus traversal cycle.",
                "void setFocusTraversalPolicy(FocusTraversalPolicy policy)": "Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root.",
                "void setFocusTraversalPolicyProvider(boolean provider)": "Sets whether this container will be used to provide focus traversal policy.",
                "void setFont(Font f)": "Sets the font of this component.",
                "void setLayout(LayoutManager mgr)": "Sets the layout manager for this container.",
                "void transferFocusDownCycle()": "Transfers the focus down one focus traversal cycle.",
                "void validate()": "Validates this component.",
                "void validateTree()": "Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid).",
                "void add(PopupMenu popup)": "Adds the specified popup menu to the component.",
                "void addComponentListener(ComponentListener l)": "Adds the specified component listener to receive component events from this component.",
                "void addFocusListener(FocusListener l)": "Adds the specified focus listener to receive focus events from this component when this component gains input focus.",
                "void addHierarchyBoundsListener(HierarchyBoundsListener l)": "Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.",
                "void addHierarchyListener(HierarchyListener l)": "Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.",
                "void addKeyListener(KeyListener l)": "Adds the specified key listener to receive key events from this component.",
                "void addMouseListener(MouseListener l)": "Adds the specified mouse listener to receive mouse events from this component.",
                "void addMouseMotionListener(MouseMotionListener l)": "Adds the specified mouse motion listener to receive mouse motion events from this component.",
                "void addMouseWheelListener(MouseWheelListener l)": "Adds the specified mouse wheel listener to receive mouse wheel events from this component.",
                "void applyComponentOrientation(ComponentOrientation orientation)": "Sets the ComponentOrientation property of this component and all components contained within it.",
                "int checkImage(Image image, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "int checkImage(Image image, int width, int height, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)": "Potentially coalesce an event being posted with an existing event.",
                "boolean contains(Point p)": "Checks whether this component \"contains\" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.",
                "Image createImage(ImageProducer producer)": "Creates an image from the specified image producer.",
                "Image createImage(int width, int height)": "Creates an off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height)": "Creates a volatile off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height, ImageCapabilities caps)": "Creates a volatile off-screen drawable image, with the given capabilities.",
                "void disableEvents(long eventsToDisable)": "Disables the events defined by the specified event mask parameter from being delivered to this component.",
                "void dispatchEvent(AWTEvent e)": "Dispatches an event to this component or one of its sub components.",
                "void enableEvents(long eventsToEnable)": "Enables the events defined by the specified event mask parameter to be delivered to this component.",
                "void enableInputMethods(boolean enable)": "Enables or disables input method support for this component.",
                "void firePropertyChange(String propertyName, byte oldValue, byte newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, double oldValue, double newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, float oldValue, float newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, long oldValue, long newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, Object oldValue, Object newValue)": "Support for reporting bound property changes for Object properties.",
                "void firePropertyChange(String propertyName, short oldValue, short newValue)": "Reports a bound property change.",
                "Color getBackground()": "Gets the background color of this component.",
                "Rectangle getBounds()": "Gets the bounds of this component in the form of a Rectangle object.",
                "ColorModel getColorModel()": "Gets the instance of ColorModel used to display the component on the output device.",
                "ComponentListener[] getComponentListeners()": "Returns an array of all the component listeners registered on this component.",
                "ComponentOrientation getComponentOrientation()": "Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "Cursor getCursor()": "Gets the cursor set in the component.",
                "DropTarget getDropTarget()": "Gets the DropTarget associated with this Component.",
                "Container getFocusCycleRootAncestor()": "Returns the Container which is the focus cycle root of this Component's focus traversal cycle.",
                "FocusListener[] getFocusListeners()": "Returns an array of all the focus listeners registered on this component.",
                "boolean getFocusTraversalKeysEnabled()": "Returns whether focus traversal keys are enabled for this Component.",
                "Font getFont()": "Gets the font of this component.",
                "Color getForeground()": "Gets the foreground color of this component.",
                "GraphicsConfiguration getGraphicsConfiguration()": "Gets the GraphicsConfiguration associated with this Component.",
                "HierarchyBoundsListener[] getHierarchyBoundsListeners()": "Returns an array of all the hierarchy bounds listeners registered on this component.",
                "HierarchyListener[] getHierarchyListeners()": "Returns an array of all the hierarchy listeners registered on this component.",
                "boolean getIgnoreRepaint()": "",
                "InputContext getInputContext()": "Gets the input context used by this component for handling the communication with input methods when text is entered in this component.",
                "InputMethodListener[] getInputMethodListeners()": "Returns an array of all the input method listeners registered on this component.",
                "KeyListener[] getKeyListeners()": "Returns an array of all the key listeners registered on this component.",
                "Locale getLocale()": "Gets the locale of this component.",
                "Point getLocation()": "Gets the location of this component in the form of a point specifying the component's top-left corner.",
                "Point getLocationOnScreen()": "Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.",
                "MouseListener[] getMouseListeners()": "Returns an array of all the mouse listeners registered on this component.",
                "MouseMotionListener[] getMouseMotionListeners()": "Returns an array of all the mouse motion listeners registered on this component.",
                "Point getMousePosition()": "Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null.",
                "MouseWheelListener[] getMouseWheelListeners()": "Returns an array of all the mouse wheel listeners registered on this component.",
                "String getName()": "Gets the name of the component.",
                "Container getParent()": "Gets the parent of this component.",
                "PropertyChangeListener[] getPropertyChangeListeners()": "Returns an array of all the property change listeners registered on this component.",
                "PropertyChangeListener[] getPropertyChangeListeners(String propertyName)": "Returns an array of all the listeners which have been associated with the named property.",
                "Dimension getSize()": "Returns the size of this component in the form of a Dimension object.",
                "Toolkit getToolkit()": "Gets the toolkit of this component.",
                "Object getTreeLock()": "Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.",
                "boolean hasFocus()": "Returns true if this Component is the focus owner.",
                "boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)": "Repaints the component when the image has changed.",
                "boolean isBackgroundSet()": "Returns whether the background color has been explicitly set for this Component.",
                "boolean isCursorSet()": "Returns whether the cursor has been explicitly set for this Component.",
                "boolean isDisplayable()": "Determines whether this component is displayable.",
                "boolean isEnabled()": "Determines whether this component is enabled.",
                "boolean isFocusable()": "Returns whether this Component can be focused.",
                "boolean isFocusOwner()": "Returns true if this Component is the focus owner.",
                "boolean isFontSet()": "Returns whether the font has been explicitly set for this Component.",
                "boolean isForegroundSet()": "Returns whether the foreground color has been explicitly set for this Component.",
                "boolean isLightweight()": "A lightweight component doesn't have a native toolkit peer.",
                "boolean isMaximumSizeSet()": "Returns true if the maximum size has been set to a non-null value otherwise returns false.",
                "boolean isMinimumSizeSet()": "Returns whether or not setMinimumSize has been invoked with a non-null value.",
                "boolean isPreferredSizeSet()": "Returns true if the preferred size has been set to a non-null value otherwise returns false.",
                "boolean isShowing()": "Determines whether this component is showing on screen.",
                "boolean isValid()": "Determines whether this component is valid.",
                "boolean isVisible()": "Determines whether this component should be visible when its parent is visible.",
                "void list()": "Prints a listing of this component to the standard system output stream System.out.",
                "void list(PrintStream out)": "Prints a listing of this component to the specified output stream.",
                "void list(PrintWriter out)": "Prints a listing to the specified print writer.",
                "void paintAll(Graphics g)": "Paints this component and all of its subcomponents.",
                "boolean prepareImage(Image image, ImageObserver observer)": "Prepares an image for rendering on this component.",
                "boolean prepareImage(Image image, int width, int height, ImageObserver observer)": "Prepares an image for rendering on this component at the specified width and height.",
                "void processComponentEvent(ComponentEvent e)": "Processes component events occurring on this component by dispatching them to any registered ComponentListener objects.",
                "void processFocusEvent(FocusEvent e)": "Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.",
                "void processHierarchyBoundsEvent(HierarchyEvent e)": "Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects.",
                "void processHierarchyEvent(HierarchyEvent e)": "Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects.",
                "void processMouseWheelEvent(MouseWheelEvent e)": "Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects.",
                "void remove(MenuComponent popup)": "Removes the specified popup menu from the component.",
                "void removeComponentListener(ComponentListener l)": "Removes the specified component listener so that it no longer receives component events from this component.",
                "void removeFocusListener(FocusListener l)": "Removes the specified focus listener so that it no longer receives focus events from this component.",
                "void removeHierarchyBoundsListener(HierarchyBoundsListener l)": "Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.",
                "void removeHierarchyListener(HierarchyListener l)": "Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.",
                "void removeInputMethodListener(InputMethodListener l)": "Removes the specified input method listener so that it no longer receives input method events from this component.",
                "void removeKeyListener(KeyListener l)": "Removes the specified key listener so that it no longer receives key events from this component.",
                "void removeMouseListener(MouseListener l)": "Removes the specified mouse listener so that it no longer receives mouse events from this component.",
                "void removeMouseMotionListener(MouseMotionListener l)": "Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.",
                "void removeMouseWheelListener(MouseWheelListener l)": "Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.",
                "void removePropertyChangeListener(PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list.",
                "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list for a specific property.",
                "void repaint()": "Repaints this component.",
                "void repaint(int x, int y, int width, int height)": "Repaints the specified rectangle of this component.",
                "void repaint(long tm)": "Repaints the component.",
                "void setBackground(Color c)": "Sets the background color of this component.",
                "void setBounds(int x, int y, int width, int height)": "Moves and resizes this component.",
                "void setBounds(Rectangle r)": "Moves and resizes this component to conform to the new bounding rectangle r.",
                "void setCursor(Cursor cursor)": "Sets the cursor image to the specified cursor.",
                "void setDropTarget(DropTarget dt)": "Associate a DropTarget with this component.",
                "void setEnabled(boolean b)": "Enables or disables this component, depending on the value of the parameter b.",
                "void setFocusable(boolean focusable)": "Sets the focusable state of this Component to the specified value.",
                "void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)": "Sets whether focus traversal keys are enabled for this Component.",
                "void setForeground(Color c)": "Sets the foreground color of this component.",
                "void setIgnoreRepaint(boolean ignoreRepaint)": "Sets whether or not paint messages received from the operating system should be ignored.",
                "void setLocale(Locale l)": "Sets the locale of this component.",
                "void setLocation(int x, int y)": "Moves this component to a new location.",
                "void setLocation(Point p)": "Moves this component to a new location.",
                "void setName(String name)": "Sets the name of the component to the specified string.",
                "void setSize(Dimension d)": "Resizes this component so that it has width d.width and height d.height.",
                "void setSize(int width, int height)": "Resizes this component so that it has width width and height height.",
                "void setVisible(boolean b)": "Shows or hides this component depending on the value of parameter b.",
                "String toString()": "Returns a string representation of this component and its values.",
                "void transferFocus()": "Transfers the focus to the next component, as though this Component were the focus owner.",
                "void transferFocusBackward()": "Transfers the focus to the previous component, as though this Component were the focus owner.",
                "void transferFocusUpCycle()": "Transfers the focus up one focus traversal cycle."
            },
            "super class": [
                "javax.swing.JComponent",
                "java.awt.Container",
                "java.awt.Component"
            ]
        }
    },
    "android.util.SparseBooleanArray": {
        "android.util.SparseBooleanArray": {
            "class": "SparseBooleanArray",
            "category": "class",
            "methods": {
                "void append(int key, boolean value)": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.",
                "void clear()": "Removes all key-value mappings from this SparseBooleanArray.",
                "SparseBooleanArray clone()": "Creates and returns a copy of this object.",
                "void delete(int key)": "Removes the mapping from the specified key, if there was any.",
                "boolean equals(Object that)": "Indicates whether some other object is \"equal to\" this one.",
                "boolean get(int key)": "Gets the boolean mapped from the specified key, or false if no such mapping has been made.",
                "boolean get(int key, boolean valueIfKeyNotFound)": "Gets the boolean mapped from the specified key, or the specified value if no such mapping has been made.",
                "int hashCode()": "Returns a hash code value for the object.",
                "int indexOfKey(int key)": "Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped.",
                "int indexOfValue(boolean value)": "Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value.",
                "int keyAt(int index)": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseBooleanArray stores.",
                "void put(int key, boolean value)": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.",
                "void removeAt(int index)": "Removes the mapping at the specified index.",
                "void setValueAt(int index, boolean value)": "Directly set the value at a particular index.",
                "int size()": "Returns the number of key-value mappings that this SparseBooleanArray currently stores.",
                "String toString()": "Returns a string representation of the object. This implementation composes a string by iterating over its mappings.",
                "boolean valueAt(int index)": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseBooleanArray stores."
            },
            "super class": []
        }
    },
    "android.widget.Toast": {
        "android.widget.Toast": {
            "class": "Toast",
            "category": "class",
            "methods": {
                "void addCallback(Toast.Callback callback)": "Adds a callback to be notified when the toast is shown or hidden.",
                "void cancel()": "Close the view if it's showing, or don't show it if it isn't showing yet.",
                "int getDuration()": "Return the duration.",
                "int getGravity()": "Get the location at which the notification should appear on the screen.",
                "float getHorizontalMargin()": "Return the horizontal margin.",
                "float getVerticalMargin()": "Return the vertical margin.",
                "View getView()": "",
                "int getXOffset()": "Return the X offset in pixels to apply to the gravity's location.",
                "int getYOffset()": "Return the Y offset in pixels to apply to the gravity's location.",
                "Toast makeText(Context context, int resId, int duration)": "Make a standard toast that just contains text from a resource.",
                "Toast makeText(Context context, CharSequence text, int duration)": "Make a standard toast that just contains text.",
                "void removeCallback(Toast.Callback callback)": "Removes a callback previously added with addCallback(android.widget.Toast.Callback).",
                "void setDuration(int duration)": "Set how long to show the view for.",
                "void setGravity(int gravity, int xOffset, int yOffset)": "Set the location at which the notification should appear on the screen.",
                "void setMargin(float horizontalMargin, float verticalMargin)": "Set the margins of the view.",
                "void setText(int resId)": "Update the text in a Toast that was previously created using one of the makeText() methods.",
                "void setText(CharSequence s)": "Update the text in a Toast that was previously created using one of the makeText() methods.",
                "void setView(View view)": "This method was deprecated in API level 30. Custom toast views are deprecated. Apps can create a standard text toast with the makeText(android.content.Context, java.lang.CharSequence, int) method, or use a Snackbar when in the foreground. Starting from Android Build.VERSION_CODES#R, apps targeting API level Build.VERSION_CODES#R or higher that are in the background will not have custom toast views displayed.",
                "void show()": "Show the view for the specified duration."
            },
            "super class": []
        }
    },
    "Jama.Matrix": {
        "Jama.Matrix": {
            "class": "Matrix",
            "category": "Class",
            "methods": {
                "Matrix arrayLeftDivide(Matrix B)": "Element-by-element left division, C = A./B.",
                "Matrix arrayLeftDivideEquals(Matrix B)": "Element-by-element left division in place, A = A./B.",
                "Matrix arrayRightDivide(Matrix B)": "Element-by-element right division, C = A./B",
                "Matrix arrayRightDivideEquals(Matrix B)": "Element-by-element right division in place, A = A./B",
                "Matrix arrayTimes(Matrix B)": "Element-by-element multiplication, C = A.*B",
                "Matrix arrayTimesEquals(Matrix B)": "Element-by-element multiplication in place, A = A.*B",
                "CholeskyDecomposition chol()": "Cholesky Decomposition",
                "Object clone()": "Clone the Matrix object.",
                "double cond()": "Matrix condition (2 norm)",
                "Matrix constructWithCopy(double[][] A)": "Construct a matrix from a copy of a 2-D array.",
                "Matrix copy()": "Make a deep copy of a matrix",
                "double det()": "Matrix determinant",
                "EigenvalueDecomposition eig()": "Eigenvalue Decomposition",
                "double get(int i, int j)": "Get a single element.",
                "double[][] getArray()": "Access the internal two-dimensional array.",
                "double[][] getArrayCopy()": "Copy the internal two-dimensional array.",
                "int getColumnDimension()": "Get column dimension.",
                "double[] getColumnPackedCopy()": "Make a one-dimensional column packed copy of the internal array.",
                "Matrix getMatrix(int[] r, int[] c)": "Get a submatrix.",
                "Matrix getMatrix(int[] r, int j0, int j1)": "Get a submatrix.",
                "Matrix getMatrix(int i0, int i1, int[] c)": "Get a submatrix.",
                "Matrix getMatrix(int i0, int i1, int j0, int j1)": "Get a submatrix.",
                "int getRowDimension()": "Get row dimension.",
                "double[] getRowPackedCopy()": "Make a one-dimensional row packed copy of the internal array.",
                "Matrix identity(int m, int n)": "Generate identity matrix",
                "Matrix inverse()": "Matrix inverse or pseudoinverse",
                "LUDecomposition lu()": "LU Decomposition",
                "Matrix minus(Matrix B)": "C = A - B",
                "Matrix minusEquals(Matrix B)": "A = A - B",
                "double norm1()": "One norm",
                "double norm2()": "Two norm",
                "double normF()": "Frobenius norm",
                "double normInf()": "Infinity norm",
                "Matrix plus(Matrix B)": "C = A + B",
                "Matrix plusEquals(Matrix B)": "A = A + B",
                "void print(int w, int d)": "Print the matrix to stdout.",
                "void print(NumberFormat format, int width)": "Print the matrix to stdout.",
                "void print(PrintWriter output, int w, int d)": "Print the matrix to the output stream.",
                "void print(PrintWriter output, NumberFormat format, int width)": "Print the matrix to the output stream.",
                "QRDecomposition qr()": "QR Decomposition",
                "Matrix random(int m, int n)": "Generate matrix with random elements",
                "int rank()": "Matrix rank",
                "Matrix read(BufferedReader input)": "Read a matrix from a stream.",
                "void set(int i, int j, double s)": "Set a single element.",
                "void setMatrix(int[] r, int[] c, Matrix X)": "Set a submatrix.",
                "void setMatrix(int[] r, int j0, int j1, Matrix X)": "Set a submatrix.",
                "void setMatrix(int i0, int i1, int[] c, Matrix X)": "Set a submatrix.",
                "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)": "Set a submatrix.",
                "Matrix solve(Matrix B)": "Solve A*X = B",
                "Matrix solveTranspose(Matrix B)": "Solve X*A = B, which is also A'*X' = B'",
                "SingularValueDecomposition svd()": "Singular Value Decomposition",
                "Matrix times(double s)": "Multiply a matrix by a scalar, C = s*A",
                "Matrix times(Matrix B)": "Linear algebraic matrix multiplication, A * B",
                "Matrix timesEquals(double s)": "Multiply a matrix by a scalar in place, A = s*A",
                "double trace()": "Matrix trace.",
                "Matrix transpose()": "Matrix transpose.",
                "Matrix uminus()": "Unary minus"
            },
            "super class": []
        }
    },
    "java.util.IdentityHashMap": {
        "java.util.IdentityHashMap": {
            "class": "IdentityHashMap",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "Object clone()": "Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "String toString()": "Returns a string representation of this map.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value."
            },
            "super class": [
                "java.util.AbstractMap",
                "java.util.Map"
            ]
        }
    },
    "org.apache.http.client.methods.HttpGet": {
        "org.apache.http.client.methods.HttpGet": {
            "class": "HttpGet",
            "category": "Class",
            "methods": {
                "String getMethod()": "Returns the HTTP method this request uses, such as GET, PUT, POST, or other.",
                "RequestConfig getConfig()": "Returns actual request configuration.",
                "ProtocolVersion getProtocolVersion()": "",
                "RequestLine getRequestLine()": "",
                "URI getURI()": "Returns the original request URI.",
                "void releaseConnection()": "A convenience method to simplify migration from HttpClient 3.1 API.",
                "void setConfig(RequestConfig config)": "",
                "void setProtocolVersion(ProtocolVersion version)": "",
                "void setURI(URI uri)": "",
                "void started()": "",
                "String toString()": "",
                "void abort()": "Aborts this http request.",
                "Object clone()": "",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.client.methods.HttpRequestBase",
                "org.apache.http.client.methods.AbstractExecutionAwareRequest",
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "javolution.util.FastMap": {
        "javolution.util.FastMap": {
            "class": "FastMap",
            "category": "Class",
            "methods": {
                "FastMap atomic()": "Returns an atomic view over this map.",
                "void clear()": "Removes all this map's entries.",
                "boolean containsKey(Object key)": "Indicates if this map contains the specified key.",
                "boolean containsValue(Object value)": "Indicates if this map contains the specified value.",
                "FastSet entrySet()": "Returns a set view of the mappings contained in this map.",
                "V get(Object key)": "Returns the value for the specified key.",
                "boolean isEmpty()": "Indicates if this map is empty",
                "FastSet keySet()": "Returns a set view of the keys contained in this map.",
                "FastMap parallel()": "Returns a parallel map.",
                "void perform(Consumer action)": "Executes the specified read-only action on this map.",
                "V put(K key, V value)": "Associates the specified value with the specified key.",
                "FastMap putAll(FastMap that)": "Returns this map with the specified map's entries added.",
                "void putAll(Map map)": "Adds the specified map entries to this map.",
                "V putIfAbsent(K key, V value)": "Associates the specified value with the specified key only if the specified key has no current mapping.",
                "V remove(Object key)": "Removes the entry for the specified key.",
                "boolean remove(Object key, Object value)": "Removes the entry for a key only if currently mapped to a given value.",
                "V replace(K key, V value)": "Replaces the entry for a key only if currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for a key only if currently mapped to a given value.",
                "FastMap sequential()": "Returns a sequential view of this collection.",
                "MapService service()": "Returns this map service implementation.",
                "FastMap shared()": "Returns a thread-safe view over this map.",
                "int size()": "Returns the number of entries/keys/values in this map.",
                "Immutable toImmutable()": "Returns an immutable reference over this map.",
                "String toString()": "Returns the string representation of this map entries.",
                "FastMap unmodifiable()": "Returns an unmodifiable view over this map.",
                "void update(Consumer action)": "Executes the specified update action on this map.",
                "FastCollection values()": "Returns a collection view of the values contained in this map."
            },
            "super class": []
        }
    },
    "org.apache.http.client.methods.HttpTrace": {
        "org.apache.http.client.methods.HttpTrace": {
            "class": "HttpTrace",
            "category": "Class",
            "methods": {
                "String getMethod()": "Returns the HTTP method this request uses, such as GET, PUT, POST, or other.",
                "RequestConfig getConfig()": "Returns actual request configuration.",
                "ProtocolVersion getProtocolVersion()": "",
                "RequestLine getRequestLine()": "",
                "URI getURI()": "Returns the original request URI.",
                "void releaseConnection()": "A convenience method to simplify migration from HttpClient 3.1 API.",
                "void setConfig(RequestConfig config)": "",
                "void setProtocolVersion(ProtocolVersion version)": "",
                "void setURI(URI uri)": "",
                "void started()": "",
                "String toString()": "",
                "void abort()": "Aborts this http request.",
                "Object clone()": "",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.client.methods.HttpRequestBase",
                "org.apache.http.client.methods.AbstractExecutionAwareRequest",
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "org.apache.uima.internal.util.CommandLineParser": {
        "org.apache.uima.internal.util.CommandLineParser": {
            "class": "CommandLineParser",
            "category": "Class",
            "methods": {
                "boolean addAlias(String param, String alias)": "Add an alias for an already defined parameter.",
                "boolean addParameter(String paramName)": "Add a new switch.",
                "boolean addParameter(String paramName, boolean hasArg)": "Add a new parameter name.",
                "String getParamArgument(String paramName)": "Get the argument to a parameter, if it exists.",
                "String[] getRestArgs()": "Get the rest of the args, i.e., args that follow the last know parameter.",
                "boolean isInArgsList(String paramName)": "Check if the parameter was used on the command line.",
                "boolean isKnownParameter(String paramName)": "Check if the given parameter name is known to this parser.",
                "void parseCmdLine(String[] args)": "Parse the command line."
            },
            "super class": []
        }
    },
    "android.util.SparseArray": {
        "android.util.SparseArray": {
            "class": "SparseArray",
            "category": "class",
            "methods": {
                "void append(int key, E value)": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.",
                "void clear()": "Removes all key-value mappings from this SparseArray.",
                "SparseArray clone()": "Creates and returns a copy of this object.",
                "boolean contains(int key)": "Returns true if the key exists in the array.",
                "boolean contentEquals(SparseArray other)": "Compares the contents of this SparseArray to the specified SparseArray.",
                "int contentHashCode()": "Returns a hash code value for the contents of this SparseArray, combining the Objects#hashCode(Object) result of all its keys and values.",
                "void delete(int key)": "Removes the mapping from the specified key, if there was any.",
                "E get(int key)": "Gets the Object mapped from the specified key, or null if no such mapping has been made.",
                "E get(int key, E valueIfKeyNotFound)": "Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made.",
                "int indexOfKey(int key)": "Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped.",
                "int indexOfValue(E value)": "Returns an index for which valueAt(int) would return the specified value, or a negative number if no keys map to the specified value.",
                "int keyAt(int index)": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseArray stores.",
                "void put(int key, E value)": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.",
                "void remove(int key)": "Alias for delete(int).",
                "void removeAt(int index)": "Removes the mapping at the specified index.",
                "void removeAtRange(int index, int size)": "Remove a range of mappings as a batch.",
                "void set(int key, E value)": "Alias for put(int, java.lang.Object) to support Kotlin [index]= operator.",
                "void setValueAt(int index, E value)": "Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this SparseArray stores.",
                "int size()": "Returns the number of key-value mappings that this SparseArray currently stores.",
                "String toString()": "Returns a string representation of the object. This implementation composes a string by iterating over its mappings.",
                "E valueAt(int index)": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseArray stores."
            },
            "super class": []
        }
    },
    "com.fasterxml.jackson.databind.JsonSerializable.Base": {
        "com.fasterxml.jackson.databind.JsonSerializable.Base": {
            "class": "JsonSerializable.Base",
            "category": "Class",
            "methods": {
                "boolean isEmpty(SerializerProvider serializers)": "Method that may be called on instance to determine if it is considered \"empty\" for purposes of serialization filtering or not."
            },
            "super class": []
        }
    },
    "org.apache.http.client.methods.HttpOptions": {
        "org.apache.http.client.methods.HttpOptions": {
            "class": "HttpOptions",
            "category": "Class",
            "methods": {
                "Set getAllowedMethods(HttpResponse response)": "",
                "String getMethod()": "Returns the HTTP method this request uses, such as GET, PUT, POST, or other.",
                "RequestConfig getConfig()": "Returns actual request configuration.",
                "ProtocolVersion getProtocolVersion()": "",
                "RequestLine getRequestLine()": "",
                "URI getURI()": "Returns the original request URI.",
                "void releaseConnection()": "A convenience method to simplify migration from HttpClient 3.1 API.",
                "void setConfig(RequestConfig config)": "",
                "void setProtocolVersion(ProtocolVersion version)": "",
                "void setURI(URI uri)": "",
                "void started()": "",
                "String toString()": "",
                "void abort()": "Aborts this http request.",
                "Object clone()": "",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.client.methods.HttpRequestBase",
                "org.apache.http.client.methods.AbstractExecutionAwareRequest",
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "com.alibaba.rocketmq.remoting.common.RemotingUtil": {
        "com.alibaba.rocketmq.remoting.common.RemotingUtil": {
            "class": "RemotingUtil",
            "category": "Class",
            "methods": {
                "void closeChannel(io.netty.channel.Channel channel)": "Closes the specified channel.",
                "SocketChannel connect(SocketAddress remote)": "Connects to the specified remote address.",
                "SocketChannel connect(SocketAddress remote, int timeoutMillis)": "Connects to the specified remote address with a timeout.",
                "String getLocalAddress()": "Returns the local address of the machine.",
                "boolean isLinuxPlatform()": "Returns whether the current platform is Linux.",
                "boolean isWindowsPlatform()": "Returns whether the current platform is Windows.",
                "String normalizeHostAddress(InetAddress localHost)": "Normalizes the specified local host address.",
                "Selector openSelector()": "Opens a new selector.",
                "String socketAddress2String(SocketAddress addr)": "Converts a socket address to a string.",
                "SocketAddress string2SocketAddress(String addr)": "Converts a string to a socket address."
            },
            "super class": []
        }
    },
    "java.awt.image.BufferedImage": {
        "java.awt.image.BufferedImage": {
            "class": "BufferedImage",
            "category": "Class",
            "methods": {
                "void addTileObserver(TileObserver to)": "Adds a tile observer.",
                "void coerceData(boolean isAlphaPremultiplied)": "Forces the data to match the state specified in the isAlphaPremultiplied variable.",
                "WritableRaster copyData(WritableRaster outRaster)": "Computes an arbitrary rectangular region of the BufferedImage and copies it into a specified WritableRaster.",
                "Graphics2D createGraphics()": "Creates a Graphics2D, which can be used to draw into this BufferedImage.",
                "WritableRaster getAlphaRaster()": "Returns a WritableRaster representing the alpha channel for BufferedImage objects with ColorModel objects that support a separate spatial alpha channel, such as ComponentColorModel and DirectColorModel.",
                "ColorModel getColorModel()": "Returns the ColorModel.",
                "Raster getData()": "Returns the image as one large tile.",
                "Raster getData(Rectangle rect)": "Computes and returns an arbitrary region of the BufferedImage.",
                "Graphics getGraphics()": "Creates a graphics context for drawing to an off-screen image.",
                "int getHeight()": "Returns the height of the BufferedImage.",
                "int getHeight(ImageObserver observer)": "Determines the height of the image.",
                "int getMinTileX()": "Returns the minimum tile index in the x direction.",
                "int getMinTileY()": "Returns the minimum tile index in the y direction.",
                "int getMinX()": "Returns the minimum x coordinate of this BufferedImage.",
                "int getMinY()": "Returns the minimum y coordinate of this BufferedImage.",
                "int getNumXTiles()": "Returns the number of tiles in the x direction.",
                "int getNumYTiles()": "Returns the number of tiles in the y direction.",
                "Object getProperty(String name)": "Returns a property of the image by name.",
                "Object getProperty(String name, ImageObserver observer)": "Gets a property of this image by name.",
                "String[] getPropertyNames()": "Returns an array of names recognized by getProperty(String) or null, if no property names are recognized.",
                "WritableRaster getRaster()": "Returns the WritableRaster.",
                "int getRGB(int x, int y)": "Returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace.",
                "int[] getRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)": "Returns an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data.",
                "SampleModel getSampleModel()": "Returns the SampleModel associated with this BufferedImage.",
                "ImageProducer getSource()": "Gets the object that produces the pixels for the image.",
                "Vector getSources()": "Returns a Vector of RenderedImage objects that are the immediate sources, not the sources of these immediate sources, of image data for this BufferedImage.",
                "BufferedImage getSubimage(int x, int y, int w, int h)": "Returns a subimage defined by a specified rectangular region.",
                "Raster getTile(int tileX, int tileY)": "Returns tile (tileX, tileY).",
                "int getTileGridXOffset()": "Returns the x offset of the tile grid relative to the origin, For example, the x coordinate of the location of tile (0, 0).",
                "int getTileGridYOffset()": "Returns the y offset of the tile grid relative to the origin, For example, the y coordinate of the location of tile (0, 0).",
                "int getTileHeight()": "Returns the tile height in pixels.",
                "int getTileWidth()": "Returns the tile width in pixels.",
                "int getTransparency()": "Returns the transparency.",
                "int getType()": "Returns the image type.",
                "int getWidth()": "Returns the width of the BufferedImage.",
                "int getWidth(ImageObserver observer)": "Determines the width of the image.",
                "WritableRaster getWritableTile(int tileX, int tileY)": "Checks out a tile for writing.",
                "Point[] getWritableTileIndices()": "Returns an array of Point objects indicating which tiles are checked out for writing.",
                "boolean hasTileWriters()": "Returns whether or not any tile is checked out for writing.",
                "boolean isAlphaPremultiplied()": "Returns whether or not the alpha has been premultiplied.",
                "boolean isTileWritable(int tileX, int tileY)": "Returns whether or not a tile is currently checked out for writing.",
                "void releaseWritableTile(int tileX, int tileY)": "Relinquishes permission to write to a tile.",
                "void removeTileObserver(TileObserver to)": "Removes a tile observer.",
                "void setData(Raster r)": "Sets a rectangular region of the image to the contents of the specified Raster r, which is assumed to be in the same coordinate space as the BufferedImage.",
                "void setRGB(int x, int y, int rgb)": "Sets a pixel in this BufferedImage to the specified RGB value.",
                "void setRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)": "Sets an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, into a portion of the image data.",
                "String toString()": "Returns a String representation of this BufferedImage object and its values.",
                "void flush()": "Flushes all reconstructable resources being used by this Image object.",
                "float getAccelerationPriority()": "Returns the current value of the acceleration priority hint.",
                "ImageCapabilities getCapabilities(GraphicsConfiguration gc)": "Returns an ImageCapabilities object which can be inquired as to the capabilities of this Image on the specified GraphicsConfiguration.",
                "Image getScaledInstance(int width, int height, int hints)": "Creates a scaled version of this image.",
                "void setAccelerationPriority(float priority)": "Sets a hint for this image about how important acceleration is."
            },
            "super class": [
                "java.awt.Image"
            ]
        }
    },
    "org.bukkit.configuration.MemorySection": {
        "org.bukkit.configuration.MemorySection": {
            "class": "MemorySection",
            "category": "Class",
            "methods": {
                "void addDefault(String path, Object value)": "Sets the default value in the root at the given path as provided.",
                "boolean contains(String path)": "Checks if this ConfigurationSection contains the given path.",
                "boolean contains(String path, boolean ignoreDefault)": "Checks if this ConfigurationSection contains the given path.",
                "String createPath(ConfigurationSection section, String key)": "Creates a full path to the given ConfigurationSection from its root Configuration.",
                "String createPath(ConfigurationSection section, String key, ConfigurationSection relativeTo)": "Creates a relative path to the given ConfigurationSection from the given relative section.",
                "ConfigurationSection createSection(String path)": "Creates an empty ConfigurationSection at the specified path.",
                "ConfigurationSection createSection(String path, Map<?,?> map)": "Creates a ConfigurationSection at the specified path, with specified values.",
                "Object get(String path)": "Gets the requested Object by path.",
                "Object get(String path, Object def)": "Gets the requested Object by path, returning a default value if not found.",
                "boolean getBoolean(String path)": "Gets the requested boolean by path.",
                "boolean getBoolean(String path, boolean def)": "Gets the requested boolean by path, returning a default value if not found.",
                "List<Boolean> getBooleanList(String path)": "Gets the requested List of Boolean by path.",
                "List<Byte> getByteList(String path)": "Gets the requested List of Byte by path.",
                "List<Character> getCharacterList(String path)": "Gets the requested List of Character by path.",
                "Color getColor(String path)": "Gets the requested Color by path.",
                "Color getColor(String path, Color def)": "Gets the requested Color by path, returning a default value if not found.",
                "List<String> getComments(String path)": "Gets the requested comment list by path.",
                "ConfigurationSection getConfigurationSection(String path)": "Gets the requested ConfigurationSection by path.",
                "String getCurrentPath()": "Gets the path of this ConfigurationSection from its root Configuration.",
                "Object getDefault(String path)": "",
                "ConfigurationSection getDefaultSection()": "Gets the equivalent ConfigurationSection from the default Configuration defined in ConfigurationSection.getRoot().",
                "double getDouble(String path)": "Gets the requested double by path.",
                "double getDouble(String path, double def)": "Gets the requested double by path, returning a default value if not found.",
                "List<Double> getDoubleList(String path)": "Gets the requested List of Double by path.",
                "List<Float> getFloatList(String path)": "Gets the requested List of Float by path.",
                "List<String> getInlineComments(String path)": "Gets the requested inline comment list by path.",
                "int getInt(String path)": "Gets the requested int by path.",
                "int getInt(String path, int def)": "Gets the requested int by path, returning a default value if not found.",
                "List<Integer> getIntegerList(String path)": "Gets the requested List of Integer by path.",
                "ItemStack getItemStack(String path)": "Gets the requested ItemStack by path.",
                "ItemStack getItemStack(String path, ItemStack def)": "Gets the requested ItemStack by path, returning a default value if not found.",
                "Set<String> getKeys(boolean deep)": "Gets a set containing all keys in this section.",
                "List<?> getList(String path)": "Gets the requested List by path.",
                "List<?> getList(String path, List<?> def)": "Gets the requested List by path, returning a default value if not found.",
                "Location getLocation(String path)": "Gets the requested Location by path.",
                "Location getLocation(String path, Location def)": "Gets the requested Location by path, returning a default value if not found.",
                "long getLong(String path)": "Gets the requested long by path.",
                "long getLong(String path, long def)": "Gets the requested long by path, returning a default value if not found.",
                "List<Long> getLongList(String path)": "Gets the requested List of Long by path.",
                "List<Map<?,?>> getMapList(String path)": "Gets the requested List of Maps by path.",
                "String getName()": "Gets the name of this individual ConfigurationSection, in the path.",
                "<T> T getObject(String path, Class<T> clazz)": "Gets the requested object at the given path.",
                "<T> T getObject(String path, Class<T> clazz, T def)": "Gets the requested object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "OfflinePlayer getOfflinePlayer(String path)": "Gets the requested OfflinePlayer by path.",
                "OfflinePlayer getOfflinePlayer(String path, OfflinePlayer def)": "Gets the requested OfflinePlayer by path, returning a default value if not found.",
                "ConfigurationSection getParent()": "Gets the parent ConfigurationSection that directly contains this ConfigurationSection.",
                "Configuration getRoot()": "Gets the root Configuration that contains this ConfigurationSection.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz)": "Gets the requested ConfigurationSerializable object at the given path.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz, T def)": "Gets the requested ConfigurationSerializable object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "List<Short> getShortList(String path)": "Gets the requested List of Short by path.",
                "String getString(String path)": "Gets the requested String by path.",
                "String getString(String path, String def)": "Gets the requested String by path, returning a default value if not found.",
                "List<String> getStringList(String path)": "Gets the requested List of String by path.",
                "Map<String,Object> getValues(boolean deep)": "Gets a Map containing all keys and their values for this section.",
                "Vector getVector(String path)": "Gets the requested Vector by path.",
                "Vector getVector(String path, Vector def)": "Gets the requested Vector by path, returning a default value if not found.",
                "boolean isBoolean(String path)": "Checks if the specified path is a boolean.",
                "boolean isColor(String path)": "Checks if the specified path is a Color.",
                "boolean isConfigurationSection(String path)": "Checks if the specified path is a ConfigurationSection.",
                "boolean isDouble(String path)": "Checks if the specified path is a double.",
                "boolean isInt(String path)": "Checks if the specified path is an int.",
                "boolean isItemStack(String path)": "Checks if the specified path is an ItemStack.",
                "boolean isList(String path)": "Checks if the specified path is a List.",
                "boolean isLocation(String path)": "Checks if the specified path is a Location.",
                "boolean isLong(String path)": "Checks if the specified path is a long.",
                "boolean isOfflinePlayer(String path)": "Checks if the specified path is an OfflinePlayer.",
                "protected boolean isPrimitiveWrapper(Object input)": "Checks if the input object is a primitive wrapper class.",
                "boolean isSet(String path)": "Checks if this ConfigurationSection has a value set for the given path.",
                "boolean isString(String path)": "Checks if the specified path is a String.",
                "boolean isVector(String path)": "Checks if the specified path is a Vector.",
                "protected void mapChildrenKeys(Set<String> output, ConfigurationSection section, boolean deep)": "Maps all the keys of the children of this ConfigurationSection.",
                "protected void mapChildrenValues(Map<String,Object> output, ConfigurationSection section, boolean deep)": "Maps all the values of the children of this ConfigurationSection.",
                "void set(String path, Object value)": "Sets the specified path to the given value.",
                "void setComments(String path, List<String> comments)": "Sets the comment list at the specified path.",
                "void setInlineComments(String path, List<String> comments)": "Sets the inline comment list at the specified path.",
                "String toString()": "Returns a string representation of this ConfigurationSection and its children."
            },
            "super class": []
        }
    },
    "org.eclipse.swt.widgets.TableItem": {
        "org.eclipse.swt.widgets.TableItem": {
            "class": "TableItem",
            "category": "Class",
            "methods": {
                "void checkSubclass()": "Checks that this class can be subclassed.",
                "Color getBackground()": "Returns the receiver's background color.",
                "Rectangle getBounds(int index)": "Returns a rectangle describing the receiver's size and location relative to its parent at a column in the table.",
                "boolean getChecked()": "Returns true if the receiver is checked, and false otherwise.",
                "Display getDisplay()": "Returns the Display that is associated with the receiver.",
                "Color getForeground()": "Returns the foreground color that the receiver will use to draw.",
                "boolean getGrayed()": "Returns true if the receiver is grayed, and false otherwise.",
                "Image getImage(int index)": "Returns the image stored at the given column index in the receiver, or null if the image has not been set or if the column does not exist.",
                "Rectangle getImageBounds(int index)": "Returns a rectangle describing the size and location relative to its parent of an image at a column in the table.",
                "int getImageIndent()": "Gets the image indent.",
                "Table getParent()": "Returns the receiver's parent, which must be a Table.",
                "String getText(int index)": "Returns the text stored at the given column index in the receiver, or empty string if the text has not been set.",
                "void setBackground(Color color)": "Sets the receiver's background color to the color specified by the argument, or to the default system color for the item if the argument is null.",
                "void setChecked(boolean checked)": "Sets the checked state of the receiver.",
                "void setForeground(Color color)": "Sets the receiver's foreground color to the color specified by the argument, or to the default system color for the item if the argument is null.",
                "void setGrayed(boolean grayed)": "Sets the grayed state of the receiver.",
                "void setImage(Image image)": "Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.",
                "void setImages(Image[] images)": "Sets the image for multiple columns in the Table.",
                "void setImage(int index, Image image)": "Sets the receiver's image at a column.",
                "void setImageIndent(int indent)": "Sets the image indent.",
                "void setText(int index, String string)": "Sets the receiver's text at a column",
                "void setText(String string)": "Sets the receiver's text.",
                "void setTexts(String[] strings)": "Sets the text for multiple columns in the table.",
                "void addListener(int eventType, Listener listener)": "Adds the listener to the collection of listeners who will be notified when an event of the given type occurs.",
                "void checkWidget()": "Throws an SWTException if the receiver cannot be accessed by the caller.",
                "void dispose()": "Disposes of the operating system resources associated with the receiver and all its descendants.",
                "Object getData()": "Returns the application-defined widget data associated with the receiver, or null if it has not been set.",
                "Object getData(String key)": "Returns the application-defined property of the receiver with the specified name, or null if it has not been set.",
                "abstract Display getDisplay()": "Returns the Display that is associated with the receiver.",
                "int getStyle()": "Returns the receiver's style information.",
                "boolean isDisposed()": "Returns true if the widget has been disposed, and false otherwise.",
                "boolean isListening(int eventType)": "Returns true if there are any listeners for the specified event type associated with the receiver, and false otherwise.",
                "void notifyListeners(int eventType, Event event)": "Notifies all of the receiver's listeners for events of the given type that one such event has occurred by invoking their handleEvent() method.",
                "void removeDisposeListener(DisposeListener listener)": "Removes the listener from the collection of listeners who will be notified when the widget is disposed.",
                "void removeListener(int eventType, Listener listener)": "Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.",
                "void removeListener(int eventType, org.eclipse.swt.internal.SWTEventListener listener)": "Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.",
                "void setData(Object data)": "Sets the application-defined widget data associated with the receiver to be the argument.",
                "void setData(String key, Object value)": "Sets the application-defined property of the receiver with the specified name to the given value.",
                "String toString()": "Returns a string containing a concise, human-readable description of the receiver.",
                "Image getImage()": "Returns the receiver's image if it has one, or null if it does not",
                "String getText()": "Returns the receiver's text, which will be an empty string if it has never been set"
            },
            "super class": [
                "org.eclipse.swt.widgets.Widget",
                "org.eclipse.swt.widgets.Item"
            ]
        }
    },
    "java.lang.reflect.Field": {
        "java.lang.reflect.Field": {
            "class": "Field",
            "category": "Class",
            "methods": {
                "boolean equals(Object obj)": "Compares this Field against the specified object.",
                "Object get(Object obj)": "Returns the value of the field represented by this Field, on the specified object.",
                "AnnotatedType getAnnotatedType()": "Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.",
                "T getAnnotation(Class annotationClass)": "Returns this element's annotation for the specified type if such an annotation is present, else null.",
                "T[] getAnnotationsByType(Class annotationClass)": "Returns annotations that are associated with this element.",
                "boolean getBoolean(Object obj)": "Gets the value of a static or instance boolean field.",
                "byte getByte(Object obj)": "Gets the value of a static or instance byte field.",
                "char getChar(Object obj)": "Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.",
                "Annotation[] getDeclaredAnnotations()": "Returns annotations that are directly present on this element.",
                "Class getDeclaringClass()": "Returns the Class object representing the class or interface that declares the field represented by this Field object.",
                "double getDouble(Object obj)": "Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.",
                "float getFloat(Object obj)": "Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.",
                "Type getGenericType()": "Returns a Type object that represents the declared type for the field represented by this Field object.",
                "int getInt(Object obj)": "Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.",
                "long getLong(Object obj)": "Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.",
                "int getModifiers()": "Returns the Java language modifiers for the field represented by this Field object, as an integer.",
                "String getName()": "Returns the name of the field represented by this Field object.",
                "short getShort(Object obj)": "Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.",
                "Class getType()": "Returns a Class object that identifies the declared type for the field represented by this Field object.",
                "int hashCode()": "Returns a hashcode for this Field.",
                "boolean isEnumConstant()": "Returns true if this field represents an element of an enumerated type; returns false otherwise.",
                "boolean isSynthetic()": "Returns true if this field is a synthetic field; returns false otherwise.",
                "void set(Object obj, Object value)": "Sets the field represented by this Field object on the specified object argument to the specified new value.",
                "void setBoolean(Object obj, boolean z)": "Sets the value of a field as a boolean on the specified object.",
                "void setByte(Object obj, byte b)": "Sets the value of a field as a byte on the specified object.",
                "void setChar(Object obj, char c)": "Sets the value of a field as a char on the specified object.",
                "void setDouble(Object obj, double d)": "Sets the value of a field as a double on the specified object.",
                "void setFloat(Object obj, float f)": "Sets the value of a field as a float on the specified object.",
                "void setInt(Object obj, int i)": "Sets the value of a field as an int on the specified object.",
                "void setLong(Object obj, long l)": "Sets the value of a field as a long on the specified object.",
                "void setShort(Object obj, short s)": "Sets the value of a field as a short on the specified object.",
                "String toGenericString()": "Returns a string describing this Field, including its generic type.",
                "String toString()": "Returns a string describing this Field."
            },
            "super class": []
        }
    },
    "org.ejml.data.D1Matrix64F": {
        "org.ejml.data.D1Matrix64F": {
            "class": "D1Matrix64F",
            "category": "Class",
            "methods": {
                "double div(int index, double val)": "Divides the specified value to the internal data array at the specified index. Equivalent to: this.data[index] /= val;",
                "double get(int index)": "Returns the value of the matrix at the specified internal array index.",
                "double[] getData()": "Used to get a reference to the internal data.",
                "int getIndex(int row, int col)": "Returns the internal array index for the specified row and column.",
                "double minus(int index, double val)": "Subtracts the specified value to the internal data array at the specified index. Equivalent to: this.data[index] -= val;",
                "double plus(int index, double val)": "Adds the specified value to the internal data array at the specified index. Equivalent to: this.data[index] += val;",
                "void set(D1Matrix64F b)": "Sets the value of this matrix to be the same as the value of the provided matrix.",
                "double set(int index, double val)": "Sets the element's value at the specified index.",
                "void setData(double[] data)": "Changes the internal array reference.",
                "double times(int index, double val)": "Multiplies the specified value to the internal data array at the specified index. Equivalent to: this.data[index] *= val;",
                "int getNumCols()": "Returns the number of columns in this matrix.",
                "int getNumRows()": "Returns the number of rows in this matrix.",
                "MatrixIterator iterator(boolean rowMajor, int minRow, int minCol, int maxRow, int maxCol)": "Creates a new iterator for traversing through a submatrix inside this matrix.",
                "void reshape(int numRows, int numCols)": "Equivalent to invoking reshape(numRows, numCols, false);",
                "void reshape(int numRows, int numCols, boolean saveValues)": "Changes the number of rows and columns in the matrix, allowing its size to grow or shrink.",
                "void set(ReshapeMatrix64F A)": "Assigns the value of 'this' matrix to be the same as 'A'.",
                "void setNumCols(int numCols)": "Sets the number of columns.",
                "void setNumRows(int numRows)": "Sets the number of rows."
            },
            "super class": [
                "org.ejml.data.ReshapeMatrix64F"
            ]
        }
    },
    "org.bukkit.configuration.MemoryConfiguration": {
        "org.bukkit.configuration.MemoryConfiguration": {
            "class": "MemoryConfiguration",
            "category": "Class",
            "methods": {
                "void addDefault(String path, Object value)": "Sets the default value in the root at the given path as provided.",
                "void addDefaults(Map<String,Object> defaults)": "Sets the default values of the given paths as provided.",
                "void addDefaults(Configuration defaults)": "Sets the default values of the given paths as provided.",
                "Configuration getDefaults()": "Gets the source Configuration for this configuration.",
                "ConfigurationSection getParent()": "Gets the parent ConfigurationSection that directly contains this ConfigurationSection.",
                "MemoryConfigurationOptions options()": "Gets the ConfigurationOptions for this Configuration.",
                "void setDefaults(Configuration defaults)": "Sets the source of all default values for this Configuration.",
                "boolean contains(String path)": "Checks if this ConfigurationSection contains the given path.",
                "boolean contains(String path, boolean ignoreDefault)": "Checks if this ConfigurationSection contains the given path.",
                "String createPath(ConfigurationSection section, String key)": "Creates a full path to the given ConfigurationSection from its root Configuration.",
                "String createPath(ConfigurationSection section, String key, ConfigurationSection relativeTo)": "Creates a relative path to the given ConfigurationSection from the given relative section.",
                "ConfigurationSection createSection(String path)": "Creates an empty ConfigurationSection at the specified path.",
                "ConfigurationSection createSection(String path, Map<?,?> map)": "Creates a ConfigurationSection at the specified path, with specified values.",
                "Object get(String path)": "Gets the requested Object by path.",
                "Object get(String path, Object def)": "Gets the requested Object by path, returning a default value if not found.",
                "boolean getBoolean(String path)": "Gets the requested boolean by path.",
                "boolean getBoolean(String path, boolean def)": "Gets the requested boolean by path, returning a default value if not found.",
                "List<Boolean> getBooleanList(String path)": "Gets the requested List of Boolean by path.",
                "List<Byte> getByteList(String path)": "Gets the requested List of Byte by path.",
                "List<Character> getCharacterList(String path)": "Gets the requested List of Character by path.",
                "Color getColor(String path)": "Gets the requested Color by path.",
                "Color getColor(String path, Color def)": "Gets the requested Color by path, returning a default value if not found.",
                "List<String> getComments(String path)": "Gets the requested comment list by path.",
                "ConfigurationSection getConfigurationSection(String path)": "Gets the requested ConfigurationSection by path.",
                "String getCurrentPath()": "Gets the path of this ConfigurationSection from its root Configuration.",
                "Object getDefault(String path)": "",
                "ConfigurationSection getDefaultSection()": "Gets the equivalent ConfigurationSection from the default Configuration defined in ConfigurationSection.getRoot().",
                "double getDouble(String path)": "Gets the requested double by path.",
                "double getDouble(String path, double def)": "Gets the requested double by path, returning a default value if not found.",
                "List<Double> getDoubleList(String path)": "Gets the requested List of Double by path.",
                "List<Float> getFloatList(String path)": "Gets the requested List of Float by path.",
                "List<String> getInlineComments(String path)": "Gets the requested inline comment list by path.",
                "int getInt(String path)": "Gets the requested int by path.",
                "int getInt(String path, int def)": "Gets the requested int by path, returning a default value if not found.",
                "List<Integer> getIntegerList(String path)": "Gets the requested List of Integer by path.",
                "ItemStack getItemStack(String path)": "Gets the requested ItemStack by path.",
                "ItemStack getItemStack(String path, ItemStack def)": "Gets the requested ItemStack by path, returning a default value if not found.",
                "Set<String> getKeys(boolean deep)": "Gets a set containing all keys in this section.",
                "List<?> getList(String path)": "Gets the requested List by path.",
                "List<?> getList(String path, List<?> def)": "Gets the requested List by path, returning a default value if not found.",
                "Location getLocation(String path)": "Gets the requested Location by path.",
                "Location getLocation(String path, Location def)": "Gets the requested Location by path, returning a default value if not found.",
                "long getLong(String path)": "Gets the requested long by path.",
                "long getLong(String path, long def)": "Gets the requested long by path, returning a default value if not found.",
                "List<Long> getLongList(String path)": "Gets the requested List of Long by path.",
                "List<Map<?,?>> getMapList(String path)": "Gets the requested List of Maps by path.",
                "String getName()": "Gets the name of this individual ConfigurationSection, in the path.",
                "<T> T getObject(String path, Class<T> clazz)": "Gets the requested object at the given path.",
                "<T> T getObject(String path, Class<T> clazz, T def)": "Gets the requested object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "OfflinePlayer getOfflinePlayer(String path)": "Gets the requested OfflinePlayer by path.",
                "OfflinePlayer getOfflinePlayer(String path, OfflinePlayer def)": "Gets the requested OfflinePlayer by path, returning a default value if not found.",
                "Configuration getRoot()": "Gets the root Configuration that contains this ConfigurationSection.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz)": "Gets the requested ConfigurationSerializable object at the given path.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz, T def)": "Gets the requested ConfigurationSerializable object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "List<Short> getShortList(String path)": "Gets the requested List of Short by path.",
                "String getString(String path)": "Gets the requested String by path.",
                "String getString(String path, String def)": "Gets the requested String by path, returning a default value if not found.",
                "List<String> getStringList(String path)": "Gets the requested List of String by path.",
                "Map<String,Object> getValues(boolean deep)": "Gets a Map containing all keys and their values for this section.",
                "Vector getVector(String path)": "Gets the requested Vector by path.",
                "Vector getVector(String path, Vector def)": "Gets the requested Vector by path, returning a default value if not found.",
                "boolean isBoolean(String path)": "Checks if the specified path is a boolean.",
                "boolean isColor(String path)": "Checks if the specified path is a Color.",
                "boolean isConfigurationSection(String path)": "Checks if the specified path is a ConfigurationSection.",
                "boolean isDouble(String path)": "Checks if the specified path is a double.",
                "boolean isInt(String path)": "Checks if the specified path is an int.",
                "boolean isItemStack(String path)": "Checks if the specified path is an ItemStack.",
                "boolean isList(String path)": "Checks if the specified path is a List.",
                "boolean isLocation(String path)": "Checks if the specified path is a Location.",
                "boolean isLong(String path)": "Checks if the specified path is a long.",
                "boolean isOfflinePlayer(String path)": "Checks if the specified path is an OfflinePlayer.",
                "protected boolean isPrimitiveWrapper(Object input)": "Checks if the input object is a primitive wrapper class.",
                "boolean isSet(String path)": "Checks if this ConfigurationSection has a value set for the given path.",
                "boolean isString(String path)": "Checks if the specified path is a String.",
                "boolean isVector(String path)": "Checks if the specified path is a Vector.",
                "protected void mapChildrenKeys(Set<String> output, ConfigurationSection section, boolean deep)": "Maps all the keys of the children of this ConfigurationSection.",
                "protected void mapChildrenValues(Map<String,Object> output, ConfigurationSection section, boolean deep)": "Maps all the values of the children of this ConfigurationSection.",
                "void set(String path, Object value)": "Sets the specified path to the given value.",
                "void setComments(String path, List<String> comments)": "Sets the comment list at the specified path.",
                "void setInlineComments(String path, List<String> comments)": "Sets the inline comment list at the specified path.",
                "String toString()": "Returns a string representation of this ConfigurationSection and its children."
            },
            "super class": [
                "org.bukkit.configuration.MemorySection"
            ]
        }
    },
    "org.apache.http.client.methods.AbstractExecutionAwareRequest": {
        "org.apache.http.client.methods.AbstractExecutionAwareRequest": {
            "class": "AbstractExecutionAwareRequest",
            "category": "Class",
            "methods": {
                "void abort()": "Aborts this http request.",
                "Object clone()": "",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "java.util.LinkedList": {
        "java.util.LinkedList": {
            "class": "LinkedList",
            "category": "Class",
            "methods": {
                "boolean add(E e)": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.",
                "void add(int index, E element)": "Inserts the specified element at the specified position in this list (optional operation).",
                "boolean addAll(Collection c)": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).",
                "boolean addAll(int index, Collection c)": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).",
                "void addFirst(E e)": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.",
                "void addLast(E e)": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.",
                "void clear()": "Removes all of the elements from this list (optional operation).",
                "Object clone()": "Returns a shallow copy of this LinkedList.",
                "boolean contains(Object o)": "Returns true if this deque contains the specified element.",
                "Iterator descendingIterator()": "Returns an iterator over the elements in this deque in reverse sequential order.",
                "E element()": "Retrieves, but does not remove, the head of this queue.",
                "E get(int index)": "Returns the element at the specified position in this list.",
                "E getFirst()": "Retrieves, but does not remove, the first element of this deque.",
                "E getLast()": "Retrieves, but does not remove, the last element of this deque.",
                "int indexOf(Object o)": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "int lastIndexOf(Object o)": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "ListIterator listIterator(int index)": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.",
                "boolean offer(E e)": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.",
                "boolean offerFirst(E e)": "Inserts the specified element at the front of this deque unless it would violate capacity restrictions.",
                "boolean offerLast(E e)": "Inserts the specified element at the end of this deque unless it would violate capacity restrictions.",
                "E peek()": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.",
                "E peekFirst()": "Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.",
                "E peekLast()": "Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.",
                "E poll()": "Retrieves and removes the head of this queue, or returns null if this queue is empty.",
                "E pollFirst()": "Retrieves and removes the first element of this deque, or returns null if this deque is empty.",
                "E pollLast()": "Retrieves and removes the last element of this deque, or returns null if this deque is empty.",
                "E pop()": "Pops an element from the stack represented by this deque.",
                "void push(E e)": "Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.",
                "E remove()": "Retrieves and removes the head of this queue.",
                "E remove(int index)": "Removes the element at the specified position in this list (optional operation).",
                "boolean remove(Object o)": "Removes the first occurrence of the specified element from this deque.",
                "E removeFirst()": "Retrieves and removes the first element of this deque.",
                "boolean removeFirstOccurrence(Object o)": "Removes the first occurrence of the specified element from this deque.",
                "E removeLast()": "Retrieves and removes the last element of this deque.",
                "boolean removeLastOccurrence(Object o)": "Removes the last occurrence of the specified element from this deque.",
                "E set(int index, E element)": "Replaces the element at the specified position in this list with the specified element (optional operation).",
                "int size()": "Returns the number of elements in this deque.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "Object[] toArray()": "Returns an array containing all of the elements in this list in proper sequence (from first to last element).",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                "Iterator iterator()": "Returns an iterator over the elements in this deque in proper sequence.",
                "boolean equals(Object o)": "Compares the specified object with this list for equality.",
                "int hashCode()": "Returns the hash code value for this list.",
                "ListIterator listIterator()": "Returns a list iterator over the elements in this list (in proper sequence).",
                "void removeRange(int fromIndex, int toIndex)": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
                "List subList(int fromIndex, int toIndex)": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
                "boolean containsAll(Collection c)": "Returns true if this list contains all of the elements of the specified collection.",
                "boolean isEmpty()": "Returns true if this list contains no elements.",
                "boolean removeAll(Collection c)": "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
                "boolean retainAll(Collection c)": "Retains only the elements in this list that are contained in the specified collection (optional operation).",
                "String toString()": "Returns a string representation of this collection.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "void replaceAll(UnaryOperator operator)": "Replaces each element of this list with the result of applying the operator to that element.",
                "void sort(Comparator c)": "Sorts this list according to the order induced by the specified Comparator.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.AbstractSequentialList",
                "java.util.AbstractList",
                "java.util.AbstractCollection",
                "java.util.Collection",
                "java.util.List",
                "java.lang.Iterable",
                "java.util.Deque",
                "java.util.Queue"
            ]
        }
    },
    "java.io.Closeable": {
        "java.io.Closeable": {
            "class": "Closeable",
            "category": "Interface",
            "methods": {
                "void close()": "Closes this stream and releases any system resources associated with it."
            },
            "super class": []
        }
    },
    "org.json.JSONArray": {
        "org.json.JSONArray": {
            "class": "JSONArray",
            "category": "class",
            "methods": {
                "boolean equals(Object o)": "Indicates whether some other object is \"equal to\" this one.",
                "Object get(int index)": "Returns the value at index.",
                "boolean getBoolean(int index)": "Returns the value at index if it exists and is a boolean or can be coerced to a boolean.",
                "double getDouble(int index)": "Returns the value at index if it exists and is a double or can be coerced to a double.",
                "int getInt(int index)": "Returns the value at index if it exists and is an int or can be coerced to an int.",
                "JSONArray getJSONArray(int index)": "Returns the value at index if it exists and is a JSONArray.",
                "JSONObject getJSONObject(int index)": "Returns the value at index if it exists and is a JSONObject.",
                "long getLong(int index)": "Returns the value at index if it exists and is a long or can be coerced to a long.",
                "String getString(int index)": "Returns the value at index if it exists, coercing it if necessary.",
                "int hashCode()": "Returns a hash code value for the object.",
                "boolean isNull(int index)": "Returns true if this array has no value at index, or if its value is the null reference or JSONObject#NULL.",
                "String join(String separator)": "Returns a new string by alternating this array's values with separator.",
                "int length()": "Returns the number of values in this array.",
                "Object opt(int index)": "Returns the value at index, or null if the array has no value at index.",
                "boolean optBoolean(int index)": "Returns the value at index if it exists and is a boolean or can be coerced to a boolean.",
                "boolean optBoolean(int index, boolean fallback)": "Returns the value at index if it exists and is a boolean or can be coerced to a boolean.",
                "double optDouble(int index)": "Returns the value at index if it exists and is a double or can be coerced to a double.",
                "double optDouble(int index, double fallback)": "Returns the value at index if it exists and is a double or can be coerced to a double.",
                "int optInt(int index)": "Returns the value at index if it exists and is an int or can be coerced to an int.",
                "int optInt(int index, int fallback)": "Returns the value at index if it exists and is an int or can be coerced to an int.",
                "JSONArray optJSONArray(int index)": "Returns the value at index if it exists and is a JSONArray.",
                "JSONObject optJSONObject(int index)": "Returns the value at index if it exists and is a JSONObject.",
                "long optLong(int index)": "Returns the value at index if it exists and is a long or can be coerced to a long.",
                "long optLong(int index, long fallback)": "Returns the value at index if it exists and is a long or can be coerced to a long.",
                "String optString(int index)": "Returns the value at index if it exists, coercing it if necessary.",
                "String optString(int index, String fallback)": "Returns the value at index if it exists, coercing it if necessary.",
                "JSONArray put(int value)": "Appends value to the end of this array.",
                "JSONArray put(long value)": "Appends value to the end of this array.",
                "JSONArray put(int index, boolean value)": "Sets the value at index to value, null padding this array to the required length if necessary.",
                "JSONArray put(double value)": "Appends value to the end of this array.",
                "JSONArray put(int index, Object value)": "Sets the value at index to value, null padding this array to the required length if necessary.",
                "JSONArray put(int index, long value)": "Sets the value at index to value, null padding this array to the required length if necessary.",
                "JSONArray put(int index, int value)": "Sets the value at index to value, null padding this array to the required length if necessary.",
                "JSONArray put(boolean value)": "Appends value to the end of this array.",
                "JSONArray put(int index, double value)": "Sets the value at index to value, null padding this array to the required length if necessary.",
                "JSONArray put(Object value)": "Appends value to the end of this array.",
                "Object remove(int index)": "Removes and returns the value at index, or null if the array has no value at index.",
                "JSONObject toJSONObject(JSONArray names)": "Returns a new object whose values are the values in this array, and whose names are the values in names.",
                "String toString()": "Encodes this array as a compact JSON string, such as:",
                "String toString(int indentSpaces)": "Encodes this array as a human readable JSON string for debugging, such as:"
            },
            "super class": [
                "org.json.JSONArray"
            ]
        }
    },
    "org.apache.mahout.math.DenseVector": {
        "org.apache.mahout.math.DenseVector": {
            "class": "DenseVector",
            "category": "Class",
            "methods": {
                "void addAll(Vector v)": "",
                "Vector assign(DenseVector vector)": "",
                "Vector assign(double value)": "Assign the value to all elements of the receiver",
                "DenseVector clone()": "Return a copy of the recipient",
                "double dot(Vector x)": "Return the dot product of the recipient and the argument",
                "double dotSelf()": "",
                "boolean equals(Object o)": "Determines whether this Vector represents the same logical vector as another object.",
                "double getIteratorAdvanceCost()": "Gets an estimate of the cost (in number of operations) it takes to advance an iterator through the nonzero elements of this vector.",
                "double getLookupCost()": "Gets an estimate of the cost (in number of operations) it takes to lookup a random element in this vector.",
                "int getNumNondefaultElements()": "Return the number of values in the recipient which are not the default value.",
                "int getNumNonZeroElements()": "Return the number of non zero elements in the vector.",
                "double getQuick(int index)": "Return the value at the given index, without checking bounds",
                "void incrementQuick(int index, double increment)": "Increment the value at the given index by the given value.",
                "boolean isAddConstantTime()": "Return true iff adding a new (nonzero) element takes constant time for this vector.",
                "boolean isDense()": "true if this implementation should be considered dense -- that it explicitly represents every value",
                "boolean isSequentialAccess()": "true if this implementation should be considered to be iterable in index order in an efficient way.",
                "Iterator iterateNonZero()": "Iterates over all non-zero elements.",
                "Iterator iterator()": "Iterates over all elements",
                "DenseVector like()": "Return an empty vector of the same underlying class as the receiver",
                "Vector like(int cardinality)": "Return a new empty vector of the same underlying class as the receiver with given cardinality",
                "Matrix matrixLike(int rows, int columns)": "Subclasses must override to return an appropriately sparse or dense result",
                "void mergeUpdates(OrderedIntDoubleMapping updates)": "Merge a set of (index, value) pairs into the vector.",
                "void setQuick(int index, double value)": "Set the value at the given index, without checking bounds",
                "Vector viewPart(int offset, int length)": "Return a new vector containing the subset of the recipient",
                "double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map)": "Aggregates a vector by applying a mapping function fm(x) to every component and aggregating the results with an aggregating function fa(x, y).",
                "double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner)": "Generalized inner product - take two vectors, iterate over them both, using the combiner to combine together (and possibly map in some way) each pair of values, which are then aggregated with the previous accumulated value in the combiner.",
                "Iterable all()": "",
                "String asFormatString()": "",
                "Vector assign(double[] values)": "Assign the values to the receiver",
                "Vector assign(DoubleDoubleFunction f, double y)": "Apply the function to each element of the receiver, using the y value as the second argument of the DoubleDoubleFunction",
                "Vector assign(DoubleFunction f)": "Apply the function to each element of the receiver",
                "Vector assign(Vector other)": "Assign the other vector values to the receiver",
                "Vector assign(Vector other, DoubleDoubleFunction function)": "Apply the function to each element of the receiver and the corresponding element of the other argument",
                "Vector clone()": "Return a copy of the recipient",
                "Vector createOptimizedCopy()": "Copy the current vector in the most optimum fashion.",
                "Matrix cross(Vector other)": "Return the cross product of the receiver and the other vector",
                "Vector divide(double x)": "Return a new vector containing the values of the recipient divided by the argument",
                "double get(int index)": "Return the value at the given index",
                "double getDistanceSquared(Vector that)": "Get the square of the distance between this vector and the other vector.",
                "Vector.Element getElement(int index)": "Return an object of Vector.Element representing an element of this Vector.",
                "double getLengthSquared()": "Return the sum of squares of all elements in the vector.",
                "int hashCode()": "",
                "void invalidateCachedLength()": "Invalidates the length cache.",
                "Vector logNormalize()": "Return a new vector containing the log(1 + entry)/ L_2 norm values of the recipient",
                "Vector logNormalize(double power)": "Return a new Vector with a normalized value calculated as log_power(1 + entry)/ L_power norm.",
                "Vector logNormalize(double power, double normLength)": "",
                "double maxValue()": "",
                "int maxValueIndex()": "",
                "Vector minus(Vector that)": "Return a new vector containing the element by element difference of the recipient and the argument",
                "double minValue()": "",
                "int minValueIndex()": "",
                "Iterable nonZeroes()": "",
                "double norm(double power)": "Return the k-norm of the vector.",
                "Vector normalize()": "Return a new vector containing the normalized (L_2 norm) values of the recipient",
                "Vector normalize(double power)": "Return a new Vector containing the normalized (L_power norm) values of the recipient.",
                "Vector plus(double x)": "Return a new vector containing the sum of each value of the recipient and the argument",
                "Vector plus(Vector that)": "Return a new vector containing the element by element sum of the recipient and the argument",
                "void set(int index, double value)": "Set the value at the given index",
                "int size()": "Return the cardinality of the recipient (the maximum number of values)",
                "String sparseVectorToString()": "toString() implementation for sparse vectors via nonZeroes() method",
                "Vector times(double x)": "Return a new vector containing the product of each value of the recipient and the argument",
                "Vector times(Vector that)": "Return a new vector containing the element-wise product of the recipient and the argument",
                "String toString()": "",
                "String toString(String[] dictionary)": "",
                "double zSum()": "Return the sum of all the elements of the receiver"
            },
            "super class": [
                "org.apache.mahout.math.AbstractVector"
            ]
        }
    },
    "java.lang.Thread": {
        "java.lang.Thread": {
            "class": "Thread",
            "category": "Class",
            "methods": {
                "int activeCount()": "Returns an estimate of the number of active threads in the current thread's thread group and its subgroups.",
                "void checkAccess()": "Determines if the currently running thread has permission to modify this thread.",
                "Object clone()": "Throws CloneNotSupportedException as a Thread can not be meaningfully cloned.",
                "Thread currentThread()": "Returns a reference to the currently executing thread object.",
                "void dumpStack()": "Prints a stack trace of the current thread to the standard error stream.",
                "int enumerate(Thread[] tarray)": "Copies into the specified array every active thread in the current thread's thread group and its subgroups.",
                "Map getAllStackTraces()": "Returns a map of stack traces for all live threads.",
                "ClassLoader getContextClassLoader()": "Returns the context ClassLoader for this Thread.",
                "Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()": "Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception.",
                "long getId()": "Returns the identifier of this Thread.",
                "String getName()": "Returns this thread's name.",
                "int getPriority()": "Returns this thread's priority.",
                "StackTraceElement[] getStackTrace()": "Returns an array of stack trace elements representing the stack dump of this thread.",
                "Thread.State getState()": "Returns the state of this thread.",
                "ThreadGroup getThreadGroup()": "Returns the thread group to which this thread belongs.",
                "Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()": "Returns the handler invoked when this thread abruptly terminates due to an uncaught exception.",
                "boolean holdsLock(Object obj)": "Returns true if and only if the current thread holds the monitor lock on the specified object.",
                "void interrupt()": "Interrupts this thread.",
                "boolean interrupted()": "Tests whether the current thread has been interrupted.",
                "boolean isAlive()": "Tests if this thread is alive.",
                "boolean isDaemon()": "Tests if this thread is a daemon thread.",
                "boolean isInterrupted()": "Tests whether this thread has been interrupted.",
                "void join()": "Waits for this thread to die.",
                "void join(long millis)": "Waits at most millis milliseconds for this thread to die.",
                "void join(long millis, int nanos)": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die.",
                "void run()": "If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns.",
                "void setContextClassLoader(ClassLoader cl)": "Sets the context ClassLoader for this Thread.",
                "void setDaemon(boolean on)": "Marks this thread as either a daemon thread or a user thread.",
                "void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)": "Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread.",
                "void setName(String name)": "Changes the name of this thread to be equal to the argument name.",
                "void setPriority(int newPriority)": "Changes the priority of this thread.",
                "void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)": "Set the handler invoked when this thread abruptly terminates due to an uncaught exception.",
                "void sleep(long millis)": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers.",
                "void sleep(long millis, int nanos)": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers.",
                "void start()": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.",
                "String toString()": "Returns a string representation of this thread, including the thread's name, priority, and thread group.",
                "void yield()": "A hint to the scheduler that the current thread is willing to yield its current use of a processor."
            },
            "super class": []
        }
    },
    "java.nio.IntBuffer": {
        "java.nio.IntBuffer": {
            "class": "IntBuffer",
            "category": "Class",
            "methods": {
                "IntBuffer allocate(int capacity)": "Allocates a new int buffer.",
                "int[] array()": "Returns the int array that backs this buffer (optional operation).",
                "int arrayOffset()": "Returns the offset within this buffer's backing array of the first element of the buffer (optional operation).",
                "IntBuffer asReadOnlyBuffer()": "Creates a new, read-only int buffer that shares this buffer's content.",
                "IntBuffer compact()": "Compacts this buffer (optional operation).",
                "int compareTo(IntBuffer that)": "Compares this buffer to another.",
                "IntBuffer duplicate()": "Creates a new int buffer that shares this buffer's content.",
                "boolean equals(Object ob)": "Tells whether or not this buffer is equal to another object.",
                "int get()": "Relative get method.",
                "int get(int index)": "Absolute get method.",
                "IntBuffer get(int[] dst)": "Relative bulk get method.",
                "IntBuffer get(int[] dst, int offset, int length)": "Relative bulk get method.",
                "boolean hasArray()": "Tells whether or not this buffer is backed by an accessible array.",
                "int hashCode()": "Returns the current hash code of this buffer.",
                "boolean isDirect()": "Tells whether or not this buffer is direct.",
                "ByteOrder order()": "Retrieves this buffer's byte order.",
                "IntBuffer put(int i)": "Relative put method (optional operation).",
                "IntBuffer put(int[] src)": "Relative bulk put method (optional operation).",
                "IntBuffer put(int[] src, int offset, int length)": "Relative bulk put method (optional operation).",
                "IntBuffer put(IntBuffer src)": "Relative bulk put method (optional operation).",
                "IntBuffer put(int index, int i)": "Absolute put method (optional operation).",
                "IntBuffer slice()": "Creates a new int buffer whose content is a shared subsequence of this buffer's content.",
                "String toString()": "Returns a string summarizing the state of this buffer.",
                "IntBuffer wrap(int[] array)": "Wraps an int array into a buffer.",
                "IntBuffer wrap(int[] array, int offset, int length)": "Wraps an int array into a buffer.",
                "Object array()": "Returns the array that backs this buffer (optional operation).",
                "int capacity()": "Returns this buffer's capacity.",
                "Buffer clear()": "Clears this buffer.",
                "Buffer flip()": "Flips this buffer.",
                "boolean hasRemaining()": "Tells whether there are any elements between the current position and the limit.",
                "boolean isReadOnly()": "Tells whether or not this buffer is read-only.",
                "int limit()": "Returns this buffer's limit.",
                "Buffer limit(int newLimit)": "Sets this buffer's limit.",
                "Buffer mark()": "Sets this buffer's mark at its position.",
                "int position()": "Returns this buffer's position.",
                "Buffer position(int newPosition)": "Sets this buffer's position.",
                "int remaining()": "Returns the number of elements between the current position and the limit.",
                "Buffer reset()": "Resets this buffer's position to the previously-marked position.",
                "Buffer rewind()": "Rewinds this buffer."
            },
            "super class": [
                "java.nio.Buffer"
            ]
        }
    },
    "java.lang.ProcessBuilder": {
        "java.lang.ProcessBuilder": {
            "class": "ProcessBuilder",
            "category": "Class",
            "methods": {
                "List command()": "Returns this process builder's operating system program and arguments.",
                "ProcessBuilder command(List command)": "Sets this process builder's operating system program and arguments.",
                "ProcessBuilder command(String... command)": "Sets this process builder's operating system program and arguments.",
                "File directory()": "Returns this process builder's working directory.",
                "ProcessBuilder directory(File directory)": "Sets this process builder's working directory.",
                "Map environment()": "Returns a string map view of this process builder's environment.",
                "ProcessBuilder inheritIO()": "Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process.",
                "ProcessBuilder.Redirect redirectError()": "Returns this process builder's standard error destination.",
                "ProcessBuilder redirectError(File file)": "Sets this process builder's standard error destination to a file.",
                "ProcessBuilder redirectError(ProcessBuilder.Redirect destination)": "Sets this process builder's standard error destination.",
                "boolean redirectErrorStream()": "Tells whether this process builder merges standard error and standard output.",
                "ProcessBuilder redirectErrorStream(boolean redirectErrorStream)": "Sets this process builder's redirectErrorStream property.",
                "ProcessBuilder.Redirect redirectInput()": "Returns this process builder's standard input source.",
                "ProcessBuilder redirectInput(File file)": "Sets this process builder's standard input source to a file.",
                "ProcessBuilder redirectInput(ProcessBuilder.Redirect source)": "Sets this process builder's standard input source.",
                "ProcessBuilder.Redirect redirectOutput()": "Returns this process builder's standard output destination.",
                "ProcessBuilder redirectOutput(File file)": "Sets this process builder's standard output destination to a file.",
                "ProcessBuilder redirectOutput(ProcessBuilder.Redirect destination)": "Sets this process builder's standard output destination.",
                "Process start()": "Starts a new process using the attributes of this process builder."
            },
            "super class": []
        }
    },
    "com.fasterxml.jackson.databind.node.ContainerNode": {
        "com.fasterxml.jackson.databind.node.ContainerNode": {
            "class": "ContainerNode",
            "category": "Class",
            "methods": {
                "ArrayNode arrayNode()": "Factory method that constructs and returns an empty ArrayNode Construction is done using registered JsonNodeFactory.",
                "String asText()": "Method that will return a valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise empty String.",
                "com.fasterxml.jackson.core.JsonToken asToken()": "Method that can be used for efficient type detection when using stream abstraction for traversing nodes.",
                "BinaryNode binaryNode(byte[] data)": "",
                "BinaryNode binaryNode(byte[] data, int offset, int length)": "",
                "BooleanNode booleanNode(boolean v)": "",
                "JsonNode get(int index)": "Method for accessing value of the specified element of an array node.",
                "JsonNode get(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "NullNode nullNode()": "",
                "NumericNode numberNode(BigDecimal v)": "",
                "NumericNode numberNode(BigInteger v)": "",
                "NumericNode numberNode(byte v)": "",
                "ValueNode numberNode(Byte v)": "",
                "NumericNode numberNode(double v)": "",
                "ValueNode numberNode(Double v)": "",
                "NumericNode numberNode(float v)": "",
                "ValueNode numberNode(Float v)": "",
                "NumericNode numberNode(int v)": "",
                "ValueNode numberNode(Integer v)": "",
                "NumericNode numberNode(long v)": "",
                "ValueNode numberNode(Long v)": "",
                "NumericNode numberNode(short v)": "",
                "ValueNode numberNode(Short v)": "",
                "ObjectNode objectNode()": "Factory method that constructs and returns an empty ObjectNode Construction is done using registered JsonNodeFactory.",
                "ValueNode pojoNode(Object pojo)": "",
                "ValueNode rawValueNode(RawValue value)": "Factory method to use for adding \"raw values\"; pre-encoded values that are included exactly as-is when node is serialized.",
                "T removeAll()": "Method for removing all children container has (if any)",
                "int size()": "",
                "TextNode textNode(String text)": "",
                "JsonNode findPath(String fieldName)": "Method similar to findValue(java.lang.String), but that will return a \"missing node\" instead of null if no field is found.",
                "com.fasterxml.jackson.core.JsonParser.NumberType numberType()": "Returns code that identifies type of underlying numeric value, if (and only if) node is a number node.",
                "void serialize(com.fasterxml.jackson.core.JsonGenerator jgen, SerializerProvider provider)": "Method called to serialize node instances using given generator.",
                "void serializeWithType(com.fasterxml.jackson.core.JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
                "com.fasterxml.jackson.core.JsonParser traverse()": "",
                "com.fasterxml.jackson.core.JsonParser traverse(com.fasterxml.jackson.core.ObjectCodec codec)": "",
                "JsonNode _at(com.fasterxml.jackson.core.JsonPointer ptr)": "",
                "boolean asBoolean()": "Method that will try to convert value of this node to a Java boolean.",
                "boolean asBoolean(boolean defaultValue)": "Method that will try to convert value of this node to a Java boolean.",
                "double asDouble()": "Method that will try to convert value of this node to a Java double.",
                "double asDouble(double defaultValue)": "Method that will try to convert value of this node to a Java double.",
                "int asInt()": "Method that will try to convert value of this node to a Java int.",
                "int asInt(int defaultValue)": "Method that will try to convert value of this node to a Java int.",
                "long asLong()": "Method that will try to convert value of this node to a Java long.",
                "long asLong(long defaultValue)": "Method that will try to convert value of this node to a Java long.",
                "String asText(String defaultValue)": "Method similar to asText(), except that it will return defaultValue in cases where null value would be returned; either for missing nodes (trying to access missing property, or element at invalid item for array) or explicit nulls.",
                "JsonNode at(com.fasterxml.jackson.core.JsonPointer ptr)": "Method for locating node specified by given JSON pointer instances.",
                "JsonNode at(String jsonPtrExpr)": "Convenience method that is functionally equivalent to:",
                "BigInteger bigIntegerValue()": "",
                "byte[] binaryValue()": "Method to use for accessing binary content of binary nodes (nodes for which isBinary() returns true); or for Text Nodes (ones for which textValue() returns non-null value), to read decoded base64 data.",
                "boolean booleanValue()": "Method to use for accessing JSON boolean values (value literals 'true' and 'false').",
                "boolean canConvertToInt()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 32-bit signed integer type, int.",
                "boolean canConvertToLong()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 64-bit signed integer type, long.",
                "BigDecimal decimalValue()": "",
                "T deepCopy()": "Method that can be called to get a node that is guaranteed not to allow changing of this node through mutators on this node or any of its children.",
                "double doubleValue()": "Returns 64-bit floating point (double) value for this node, if and only if this node is numeric (isNumber() returns true).",
                "Iterator elements()": "Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node.",
                "boolean equals(Comparator comparator, JsonNode other)": "Entry method for invoking customizable comparison, using passed-in Comparator object.",
                "boolean equals(Object o)": "Equality for node objects is defined as full (deep) value equality.",
                "Iterator fieldNames()": "",
                "Iterator fields()": "",
                "JsonNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName, List foundSoFar)": "",
                "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
                "List findValues(String fieldName)": "Method for finding JSON Object fields with specified name, and returning found ones as a List.",
                "List findValues(String fieldName, List foundSoFar)": "",
                "List findValuesAsText(String fieldName)": "Similar to findValues(java.lang.String), but will additionally convert values into Strings, calling asText().",
                "List findValuesAsText(String fieldName, List foundSoFar)": "",
                "float floatValue()": "Returns 32-bit floating value for this node, if and only if this node is numeric (isNumber() returns true).",
                "JsonNodeType getNodeType()": "Return the type of this node",
                "boolean has(int index)": "Method that allows checking whether this node is JSON Array node and contains a value for specified index If this is the case (including case of specified indexing having null as value), returns true; otherwise returns false.",
                "boolean has(String fieldName)": "Method that allows checking whether this node is JSON Object node and contains value for specified property.",
                "boolean hasNonNull(int index)": "Method that is similar to has(int), but that will return false for explicitly added nulls.",
                "boolean hasNonNull(String fieldName)": "Method that is similar to has(String), but that will return false for explicitly added nulls.",
                "int intValue()": "Returns integer value for this node, if and only if this node is numeric (isNumber() returns true).",
                "boolean isArray()": "",
                "boolean isBigDecimal()": "",
                "boolean isBigInteger()": "",
                "boolean isBinary()": "Method that can be used to check if this node represents binary data (Base64 encoded).",
                "boolean isBoolean()": "Method that can be used to check if this node was created from JSON boolean value (literals \"true\" and \"false\").",
                "boolean isContainerNode()": "",
                "boolean isDouble()": "",
                "boolean isFloat()": "",
                "boolean isFloatingPointNumber()": "",
                "boolean isInt()": "Method that can be used to check whether contained value is a number represented as Java int.",
                "boolean isIntegralNumber()": "",
                "boolean isLong()": "Method that can be used to check whether contained value is a number represented as Java long.",
                "boolean isMissingNode()": "",
                "boolean isNull()": "Method that can be used to check if this node was created from JSON literal null value.",
                "boolean isNumber()": "",
                "boolean isObject()": "",
                "boolean isPojo()": "Method that can be used to check if the node is a wrapper for a POJO (\"Plain Old Java Object\" aka \"bean\".",
                "boolean isShort()": "Method that can be used to check whether contained value is a number represented as Java short.",
                "boolean isTextual()": "Method that checks whether this node represents basic JSON String value.",
                "boolean isValueNode()": "",
                "Iterator iterator()": "Same as calling elements(); implemented so that convenience \"for-each\" loop can be used for looping over elements of JSON Array constructs.",
                "long longValue()": "Returns 64-bit long value for this node, if and only if this node is numeric (isNumber() returns true).",
                "Number numberValue()": "Returns numeric value for this node, if and only if this node is numeric (isNumber() returns true); otherwise returns null",
                "JsonNode path(int index)": "This method is similar to get(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "JsonNode path(String fieldName)": "This method is similar to get(String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "short shortValue()": "Returns 16-bit short value for this node, if and only if this node is numeric (isNumber() returns true).",
                "String textValue()": "Method to use for accessing String values.",
                "String toString()": "Note: marked as abstract to ensure all implementation classes define it properly.",
                "JsonNode with(String propertyName)": "Method that can be called on Object nodes, to access a property that has Object value; or if no such property exists, to create, add and return such Object node.",
                "JsonNode withArray(String propertyName)": "Method that can be called on Object nodes, to access a property that has Array value; or if no such property exists, to create, add and return such Array node.",
                "boolean isEmpty(SerializerProvider serializers)": "Method that may be called on instance to determine if it is considered \"empty\" for purposes of serialization filtering or not."
            },
            "super class": [
                "com.fasterxml.jackson.databind.node.BaseJsonNode",
                "com.fasterxml.jackson.databind.JsonNode",
                "com.fasterxml.jackson.databind.JsonSerializable.Base"
            ]
        }
    },
    "android.content.ComponentName": {
        "android.content.ComponentName": {
            "class": "ComponentName",
            "category": "class",
            "methods": {
                "ComponentName clone()": "Creates and returns a copy of this object.",
                "int compareTo(ComponentName that)": "int compareTo(ComponentName that)",
                "ComponentName createRelative(String pkg, String cls)": "Create a new component identifier where the class name may be specified as either absolute or relative to the containing package.",
                "ComponentName createRelative(Context pkg, String cls)": "Create a new component identifier where the class name may be specified as either absolute or relative to the containing package.",
                "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
                "boolean equals(Object obj)": "Indicates whether some other object is \"equal to\" this one. Two components are considered to be equal if the packages in which they reside have the same name, and if the classes that implement each component also have the same name.",
                "String flattenToShortString()": "The same as flattenToString(), but abbreviates the class name if it is a suffix of the package.",
                "String flattenToString()": "Return a String that unambiguously describes both the package and class names contained in the ComponentName.",
                "String getClassName()": "Return the class name of this component.",
                "String getPackageName()": "Return the package name of this component.",
                "String getShortClassName()": "Return the class name, either fully qualified or in a shortened form (with a leading '.') if it is a suffix of the package.",
                "int hashCode()": "Returns a hash code value for the object.",
                "ComponentName readFromParcel(Parcel in)": "Read a ComponentName from a Parcel that was previously written with writeToParcel(android.content.ComponentName, android.os.Parcel), returning either a null or new object as appropriate.",
                "String toShortString()": "Return string representation of this class without the class's name as a prefix.",
                "String toString()": "Returns a string representation of the object.",
                "ComponentName unflattenFromString(String str)": "Recover a ComponentName from a String that was previously created with flattenToString().",
                "void writeToParcel(ComponentName c, Parcel out)": "Write a ComponentName to a Parcel, handling null pointers.",
                "void writeToParcel(Parcel out, int flags)": "Flatten this object in to a Parcel."
            },
            "super class": []
        }
    },
    "org.apache.ofbiz.entity.GenericEntity": {
        "org.apache.ofbiz.entity.GenericEntity": {
            "class": "GenericEntity",
            "category": "Class",
            "methods": {
                "void addObserver(Observer observer)": "",
                "int addToXmlDocument(java.util.Collection values, org.w3c.dom.Document document)": "",
                "int addToXmlElement(java.util.Collection values, org.w3c.dom.Document document, org.w3c.dom.Element element)": "",
                "void assertIsMutable()": "",
                "boolean checkFks(boolean insertDummy)": "Checks to see if all foreign key records exist in the database.",
                "void clear()": "",
                "void clearChanged()": "",
                "java.lang.Object clone()": "Clones this GenericEntity, this is a shallow clone and uses the default shallow HashMap clone",
                "int compareTo(GenericEntity that)": "Compares this GenericEntity to the passed object",
                "int compareToFields(GenericEntity that, java.lang.String name)": "",
                "boolean containsKey(java.lang.Object key)": "",
                "boolean containsPrimaryKey()": "Returns true if the entity contains all of the primary key fields.",
                "boolean containsPrimaryKey(boolean requireValue)": "",
                "boolean containsValue(java.lang.Object value)": "",
                "GenericEntity createGenericEntity(Delegator delegator, ModelEntity modelEntity, java.util.Map fields)": "Creates new GenericEntity from existing Map",
                "GenericEntity createGenericEntity(GenericEntity value)": "Copy Factory Method: Creates new GenericEntity from existing GenericEntity",
                "GenericEntity createGenericEntity(ModelEntity modelEntity)": "Creates new GenericEntity",
                "java.lang.Object dangerousGetNoCheckButFast(ModelField modelField)": "",
                "void dangerousSetNoCheckButFast(ModelField modelField, java.lang.Object value)": "",
                "void deleteObserver(Observer observer)": "",
                "void deleteObservers()": "",
                "java.util.Set entrySet()": "",
                "boolean equals(java.lang.Object obj)": "Determines the equality of two GenericEntity objects, overrides the default equals",
                "java.lang.Object get(java.lang.Object key)": "",
                "java.lang.Object get(java.lang.String name)": "",
                "java.lang.Object get(java.lang.String name, java.lang.String resource, java.util.Locale locale)": "Same as the getResource method that does not take resource name, but instead allows manually specifying the resource name.",
                "java.lang.Object get(java.lang.String name, java.util.Locale locale)": "Checks a resource bundle for a value for this field using the entity name, the field name and a composite of the Primary Key field values as a key.",
                "java.util.Map getAllFields()": "Returns key/value pairs of entity fields",
                "java.util.Collection getAllKeys()": "Returns keys of entity fields",
                "java.math.BigDecimal getBigDecimal(java.lang.String name)": "",
                "java.lang.Boolean getBoolean(java.lang.String name)": "",
                "byte[] getBytes(java.lang.String name)": "",
                "java.sql.Date getDate(java.lang.String name)": "",
                "Delegator getDelegator()": "Get the GenericDelegator instance that created this value object and that is responsible for it.",
                "java.lang.Double getDouble(java.lang.String name)": "",
                "TimeDuration getDuration(java.lang.String name)": "Returns the specified field as a TimeDuration instance.",
                "java.lang.String getEntityName()": "",
                "java.util.Map getFields(java.util.Collection keysofFields)": "Used by clients to specify exactly the fields they are interested in",
                "java.lang.Float getFloat(java.lang.String name)": "",
                "java.lang.Integer getInteger(java.lang.String name)": "",
                "boolean getIsFromEntitySync()": "",
                "java.lang.Long getLong(java.lang.String name)": "",
                "ModelEntity getModelEntity()": "",
                "java.lang.Object getOriginalDbValue(java.lang.String name)": "",
                "java.lang.String getPkShortValueString()": "",
                "GenericPK getPrimaryKey()": "",
                "java.lang.String getString(java.lang.String name)": "",
                "java.sql.Time getTime(java.lang.String name)": "",
                "java.sql.Timestamp getTimestamp(java.lang.String name)": "",
                "boolean hasChanged()": "",
                "int hashCode()": "Creates a hashCode for the entity, using the default String hashCode and Map hashCode, overrides the default hashCode",
                "void init(Delegator delegator, ModelEntity modelEntity, java.lang.Object singlePkValue)": "Creates new GenericEntity from existing Map",
                "void init(Delegator delegator, ModelEntity modelEntity, java.util.Map fields)": "Creates new GenericEntity from existing Map",
                "void init(GenericEntity value)": "Copy Constructor: Creates new GenericEntity from existing GenericEntity",
                "void init(ModelEntity modelEntity)": "Creates new GenericEntity",
                "boolean isEmpty()": "",
                "boolean isModified()": "Deprecated. Use hasChanged()",
                "boolean isMutable()": "",
                "boolean isPrimaryKey()": "Returns true if the entity contains all of the primary key fields, but NO others.",
                "boolean isPrimaryKey(boolean requireValue)": "",
                "java.util.Set keySet()": "",
                "boolean lockEnabled()": "Used to indicate if locking is enabled for this entity",
                "org.w3c.dom.Document makeXmlDocument(java.util.Collection values)": "",
                "org.w3c.dom.Element makeXmlElement(org.w3c.dom.Document document)": "Makes an XML Element object with an attribute for each field of the entity",
                "org.w3c.dom.Element makeXmlElement(org.w3c.dom.Document document, java.lang.String prefix)": "Makes an XML Element object with an attribute for each field of the entity",
                "boolean matches(EntityCondition condition)": "",
                "boolean matchesFields(java.util.Map keyValuePairs)": "",
                "void notifyObservers()": "",
                "void notifyObservers(java.lang.Object arg)": "",
                "boolean originalDbValuesAvailable()": "",
                "java.lang.Object put(java.lang.String key, java.lang.Object value)": "",
                "void putAll(java.util.Map map)": "",
                "void refreshFromValue(GenericEntity newValue)": "",
                "java.lang.Object remove(java.lang.Object key)": "",
                "void removedFromDatasource()": "Flags this object as being removed from the data source.",
                "void reset()": "",
                "void set(java.lang.String name, java.lang.Object value)": "Sets the named field to the passed value, even if the value is null",
                "java.lang.Object set(java.lang.String name, java.lang.Object value, boolean setIfNull)": "Sets the named field to the passed value.",
                "void setAllFields(java.util.Map fields, boolean setIfEmpty, java.lang.String namePrefix, java.lang.Boolean pks)": "Intelligently sets fields on this entity from the Map of fields passed in",
                "void setBytes(java.lang.String name, byte[] bytes)": "Sets a field with an array of bytes, wrapping them automatically for easy use.",
                "void setChanged()": "",
                "void setDelegator(Delegator internalDelegator)": "Set the GenericDelegator instance that created this value object and that is responsible for it.",
                "void setFields(java.util.Map keyValuePairs)": "Used by clients to update particular fields in the entity",
                "void setImmutable()": "",
                "void setIsFromEntitySync(boolean isFromEntitySync)": "",
                "void setNextSeqId()": "",
                "void setNonPKFields(java.util.Map fields)": "go through the non-pks and for each one see if there is an entry in fields to set",
                "void setNonPKFields(java.util.Map fields, boolean setIfEmpty)": "go through the non-pks and for each one see if there is an entry in fields to set",
                "void setPKFields(java.util.Map fields)": "go through the pks and for each one see if there is an entry in fields to set",
                "void setPKFields(java.util.Map fields, boolean setIfEmpty)": "go through the pks and for each one see if there is an entry in fields to set",
                "void setString(java.lang.String name, java.lang.String value)": "Sets the named field to the passed value, converting the value from a String to the corrent type using Type.valueOf()",
                "int size()": "",
                "void synchronizedWithDatasource()": "Flags this object as being synchronized with the data source.",
                "java.lang.String toString()": "Creates a String for the entity, overrides the default toString This method is secure, it will not display encrypted fields",
                "java.lang.String toStringInsecure()": "Creates a String for the entity, overrides the default toString This method is NOT secure, it WILL display encrypted fields",
                "java.util.Collection values()": "",
                "void writeXmlText(java.io.PrintWriter writer, java.lang.String prefix)": "Writes XML text with an attribute or CDATA element for each field of the entity"
            },
            "super class": []
        }
    },
    "org.eclipse.jface.text.Document": {
        "org.eclipse.jface.text.Document": {
            "class": "Document",
            "category": "Class",
            "methods": {
                "void startSequentialRewrite(boolean normalized)": "Tells the document that it is about to be sequentially rewritten.",
                "void stopSequentialRewrite()": "Tells the document that the sequential rewrite has been finished.",
                "void addDocumentListener(IDocumentListener listener)": "Registers a document listener with the document.",
                "void addDocumentPartitioningListener(IDocumentPartitioningListener listener)": "Registers a document partitioning listener with the document.",
                "void addPosition(Position position)": "Adds the position to the document's default position category.",
                "void addPosition(String category, Position position)": "Adds the position to the specified position category of the document.",
                "void addPositionCategory(String category)": "Adds a new position category to the document.",
                "void addPositionUpdater(IPositionUpdater updater)": "Appends a new position updater to the document's list of position updaters.",
                "void addPrenotifiedDocumentListener(IDocumentListener listener)": "Adds the given document listener as one which is notified before those document listeners added with addDocumentListener are notified.",
                "void completeInitialization()": "Initializes document listeners, positions, and position updaters.",
                "int computeIndexInCategory(String category, int offset)": "Computes the index at which a Position with the specified offset would be inserted into the given category.",
                "int computeIndexInPositionList(List positions, int offset)": "Computes the index in the list of positions at which a position with the given offset would be inserted.",
                "int computeNumberOfLines(String text)": "Computes the number of lines in the given text.",
                "ITypedRegion[] computePartitioning(int offset, int length)": "Computes the partitioning of the given document range using the document's partitioner.",
                "boolean containsPosition(String category, int offset, int length)": "Determines whether a position described by the parameters is managed by this document.",
                "boolean containsPositionCategory(String category)": "Checks the presence of the specified position category.",
                "void fireDocumentAboutToBeChanged(DocumentEvent event)": "Fires the given document event to all registers document listeners informing them about the forthcoming document manipulation.",
                "void fireDocumentChanged(DocumentEvent event)": "Updates the internal document structures and informs all document listeners.",
                "void fireDocumentPartitioningChanged()": "Deprecated. use fireDocumentPartitioningChanged(IRegion) instead",
                "void fireDocumentPartitioningChanged(IRegion region)": "Fires the document partitioning changed notification to all registered document partitioning listeners.",
                "String get()": "Returns this document's complete text.",
                "String get(int pos, int length)": "Returns this document's text for the specified range.",
                "char getChar(int pos)": "Returns the character at the given document offset in this document.",
                "String getContentType(int offset)": "Returns the type of the document partition containing the given offset.",
                "List getDocumentListeners()": "Returns the document's document listeners.",
                "Map getDocumentManagedPositions()": "Returns all positions managed by the document grouped by category.",
                "IDocumentPartitioner getDocumentPartitioner()": "Returns this document's partitioner.",
                "List getDocumentPartitioningListeners()": "Returns the document's partitioning listeners.",
                "String[] getLegalContentTypes()": "Returns the set of legal content types of document partitions.",
                "String[] getLegalLineDelimiters()": "Returns the document's legal line delimiters.",
                "int getLength()": "Returns the number of characters in this document.",
                "String getLineDelimiter(int line)": "Returns the line delimiter of that line.",
                "IRegion getLineInformation(int line)": "Returns a description of the specified line.",
                "IRegion getLineInformationOfOffset(int offset)": "Returns a description of the line at the given offset.",
                "int getLineLength(int line)": "Returns the length of the given line including the line's delimiter.",
                "int getLineOffset(int line)": "Determines the offset of the first character of the given line.",
                "int getLineOfOffset(int pos)": "Returns the number of the line at which the character of the specified position is located.",
                "int getNumberOfLines()": "Returns the number of lines in this document.",
                "int getNumberOfLines(int offset, int length)": "Returns the number of lines which are occupied by a given text range.",
                "ITypedRegion getPartition(int offset)": "Returns the document partition in which the position is located.",
                "String[] getPositionCategories()": "Returns all position categories of this document.",
                "Position[] getPositions(String category)": "Returns all positions of the given position category.",
                "IPositionUpdater[] getPositionUpdaters()": "Returns the list of position updaters attached to the document.",
                "ITextStore getStore()": "Returns the document's text store.",
                "ILineTracker getTracker()": "Returns the document's line tracker.",
                "void insertPositionUpdater(IPositionUpdater updater, int index)": "Inserts the position updater at the specified index in the document's list of position updaters.",
                "void registerPostNotificationReplace(IDocumentListener owner, IDocumentExtension.IReplace replace)": "Callback for document listeners to be used inside documentChanged to register a post notification replace operation on the document notifying them.",
                "void removeDocumentListener(IDocumentListener listener)": "Removes the listener from the document's list of document listeners.",
                "void removeDocumentPartitioningListener(IDocumentPartitioningListener listener)": "Removes the listener from this document's list of document partitioning listeners.",
                "void removePosition(Position position)": "Removes the given position from the document's default position category.",
                "void removePosition(String category, Position position)": "Removes the given position from the specified position category.",
                "void removePositionCategory(String category)": "Deletes the position category from the document.",
                "void removePositionUpdater(IPositionUpdater updater)": "Removes the position updater from the document's list of position updaters.",
                "void removePrenotifiedDocumentListener(IDocumentListener listener)": "Removes the given document listener from the document's list of prenotified document listeners.",
                "void replace(int pos, int length, String text)": "Substitutes the given text for the specified document range.",
                "void resumePostNotificationProcessing()": "Resumes the processing of post notification replace operations.",
                "int search(int startPosition, String findString, boolean forwardSearch, boolean caseSensitive, boolean wholeWord)": "Returns the offset of a given search string in the document based on a set of search criteria.",
                "void set(String text)": "Replaces the content of the document with the given text.",
                "void setDocumentPartitioner(IDocumentPartitioner partitioner)": "Sets this document's partitioner.",
                "void setLineTracker(ILineTracker tracker)": "Sets the document's line tracker.",
                "void setTextStore(ITextStore store)": "Sets the document's text store.",
                "void stopPostNotificationProcessing()": "Stops the processing of registered post notification replace operations until resumePostNotificationProcessing is called.",
                "void updateDocumentStructures(DocumentEvent event)": "Updates document partitioning and document positions according to the specification given by the document event.",
                "void updatePositions(DocumentEvent event)": "Updates all positions of all categories to the change described by the document event."
            },
            "super class": [
                "org.eclipse.jface.text.AbstractDocument"
            ]
        }
    },
    "org.apache.http.client.methods.HttpRequestBase": {
        "org.apache.http.client.methods.HttpRequestBase": {
            "class": "HttpRequestBase",
            "category": "Class",
            "methods": {
                "RequestConfig getConfig()": "Returns actual request configuration.",
                "String getMethod()": "Returns the HTTP method this request uses, such as GET, PUT, POST, or other.",
                "ProtocolVersion getProtocolVersion()": "",
                "RequestLine getRequestLine()": "",
                "URI getURI()": "Returns the original request URI.",
                "void releaseConnection()": "A convenience method to simplify migration from HttpClient 3.1 API.",
                "void setConfig(RequestConfig config)": "",
                "void setProtocolVersion(ProtocolVersion version)": "",
                "void setURI(URI uri)": "",
                "void started()": "",
                "String toString()": "",
                "void abort()": "Aborts this http request.",
                "Object clone()": "",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.client.methods.AbstractExecutionAwareRequest",
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "java.util.AbstractSequentialList": {
        "java.util.AbstractSequentialList": {
            "class": "AbstractSequentialList",
            "category": "Class",
            "methods": {
                "void add(int index, E element)": "Inserts the specified element at the specified position in this list (optional operation).",
                "boolean addAll(int index, Collection c)": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).",
                "E get(int index)": "Returns the element at the specified position in this list.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "ListIterator listIterator(int index)": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.",
                "E remove(int index)": "Removes the element at the specified position in this list (optional operation).",
                "E set(int index, E element)": "Replaces the element at the specified position in this list with the specified element (optional operation).",
                "boolean add(E e)": "Appends the specified element to the end of this list (optional operation).",
                "void clear()": "Removes all of the elements from this list (optional operation).",
                "boolean equals(Object o)": "Compares the specified object with this list for equality.",
                "int hashCode()": "Returns the hash code value for this list.",
                "int indexOf(Object o)": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "int lastIndexOf(Object o)": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "ListIterator listIterator()": "Returns a list iterator over the elements in this list (in proper sequence).",
                "void removeRange(int fromIndex, int toIndex)": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
                "List subList(int fromIndex, int toIndex)": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
                "boolean addAll(Collection c)": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).",
                "boolean contains(Object o)": "Returns true if this list contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this list contains all of the elements of the specified collection.",
                "boolean isEmpty()": "Returns true if this list contains no elements.",
                "boolean remove(Object o)": "Removes the first occurrence of the specified element from this list, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
                "boolean retainAll(Collection c)": "Retains only the elements in this list that are contained in the specified collection (optional operation).",
                "int size()": "Returns the number of elements in this list.",
                "Object[] toArray()": "Returns an array containing all of the elements in this list in proper sequence (from first to last element).",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                "String toString()": "Returns a string representation of this collection.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "void replaceAll(UnaryOperator operator)": "Replaces each element of this list with the result of applying the operator to that element.",
                "void sort(Comparator c)": "Sorts this list according to the order induced by the specified Comparator.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.AbstractList",
                "java.util.AbstractCollection",
                "java.util.Collection",
                "java.util.List",
                "java.lang.Iterable"
            ]
        }
    },
    "javax.swing.JComponent": {
        "javax.swing.JComponent": {
            "class": "JComponent",
            "category": "Class",
            "methods": {
                "void addAncestorListener(AncestorListener listener)": "Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible.",
                "void addNotify()": "Makes this Component displayable by connecting it to a native screen resource.",
                "void addVetoableChangeListener(VetoableChangeListener listener)": "Adds a VetoableChangeListener to the listener list.",
                "void computeVisibleRect(Rectangle visibleRect)": "Returns the Component's \"visible rect rectangle\" - the intersection of the visible rectangles for this component and all of its ancestors.",
                "boolean contains(int x, int y)": "Checks whether this component \"contains\" the specified point, where x and y are defined to be relative to the coordinate system of this component.",
                "JToolTip createToolTip()": "Returns the instance of JToolTip that should be used to display the tooltip.",
                "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
                "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
                "void fireVetoableChange(String propertyName, Object oldValue, Object newValue)": "Supports reporting constrained property changes.",
                "ActionListener getActionForKeyStroke(KeyStroke aKeyStroke)": "Returns the object that will perform the action registered for a given keystroke.",
                "ActionMap getActionMap()": "Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding.",
                "float getAlignmentX()": "Returns the alignment along the x axis.",
                "float getAlignmentY()": "Returns the alignment along the y axis.",
                "AncestorListener[] getAncestorListeners()": "Returns an array of all the ancestor listeners registered on this component.",
                "boolean getAutoscrolls()": "Gets the autoscrolls property.",
                "int getBaseline(int width, int height)": "Returns the baseline.",
                "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
                "Border getBorder()": "Returns the border of this component or null if no border is currently set.",
                "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and return rv.",
                "Object getClientProperty(Object key)": "Returns the value of the property with the specified key.",
                "Graphics getComponentGraphics(Graphics g)": "Returns the graphics object used to paint this component.",
                "JPopupMenu getComponentPopupMenu()": "Returns JPopupMenu that assigned for this component.",
                "int getConditionForKeyStroke(KeyStroke aKeyStroke)": "Returns the condition that determines whether a registered action occurs in response to the specified keystroke.",
                "int getDebugGraphicsOptions()": "Returns the state of graphics debugging.",
                "Locale getDefaultLocale()": "Returns the default locale used to initialize each JComponent's locale property upon creation.",
                "FontMetrics getFontMetrics(Font font)": "Gets the font metrics for the specified font.",
                "Graphics getGraphics()": "Creates a graphics context for this component.",
                "int getHeight()": "Returns the current height of this component.",
                "boolean getInheritsPopupMenu()": "Returns true if the JPopupMenu should be inherited from the parent.",
                "InputMap getInputMap()": "Returns the InputMap that is used when the component has focus.",
                "InputMap getInputMap(int condition)": "Returns the InputMap that is used during condition.",
                "InputVerifier getInputVerifier()": "Returns the input verifier for this component.",
                "Insets getInsets()": "Determines the insets of this container, which indicate the size of the container's border.",
                "Insets getInsets(Insets insets)": "Returns an Insets object containing this component's inset values.",
                "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this Component.",
                "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and return rv.",
                "Dimension getMaximumSize()": "Gets the maximum size of this component.",
                "Dimension getMinimumSize()": "Gets the minimum size of this component.",
                "Point getPopupLocation(MouseEvent event)": "Returns the preferred location to display the popup menu in this component's coordinate system.",
                "Dimension getPreferredSize()": "Gets the preferred size of this component.",
                "KeyStroke[] getRegisteredKeyStrokes()": "Returns the KeyStrokes that will initiate registered actions.",
                "JRootPane getRootPane()": "Returns the JRootPane ancestor for this component.",
                "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and return rv.",
                "Point getToolTipLocation(MouseEvent event)": "Returns the tooltip location in this component's coordinate system.",
                "String getToolTipText()": "Returns the tooltip string that has been set with setToolTipText.",
                "String getToolTipText(MouseEvent event)": "Returns the string to be used as the tooltip for event.",
                "Container getTopLevelAncestor()": "Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.",
                "TransferHandler getTransferHandler()": "Gets the transferHandler property.",
                "String getUIClassID()": "Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component.",
                "boolean getVerifyInputWhenFocusTarget()": "Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.",
                "VetoableChangeListener[] getVetoableChangeListeners()": "Returns an array of all the vetoable change listeners registered on this component.",
                "Rectangle getVisibleRect()": "Returns the Component's \"visible rectangle\" - the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.",
                "int getWidth()": "Returns the current width of this component.",
                "int getX()": "Returns the current x coordinate of the components origin.",
                "int getY()": "Returns the current y coordinate of the components origin.",
                "void grabFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean isDoubleBuffered()": "Returns true if this component is painted to an offscreen image (\"buffer\") that's copied to the screen later.",
                "boolean isLightweightComponent(Component c)": "Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.",
                "boolean isOpaque()": "Returns true if this component is completely opaque, returns false by default.",
                "boolean isOptimizedDrawingEnabled()": "Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap.",
                "boolean isPaintingForPrint()": "Returns true if the current painting operation on this component is part of a print operation.",
                "boolean isPaintingOrigin()": "Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors.",
                "boolean isPaintingTile()": "Returns true if the component is currently painting a tile.",
                "boolean isRequestFocusEnabled()": "Returns true if this JComponent should get focus; otherwise returns false.",
                "boolean isValidateRoot()": "Indicates if this container is a validate root.",
                "void paint(Graphics g)": "Paints this component.",
                "void paintBorder(Graphics g)": "Paints the component's border.",
                "void paintChildren(Graphics g)": "Paints this component's children.",
                "void paintComponent(Graphics g)": "Calls the UI delegate's paint method, if the UI delegate is non-null.",
                "void paintImmediately(int x, int y, int w, int h)": "Paints the specified region in this component and all of its descendants that overlap the region, immediately.",
                "void paintImmediately(Rectangle r)": "Paints the specified region now.",
                "String paramString()": "Returns a string representing the state of this component.",
                "void print(Graphics g)": "Prints this component.",
                "void printAll(Graphics g)": "Prints this component and all of its subcomponents.",
                "void printBorder(Graphics g)": "Prints the component's border.",
                "void printChildren(Graphics g)": "Prints this component's children.",
                "void printComponent(Graphics g)": "This is invoked during a printing operation.",
                "void processComponentKeyEvent(KeyEvent e)": "Processes any key events that the component itself recognizes.",
                "boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)": "Invoked to process the key bindings for ks as the result of the KeyEvent e.",
                "void processKeyEvent(KeyEvent e)": "Processes key events occurring on this component by dispatching them to any registered KeyListener objects.",
                "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects.",
                "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.",
                "void putClientProperty(Object key, Object value)": "Adds an arbitrary key/value \"client property\" to this component.",
                "void registerKeyboardAction(ActionListener anAction, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void registerKeyboardAction(ActionListener anAction, String aCommand, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void removeAncestorListener(AncestorListener listener)": "Unregisters listener so that it will no longer receive AncestorEvents.",
                "void removeNotify()": "Makes this Component undisplayable by destroying it native screen resource.",
                "void removeVetoableChangeListener(VetoableChangeListener listener)": "Removes a VetoableChangeListener from the listener list.",
                "void repaint(long tm, int x, int y, int width, int height)": "Repaints the specified rectangle of this component within tm milliseconds.",
                "void repaint(Rectangle r)": "Adds the specified region to the dirty region list if the component is showing.",
                "void requestFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocus(boolean temporary)": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocusInWindow()": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "void resetKeyboardActions()": "Unregisters all the bindings in the first tier InputMaps and ActionMap.",
                "void revalidate()": "Revalidates the component hierarchy up to the nearest validate root.",
                "void scrollRectToVisible(Rectangle aRect)": "Forwards the scrollRectToVisible() message to the JComponent's parent.",
                "void setActionMap(ActionMap am)": "Sets the ActionMap to am.",
                "void setAlignmentX(float alignmentX)": "Sets the the vertical alignment.",
                "void setAlignmentY(float alignmentY)": "Sets the the horizontal alignment.",
                "void setAutoscrolls(boolean autoscrolls)": "Sets the autoscrolls property.",
                "void setBackground(Color bg)": "Sets the background color of this component.",
                "void setBorder(Border border)": "Sets the border of this component.",
                "void setComponentPopupMenu(JPopupMenu popup)": "Sets the JPopupMenu for this JComponent.",
                "void setDebugGraphicsOptions(int debugOptions)": "Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.",
                "void setDefaultLocale(Locale l)": "Sets the default locale used to initialize each JComponent's locale property upon creation.",
                "void setDoubleBuffered(boolean aFlag)": "Sets whether this component should use a buffer to paint.",
                "void setEnabled(boolean enabled)": "Sets whether or not this component is enabled.",
                "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
                "void setFont(Font font)": "Sets the font for this component.",
                "void setForeground(Color fg)": "Sets the foreground color of this component.",
                "void setInheritsPopupMenu(boolean value)": "Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it.",
                "void setInputMap(int condition, InputMap map)": "Sets the InputMap to use under the condition condition to map.",
                "void setInputVerifier(InputVerifier inputVerifier)": "Sets the input verifier for this component.",
                "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
                "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
                "void setOpaque(boolean isOpaque)": "If true the component paints every pixel within its bounds.",
                "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component to a constant value.",
                "void setRequestFocusEnabled(boolean requestFocusEnabled)": "Provides a hint as to whether or not this JComponent should get focus.",
                "void setToolTipText(String text)": "Registers the text to display in a tool tip.",
                "void setTransferHandler(TransferHandler newHandler)": "Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop.",
                "void setUI(ComponentUI newUI)": "Sets the look and feel delegate for this component.",
                "void setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget)": "Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.",
                "void setVisible(boolean aFlag)": "Makes the component visible or invisible.",
                "void unregisterKeyboardAction(KeyStroke aKeyStroke)": "This method is now obsolete.",
                "void update(Graphics g)": "Updates this component.",
                "void updateUI()": "Resets the UI property to a value from the current look and feel.",
                "Component add(Component comp)": "Appends the specified component to the end of this container.",
                "Component add(Component comp, int index)": "Adds the specified component to this container at the given position.",
                "void add(Component comp, Object constraints)": "Adds the specified component to the end of this container.",
                "void add(Component comp, Object constraints, int index)": "Adds the specified component to this container with the specified constraints at the specified index.",
                "Component add(String name, Component comp)": "Adds the specified component to this container.",
                "void addContainerListener(ContainerListener l)": "Adds the specified container listener to receive container events from this container.",
                "void addImpl(Component comp, Object constraints, int index)": "Adds the specified component to this container at the specified index.",
                "void addPropertyChangeListener(PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list.",
                "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list for a specific property.",
                "void applyComponentOrientation(ComponentOrientation o)": "Sets the ComponentOrientation property of this container and all components contained within it.",
                "boolean areFocusTraversalKeysSet(int id)": "Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component.",
                "void doLayout()": "Prompts the layout manager to lay out this component.",
                "Component findComponentAt(int x, int y)": "Locates the visible child component that contains the specified position.",
                "Component findComponentAt(Point p)": "Locates the visible child component that contains the specified point.",
                "Component getComponent(int n)": "Gets the nth component in this container.",
                "Component getComponentAt(int x, int y)": "Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component.",
                "Component getComponentAt(Point p)": "Returns the component or subcomponent that contains the specified point.",
                "int getComponentCount()": "Gets the number of components in this panel.",
                "Component[] getComponents()": "Gets all the components in this container.",
                "int getComponentZOrder(Component comp)": "Returns the z-order index of the component inside the container.",
                "ContainerListener[] getContainerListeners()": "Returns an array of all the container listeners registered on this container.",
                "Set getFocusTraversalKeys(int id)": "Returns the Set of focus traversal keys for a given traversal operation for this Component.",
                "FocusTraversalPolicy getFocusTraversalPolicy()": "Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root.",
                "LayoutManager getLayout()": "Gets the layout manager for this container.",
                "Point getMousePosition(boolean allowChildren)": "Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null.",
                "void invalidate()": "Invalidates this component and its ancestors.",
                "boolean isAncestorOf(Component c)": "Checks if the component is contained in the component hierarchy of this container.",
                "boolean isFocusCycleRoot()": "Returns whether this Container is the root of a focus traversal cycle.",
                "boolean isFocusCycleRoot(Container container)": "Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle.",
                "boolean isFocusTraversalPolicyProvider()": "Returns whether this container provides focus traversal policy.",
                "boolean isFocusTraversalPolicySet()": "Returns whether the focus traversal policy has been explicitly set for this Container.",
                "void list(PrintStream out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print stream.",
                "void list(PrintWriter out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print writer.",
                "void paintComponents(Graphics g)": "Paints each of the components in this container.",
                "void printComponents(Graphics g)": "Prints each of the components in this container.",
                "void processContainerEvent(ContainerEvent e)": "Processes container events occurring on this container by dispatching them to any registered ContainerListener objects.",
                "void processEvent(AWTEvent e)": "Processes events occurring on this component.",
                "void remove(Component comp)": "Removes the specified component from this container.",
                "void remove(int index)": "Removes the component, specified by index, from this container.",
                "void removeAll()": "Removes all the components from this container.",
                "void removeContainerListener(ContainerListener l)": "Removes the specified container listener so it no longer receives container events from this container.",
                "void setComponentZOrder(Component comp, int index)": "Moves the specified component to the specified z-order index in the container.",
                "void setFocusCycleRoot(boolean focusCycleRoot)": "Sets whether this Container is the root of a focus traversal cycle.",
                "void setFocusTraversalPolicy(FocusTraversalPolicy policy)": "Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root.",
                "void setFocusTraversalPolicyProvider(boolean provider)": "Sets whether this container will be used to provide focus traversal policy.",
                "void setFont(Font f)": "Sets the font of this component.",
                "void setLayout(LayoutManager mgr)": "Sets the layout manager for this container.",
                "void transferFocusDownCycle()": "Transfers the focus down one focus traversal cycle.",
                "void validate()": "Validates this component.",
                "void validateTree()": "Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid).",
                "void add(PopupMenu popup)": "Adds the specified popup menu to the component.",
                "void addComponentListener(ComponentListener l)": "Adds the specified component listener to receive component events from this component.",
                "void addFocusListener(FocusListener l)": "Adds the specified focus listener to receive focus events from this component when this component gains input focus.",
                "void addHierarchyBoundsListener(HierarchyBoundsListener l)": "Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.",
                "void addHierarchyListener(HierarchyListener l)": "Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.",
                "void addInputMethodListener(InputMethodListener l)": "Adds the specified input method listener to receive input method events from this component.",
                "void addKeyListener(KeyListener l)": "Adds the specified key listener to receive key events from this component.",
                "void addMouseListener(MouseListener l)": "Adds the specified mouse listener to receive mouse events from this component.",
                "void addMouseMotionListener(MouseMotionListener l)": "Adds the specified mouse motion listener to receive mouse motion events from this component.",
                "void addMouseWheelListener(MouseWheelListener l)": "Adds the specified mouse wheel listener to receive mouse wheel events from this component.",
                "void applyComponentOrientation(ComponentOrientation orientation)": "Sets the ComponentOrientation property of this component and all components contained within it.",
                "int checkImage(Image image, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "int checkImage(Image image, int width, int height, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)": "Potentially coalesce an event being posted with an existing event.",
                "boolean contains(Point p)": "Checks whether this component \"contains\" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.",
                "Image createImage(ImageProducer producer)": "Creates an image from the specified image producer.",
                "Image createImage(int width, int height)": "Creates an off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height)": "Creates a volatile off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height, ImageCapabilities caps)": "Creates a volatile off-screen drawable image, with the given capabilities.",
                "void disableEvents(long eventsToDisable)": "Disables the events defined by the specified event mask parameter from being delivered to this component.",
                "void dispatchEvent(AWTEvent e)": "Dispatches an event to this component or one of its sub components.",
                "void enableEvents(long eventsToEnable)": "Enables the events defined by the specified event mask parameter to be delivered to this component.",
                "void enableInputMethods(boolean enable)": "Enables or disables input method support for this component.",
                "void firePropertyChange(String propertyName, byte oldValue, byte newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, double oldValue, double newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, float oldValue, float newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, long oldValue, long newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, Object oldValue, Object newValue)": "Support for reporting bound property changes for Object properties.",
                "void firePropertyChange(String propertyName, short oldValue, short newValue)": "Reports a bound property change.",
                "AccessibleContext getAccessibleContext()": "Gets the AccessibleContext associated with this Component.",
                "Color getBackground()": "Gets the background color of this component.",
                "Rectangle getBounds()": "Gets the bounds of this component in the form of a Rectangle object.",
                "ColorModel getColorModel()": "Gets the instance of ColorModel used to display the component on the output device.",
                "ComponentListener[] getComponentListeners()": "Returns an array of all the component listeners registered on this component.",
                "ComponentOrientation getComponentOrientation()": "Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "Cursor getCursor()": "Gets the cursor set in the component.",
                "DropTarget getDropTarget()": "Gets the DropTarget associated with this Component.",
                "Container getFocusCycleRootAncestor()": "Returns the Container which is the focus cycle root of this Component's focus traversal cycle.",
                "FocusListener[] getFocusListeners()": "Returns an array of all the focus listeners registered on this component.",
                "boolean getFocusTraversalKeysEnabled()": "Returns whether focus traversal keys are enabled for this Component.",
                "Font getFont()": "Gets the font of this component.",
                "Color getForeground()": "Gets the foreground color of this component.",
                "GraphicsConfiguration getGraphicsConfiguration()": "Gets the GraphicsConfiguration associated with this Component.",
                "HierarchyBoundsListener[] getHierarchyBoundsListeners()": "Returns an array of all the hierarchy bounds listeners registered on this component.",
                "HierarchyListener[] getHierarchyListeners()": "Returns an array of all the hierarchy listeners registered on this component.",
                "boolean getIgnoreRepaint()": "",
                "InputContext getInputContext()": "Gets the input context used by this component for handling the communication with input methods when text is entered in this component.",
                "InputMethodListener[] getInputMethodListeners()": "Returns an array of all the input method listeners registered on this component.",
                "InputMethodRequests getInputMethodRequests()": "Gets the input method request handler which supports requests from input methods for this component.",
                "KeyListener[] getKeyListeners()": "Returns an array of all the key listeners registered on this component.",
                "Locale getLocale()": "Gets the locale of this component.",
                "Point getLocation()": "Gets the location of this component in the form of a point specifying the component's top-left corner.",
                "Point getLocationOnScreen()": "Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.",
                "MouseListener[] getMouseListeners()": "Returns an array of all the mouse listeners registered on this component.",
                "MouseMotionListener[] getMouseMotionListeners()": "Returns an array of all the mouse motion listeners registered on this component.",
                "Point getMousePosition()": "Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null.",
                "MouseWheelListener[] getMouseWheelListeners()": "Returns an array of all the mouse wheel listeners registered on this component.",
                "String getName()": "Gets the name of the component.",
                "Container getParent()": "Gets the parent of this component.",
                "PropertyChangeListener[] getPropertyChangeListeners()": "Returns an array of all the property change listeners registered on this component.",
                "PropertyChangeListener[] getPropertyChangeListeners(String propertyName)": "Returns an array of all the listeners which have been associated with the named property.",
                "Dimension getSize()": "Returns the size of this component in the form of a Dimension object.",
                "Toolkit getToolkit()": "Gets the toolkit of this component.",
                "Object getTreeLock()": "Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.",
                "boolean hasFocus()": "Returns true if this Component is the focus owner.",
                "boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)": "Repaints the component when the image has changed.",
                "boolean isBackgroundSet()": "Returns whether the background color has been explicitly set for this Component.",
                "boolean isCursorSet()": "Returns whether the cursor has been explicitly set for this Component.",
                "boolean isDisplayable()": "Determines whether this component is displayable.",
                "boolean isEnabled()": "Determines whether this component is enabled.",
                "boolean isFocusable()": "Returns whether this Component can be focused.",
                "boolean isFocusOwner()": "Returns true if this Component is the focus owner.",
                "boolean isFontSet()": "Returns whether the font has been explicitly set for this Component.",
                "boolean isForegroundSet()": "Returns whether the foreground color has been explicitly set for this Component.",
                "boolean isLightweight()": "A lightweight component doesn't have a native toolkit peer.",
                "boolean isMaximumSizeSet()": "Returns true if the maximum size has been set to a non-null value otherwise returns false.",
                "boolean isMinimumSizeSet()": "Returns whether or not setMinimumSize has been invoked with a non-null value.",
                "boolean isPreferredSizeSet()": "Returns true if the preferred size has been set to a non-null value otherwise returns false.",
                "boolean isShowing()": "Determines whether this component is showing on screen.",
                "boolean isValid()": "Determines whether this component is valid.",
                "boolean isVisible()": "Determines whether this component should be visible when its parent is visible.",
                "void list()": "Prints a listing of this component to the standard system output stream System.out.",
                "void list(PrintStream out)": "Prints a listing of this component to the specified output stream.",
                "void list(PrintWriter out)": "Prints a listing to the specified print writer.",
                "void paintAll(Graphics g)": "Paints this component and all of its subcomponents.",
                "boolean prepareImage(Image image, ImageObserver observer)": "Prepares an image for rendering on this component.",
                "boolean prepareImage(Image image, int width, int height, ImageObserver observer)": "Prepares an image for rendering on this component at the specified width and height.",
                "void processComponentEvent(ComponentEvent e)": "Processes component events occurring on this component by dispatching them to any registered ComponentListener objects.",
                "void processFocusEvent(FocusEvent e)": "Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.",
                "void processHierarchyBoundsEvent(HierarchyEvent e)": "Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects.",
                "void processHierarchyEvent(HierarchyEvent e)": "Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects.",
                "void processInputMethodEvent(InputMethodEvent e)": "Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.",
                "void processMouseWheelEvent(MouseWheelEvent e)": "Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects.",
                "void remove(MenuComponent popup)": "Removes the specified popup menu from the component.",
                "void removeComponentListener(ComponentListener l)": "Removes the specified component listener so that it no longer receives component events from this component.",
                "void removeFocusListener(FocusListener l)": "Removes the specified focus listener so that it no longer receives focus events from this component.",
                "void removeHierarchyBoundsListener(HierarchyBoundsListener l)": "Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.",
                "void removeHierarchyListener(HierarchyListener l)": "Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.",
                "void removeInputMethodListener(InputMethodListener l)": "Removes the specified input method listener so that it no longer receives input method events from this component.",
                "void removeKeyListener(KeyListener l)": "Removes the specified key listener so that it no longer receives key events from this component.",
                "void removeMouseListener(MouseListener l)": "Removes the specified mouse listener so that it no longer receives mouse events from this component.",
                "void removeMouseMotionListener(MouseMotionListener l)": "Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.",
                "void removeMouseWheelListener(MouseWheelListener l)": "Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.",
                "void removePropertyChangeListener(PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list.",
                "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list for a specific property.",
                "void repaint()": "Repaints this component.",
                "void repaint(int x, int y, int width, int height)": "Repaints the specified rectangle of this component.",
                "void repaint(long tm)": "Repaints the component.",
                "void setBackground(Color c)": "Sets the background color of this component.",
                "void setBounds(int x, int y, int width, int height)": "Moves and resizes this component.",
                "void setBounds(Rectangle r)": "Moves and resizes this component to conform to the new bounding rectangle r.",
                "void setComponentOrientation(ComponentOrientation o)": "Sets the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "void setCursor(Cursor cursor)": "Sets the cursor image to the specified cursor.",
                "void setDropTarget(DropTarget dt)": "Associate a DropTarget with this component.",
                "void setEnabled(boolean b)": "Enables or disables this component, depending on the value of the parameter b.",
                "void setFocusable(boolean focusable)": "Sets the focusable state of this Component to the specified value.",
                "void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)": "Sets whether focus traversal keys are enabled for this Component.",
                "void setForeground(Color c)": "Sets the foreground color of this component.",
                "void setIgnoreRepaint(boolean ignoreRepaint)": "Sets whether or not paint messages received from the operating system should be ignored.",
                "void setLocale(Locale l)": "Sets the locale of this component.",
                "void setLocation(int x, int y)": "Moves this component to a new location.",
                "void setLocation(Point p)": "Moves this component to a new location.",
                "void setName(String name)": "Sets the name of the component to the specified string.",
                "void setSize(Dimension d)": "Resizes this component so that it has width d.width and height d.height.",
                "void setSize(int width, int height)": "Resizes this component so that it has width width and height height.",
                "void setVisible(boolean b)": "Shows or hides this component depending on the value of parameter b.",
                "String toString()": "Returns a string representation of this component and its values.",
                "void transferFocus()": "Transfers the focus to the next component, as though this Component were the focus owner.",
                "void transferFocusBackward()": "Transfers the focus to the previous component, as though this Component were the focus owner.",
                "void transferFocusUpCycle()": "Transfers the focus up one focus traversal cycle."
            },
            "super class": [
                "java.awt.Container",
                "java.awt.Component"
            ]
        }
    },
    "org.apache.http.message.AbstractHttpMessage": {
        "org.apache.http.message.AbstractHttpMessage": {
            "class": "AbstractHttpMessage",
            "category": "Class",
            "methods": {
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": []
        }
    },
    "java.util.AbstractList": {
        "java.util.AbstractList": {
            "class": "AbstractList",
            "category": "Class",
            "methods": {
                "boolean add(E e)": "Appends the specified element to the end of this list (optional operation).",
                "void add(int index, E element)": "Inserts the specified element at the specified position in this list (optional operation).",
                "boolean addAll(int index, Collection c)": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).",
                "void clear()": "Removes all of the elements from this list (optional operation).",
                "boolean equals(Object o)": "Compares the specified object with this list for equality.",
                "E get(int index)": "Returns the element at the specified position in this list.",
                "int hashCode()": "Returns the hash code value for this list.",
                "int indexOf(Object o)": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "int lastIndexOf(Object o)": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "ListIterator listIterator()": "Returns a list iterator over the elements in this list (in proper sequence).",
                "ListIterator listIterator(int index)": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.",
                "E remove(int index)": "Removes the element at the specified position in this list (optional operation).",
                "void removeRange(int fromIndex, int toIndex)": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
                "E set(int index, E element)": "Replaces the element at the specified position in this list with the specified element (optional operation).",
                "List subList(int fromIndex, int toIndex)": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
                "boolean addAll(Collection c)": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).",
                "boolean contains(Object o)": "Returns true if this list contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this list contains all of the elements of the specified collection.",
                "boolean isEmpty()": "Returns true if this list contains no elements.",
                "boolean remove(Object o)": "Removes the first occurrence of the specified element from this list, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
                "boolean retainAll(Collection c)": "Retains only the elements in this list that are contained in the specified collection (optional operation).",
                "int size()": "Returns the number of elements in this list.",
                "Object[] toArray()": "Returns an array containing all of the elements in this list in proper sequence (from first to last element).",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                "String toString()": "Returns a string representation of this collection.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "void replaceAll(UnaryOperator operator)": "Replaces each element of this list with the result of applying the operator to that element.",
                "void sort(Comparator c)": "Sorts this list according to the order induced by the specified Comparator.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.AbstractCollection",
                "java.util.Collection",
                "java.util.List",
                "java.lang.Iterable"
            ]
        }
    },
    "gnu.trove.TIntObjectHashMap": {
        "gnu.trove.TIntObjectHashMap": {
            "class": "TIntObjectHashMap",
            "category": "Class",
            "methods": {
                "TIntObjectHashMap<V> clone()": "",
                "boolean containsKey(int key)": "Checks for the presence of key in the keys of the map.",
                "boolean containsValue(V val)": "Checks for the presence of val in the values of the map.",
                "boolean equals(java.lang.Object other)": "Compares this map with another map for equality of their stored entries.",
                "boolean forEachEntry(TIntObjectProcedure<V> procedure)": "Executes procedure for each key/value entry in the map.",
                "boolean forEachKey(TIntProcedure procedure)": "Executes procedure for each key in the map.",
                "boolean forEachValue(TObjectProcedure<V> procedure)": "Executes procedure for each value in the map.",
                "V get(int key)": "Retrieves the value for key.",
                "java.lang.Object[] getValues()": "Returns the values of the map.",
                "<T> T[] getValues(T[] a)": "Return the values of the map; the runtime type of the returned array is that of the specified array.",
                "int hashCode()": "",
                "TIntObjectIterator<V> iterator()": "",
                "int[] keys()": "Returns the keys of the map.",
                "V put(int key, V value)": "Inserts a key/value pair into the map.",
                "void readExternal(java.io.ObjectInput in)": "",
                "protected void rehash(int newCapacity)": "Rehashes the map to the new capacity.",
                "V remove(int key)": "Deletes a key/value pair from the map.",
                "void removeAt(int index)": "Delete the record at index.",
                "boolean retainEntries(TIntObjectProcedure<V> procedure)": "Retains only those entries in the map for which the procedure returns a true value.",
                "int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1.",
                "void transformValues(TObjectFunction<V,V> function)": "Transform the values in this map using function.",
                "void writeExternal(java.io.ObjectOutput out)": "",
                "int calculateGrownCapacity()": "",
                "abstract int capacity()": "",
                "void clear()": "Empties the collection.",
                "java.lang.Object clone()": "",
                "void compact()": "Compresses the hashtable to the minimum prime size (as defined by PrimeFinder) that will hold all of the elements currently in the table.",
                "void ensureCapacity(int desiredCapacity)": "Ensure that this hashtable has sufficient capacity to hold desiredCapacity additional elements without requiring a rehash.",
                "float getAutoCompactionFactor()": "",
                "boolean isEmpty()": "Tells whether this set is currently holding any elements.",
                "void postInsertHook(boolean usedFreeSlot)": "After an insert, this hook is called to adjust the size/free values of the set and to perform rehashing if necessary.",
                "void reenableAutoCompaction(boolean check_for_compaction)": "Re-enable auto-compaction after it was disabled via tempDisableAutoCompaction().",
                "abstract void rehash(int newCapacity)": "Rehashes the set.",
                "void setAutoCompactionFactor(float factor)": "The auto-compaction factor controls whether and when a table performs a compact() automatically after a certain number of remove operations.",
                "int size()": "Returns the number of distinct elements in this collection.",
                "void tempDisableAutoCompaction()": "Temporarily disables auto-compaction.",
                "void trimToSize()": "This simply calls compact.",
                "int capacity()": "Returns the capacity of the hash table.",
                "int computeHashCode(int val)": "Default implementation of TIntHashingStrategy: delegates hashing to HashFunctions.hash(int).",
                "boolean contains(int val)": "Searches the set for val.",
                "boolean forEach(TIntProcedure procedure)": "Executes procedure for each element in the set.",
                "protected int index(int val)": "Locates the index of val.",
                "protected int insertionIndex(int val)": "Locates the index at which val can be inserted.",
                "protected void removeAt(int index)": "Releases the element currently stored at index.",
                "protected int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1."
            },
            "super class": [
                "gnu.trove.THash",
                "gnu.trove.TPrimitiveHash",
                "gnu.trove.TIntHash"
            ]
        }
    },
    "java.awt.Component": {
        "java.awt.Component": {
            "class": "Component",
            "category": "Class",
            "methods": {
                "void add(PopupMenu popup)": "Adds the specified popup menu to the component.",
                "void addComponentListener(ComponentListener l)": "Adds the specified component listener to receive component events from this component.",
                "void addFocusListener(FocusListener l)": "Adds the specified focus listener to receive focus events from this component when this component gains input focus.",
                "void addHierarchyBoundsListener(HierarchyBoundsListener l)": "Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.",
                "void addHierarchyListener(HierarchyListener l)": "Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.",
                "void addInputMethodListener(InputMethodListener l)": "Adds the specified input method listener to receive input method events from this component.",
                "void addKeyListener(KeyListener l)": "Adds the specified key listener to receive key events from this component.",
                "void addMouseListener(MouseListener l)": "Adds the specified mouse listener to receive mouse events from this component.",
                "void addMouseMotionListener(MouseMotionListener l)": "Adds the specified mouse motion listener to receive mouse motion events from this component.",
                "void addMouseWheelListener(MouseWheelListener l)": "Adds the specified mouse wheel listener to receive mouse wheel events from this component.",
                "void addNotify()": "Makes this Component displayable by connecting it to a native screen resource.",
                "void addPropertyChangeListener(PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list.",
                "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list for a specific property.",
                "void applyComponentOrientation(ComponentOrientation orientation)": "Sets the ComponentOrientation property of this component and all components contained within it.",
                "boolean areFocusTraversalKeysSet(int id)": "Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component.",
                "int checkImage(Image image, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "int checkImage(Image image, int width, int height, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)": "Potentially coalesce an event being posted with an existing event.",
                "boolean contains(int x, int y)": "Checks whether this component \"contains\" the specified point, where x and y are defined to be relative to the coordinate system of this component.",
                "boolean contains(Point p)": "Checks whether this component \"contains\" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.",
                "Image createImage(ImageProducer producer)": "Creates an image from the specified image producer.",
                "Image createImage(int width, int height)": "Creates an off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height)": "Creates a volatile off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height, ImageCapabilities caps)": "Creates a volatile off-screen drawable image, with the given capabilities.",
                "void disableEvents(long eventsToDisable)": "Disables the events defined by the specified event mask parameter from being delivered to this component.",
                "void dispatchEvent(AWTEvent e)": "Dispatches an event to this component or one of its sub components.",
                "void doLayout()": "Prompts the layout manager to lay out this component.",
                "void enableEvents(long eventsToEnable)": "Enables the events defined by the specified event mask parameter to be delivered to this component.",
                "void enableInputMethods(boolean enable)": "Enables or disables input method support for this component.",
                "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
                "void firePropertyChange(String propertyName, byte oldValue, byte newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, double oldValue, double newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, float oldValue, float newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
                "void firePropertyChange(String propertyName, long oldValue, long newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, Object oldValue, Object newValue)": "Support for reporting bound property changes for Object properties.",
                "void firePropertyChange(String propertyName, short oldValue, short newValue)": "Reports a bound property change.",
                "AccessibleContext getAccessibleContext()": "Gets the AccessibleContext associated with this Component.",
                "float getAlignmentX()": "Returns the alignment along the x axis.",
                "float getAlignmentY()": "Returns the alignment along the y axis.",
                "Color getBackground()": "Gets the background color of this component.",
                "int getBaseline(int width, int height)": "Returns the baseline.",
                "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
                "Rectangle getBounds()": "Gets the bounds of this component in the form of a Rectangle object.",
                "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and return rv.",
                "ColorModel getColorModel()": "Gets the instance of ColorModel used to display the component on the output device.",
                "Component getComponentAt(int x, int y)": "Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component.",
                "Component getComponentAt(Point p)": "Returns the component or subcomponent that contains the specified point.",
                "ComponentListener[] getComponentListeners()": "Returns an array of all the component listeners registered on this component.",
                "ComponentOrientation getComponentOrientation()": "Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "Cursor getCursor()": "Gets the cursor set in the component.",
                "DropTarget getDropTarget()": "Gets the DropTarget associated with this Component.",
                "Container getFocusCycleRootAncestor()": "Returns the Container which is the focus cycle root of this Component's focus traversal cycle.",
                "FocusListener[] getFocusListeners()": "Returns an array of all the focus listeners registered on this component.",
                "Set getFocusTraversalKeys(int id)": "Returns the Set of focus traversal keys for a given traversal operation for this Component.",
                "boolean getFocusTraversalKeysEnabled()": "Returns whether focus traversal keys are enabled for this Component.",
                "Font getFont()": "Gets the font of this component.",
                "FontMetrics getFontMetrics(Font font)": "Gets the font metrics for the specified font.",
                "Color getForeground()": "Gets the foreground color of this component.",
                "Graphics getGraphics()": "Creates a graphics context for this component.",
                "GraphicsConfiguration getGraphicsConfiguration()": "Gets the GraphicsConfiguration associated with this Component.",
                "int getHeight()": "Returns the current height of this component.",
                "HierarchyBoundsListener[] getHierarchyBoundsListeners()": "Returns an array of all the hierarchy bounds listeners registered on this component.",
                "HierarchyListener[] getHierarchyListeners()": "Returns an array of all the hierarchy listeners registered on this component.",
                "boolean getIgnoreRepaint()": "",
                "InputContext getInputContext()": "Gets the input context used by this component for handling the communication with input methods when text is entered in this component.",
                "InputMethodListener[] getInputMethodListeners()": "Returns an array of all the input method listeners registered on this component.",
                "InputMethodRequests getInputMethodRequests()": "Gets the input method request handler which supports requests from input methods for this component.",
                "KeyListener[] getKeyListeners()": "Returns an array of all the key listeners registered on this component.",
                "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this Component.",
                "Locale getLocale()": "Gets the locale of this component.",
                "Point getLocation()": "Gets the location of this component in the form of a point specifying the component's top-left corner.",
                "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and return rv.",
                "Point getLocationOnScreen()": "Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.",
                "Dimension getMaximumSize()": "Gets the maximum size of this component.",
                "Dimension getMinimumSize()": "Gets the minimum size of this component.",
                "MouseListener[] getMouseListeners()": "Returns an array of all the mouse listeners registered on this component.",
                "MouseMotionListener[] getMouseMotionListeners()": "Returns an array of all the mouse motion listeners registered on this component.",
                "Point getMousePosition()": "Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null.",
                "MouseWheelListener[] getMouseWheelListeners()": "Returns an array of all the mouse wheel listeners registered on this component.",
                "String getName()": "Gets the name of the component.",
                "Container getParent()": "Gets the parent of this component.",
                "Dimension getPreferredSize()": "Gets the preferred size of this component.",
                "PropertyChangeListener[] getPropertyChangeListeners()": "Returns an array of all the property change listeners registered on this component.",
                "PropertyChangeListener[] getPropertyChangeListeners(String propertyName)": "Returns an array of all the listeners which have been associated with the named property.",
                "Dimension getSize()": "Returns the size of this component in the form of a Dimension object.",
                "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and return rv.",
                "Toolkit getToolkit()": "Gets the toolkit of this component.",
                "Object getTreeLock()": "Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.",
                "int getWidth()": "Returns the current width of this component.",
                "int getX()": "Returns the current x coordinate of the components origin.",
                "int getY()": "Returns the current y coordinate of the components origin.",
                "boolean hasFocus()": "Returns true if this Component is the focus owner.",
                "boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)": "Repaints the component when the image has changed.",
                "void invalidate()": "Invalidates this component and its ancestors.",
                "boolean isBackgroundSet()": "Returns whether the background color has been explicitly set for this Component.",
                "boolean isCursorSet()": "Returns whether the cursor has been explicitly set for this Component.",
                "boolean isDisplayable()": "Determines whether this component is displayable.",
                "boolean isDoubleBuffered()": "Returns true if this component is painted to an offscreen image (\"buffer\") that's copied to the screen later.",
                "boolean isEnabled()": "Determines whether this component is enabled.",
                "boolean isFocusable()": "Returns whether this Component can be focused.",
                "boolean isFocusCycleRoot(Container container)": "Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle.",
                "boolean isFocusOwner()": "Returns true if this Component is the focus owner.",
                "boolean isFontSet()": "Returns whether the font has been explicitly set for this Component.",
                "boolean isForegroundSet()": "Returns whether the foreground color has been explicitly set for this Component.",
                "boolean isLightweight()": "A lightweight component doesn't have a native toolkit peer.",
                "boolean isMaximumSizeSet()": "Returns true if the maximum size has been set to a non-null value otherwise returns false.",
                "boolean isMinimumSizeSet()": "Returns whether or not setMinimumSize has been invoked with a non-null value.",
                "boolean isOpaque()": "Returns true if this component is completely opaque, returns false by default.",
                "boolean isPreferredSizeSet()": "Returns true if the preferred size has been set to a non-null value otherwise returns false.",
                "boolean isShowing()": "Determines whether this component is showing on screen.",
                "boolean isValid()": "Determines whether this component is valid.",
                "boolean isVisible()": "Determines whether this component should be visible when its parent is visible.",
                "void list()": "Prints a listing of this component to the standard system output stream System.out.",
                "void list(PrintStream out)": "Prints a listing of this component to the specified output stream.",
                "void list(PrintStream out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print stream.",
                "void list(PrintWriter out)": "Prints a listing to the specified print writer.",
                "void list(PrintWriter out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print writer.",
                "void paint(Graphics g)": "Paints this component.",
                "void paintAll(Graphics g)": "Paints this component and all of its subcomponents.",
                "String paramString()": "Returns a string representing the state of this component.",
                "boolean prepareImage(Image image, ImageObserver observer)": "Prepares an image for rendering on this component.",
                "boolean prepareImage(Image image, int width, int height, ImageObserver observer)": "Prepares an image for rendering on this component at the specified width and height.",
                "void print(Graphics g)": "Prints this component.",
                "void printAll(Graphics g)": "Prints this component and all of its subcomponents.",
                "void processComponentEvent(ComponentEvent e)": "Processes component events occurring on this component by dispatching them to any registered ComponentListener objects.",
                "void processEvent(AWTEvent e)": "Processes events occurring on this component.",
                "void processFocusEvent(FocusEvent e)": "Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.",
                "void processHierarchyBoundsEvent(HierarchyEvent e)": "Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects.",
                "void processHierarchyEvent(HierarchyEvent e)": "Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects.",
                "void processInputMethodEvent(InputMethodEvent e)": "Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.",
                "void processKeyEvent(KeyEvent e)": "Processes key events occurring on this component by dispatching them to any registered KeyListener objects.",
                "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects.",
                "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.",
                "void processMouseWheelEvent(MouseWheelEvent e)": "Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects.",
                "void remove(MenuComponent popup)": "Removes the specified popup menu from the component.",
                "void removeComponentListener(ComponentListener l)": "Removes the specified component listener so that it no longer receives component events from this component.",
                "void removeFocusListener(FocusListener l)": "Removes the specified focus listener so that it no longer receives focus events from this component.",
                "void removeHierarchyBoundsListener(HierarchyBoundsListener l)": "Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.",
                "void removeHierarchyListener(HierarchyListener l)": "Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.",
                "void removeInputMethodListener(InputMethodListener l)": "Removes the specified input method listener so that it no longer receives input method events from this component.",
                "void removeKeyListener(KeyListener l)": "Removes the specified key listener so that it no longer receives key events from this component.",
                "void removeMouseListener(MouseListener l)": "Removes the specified mouse listener so that it no longer receives mouse events from this component.",
                "void removeMouseMotionListener(MouseMotionListener l)": "Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.",
                "void removeMouseWheelListener(MouseWheelListener l)": "Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.",
                "void removeNotify()": "Makes this Component undisplayable by destroying it native screen resource.",
                "void removePropertyChangeListener(PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list.",
                "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list for a specific property.",
                "void repaint()": "Repaints this component.",
                "void repaint(int x, int y, int width, int height)": "Repaints the specified rectangle of this component.",
                "void repaint(long tm)": "Repaints the component.",
                "void repaint(long tm, int x, int y, int width, int height)": "Repaints the specified rectangle of this component within tm milliseconds.",
                "void requestFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocus(boolean temporary)": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocusInWindow()": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "void revalidate()": "Revalidates the component hierarchy up to the nearest validate root.",
                "void setBackground(Color c)": "Sets the background color of this component.",
                "void setBounds(int x, int y, int width, int height)": "Moves and resizes this component.",
                "void setBounds(Rectangle r)": "Moves and resizes this component to conform to the new bounding rectangle r.",
                "void setComponentOrientation(ComponentOrientation o)": "Sets the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "void setCursor(Cursor cursor)": "Sets the cursor image to the specified cursor.",
                "void setDropTarget(DropTarget dt)": "Associate a DropTarget with this component.",
                "void setEnabled(boolean b)": "Enables or disables this component, depending on the value of the parameter b.",
                "void setFocusable(boolean focusable)": "Sets the focusable state of this Component to the specified value.",
                "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
                "void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)": "Sets whether focus traversal keys are enabled for this Component.",
                "void setFont(Font f)": "Sets the font of this component.",
                "void setForeground(Color c)": "Sets the foreground color of this component.",
                "void setIgnoreRepaint(boolean ignoreRepaint)": "Sets whether or not paint messages received from the operating system should be ignored.",
                "void setLocale(Locale l)": "Sets the locale of this component.",
                "void setLocation(int x, int y)": "Moves this component to a new location.",
                "void setLocation(Point p)": "Moves this component to a new location.",
                "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
                "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
                "void setName(String name)": "Sets the name of the component to the specified string.",
                "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component to a constant value.",
                "void setSize(Dimension d)": "Resizes this component so that it has width d.width and height d.height.",
                "void setSize(int width, int height)": "Resizes this component so that it has width width and height height.",
                "void setVisible(boolean b)": "Shows or hides this component depending on the value of parameter b.",
                "String toString()": "Returns a string representation of this component and its values.",
                "void transferFocus()": "Transfers the focus to the next component, as though this Component were the focus owner.",
                "void transferFocusBackward()": "Transfers the focus to the previous component, as though this Component were the focus owner.",
                "void transferFocusUpCycle()": "Transfers the focus up one focus traversal cycle.",
                "void update(Graphics g)": "Updates this component.",
                "void validate()": "Validates this component."
            },
            "super class": []
        }
    },
    "org.json.JSONObject": {
        "org.json.JSONObject": {
            "class": "JSONObject",
            "category": "class",
            "methods": {
                "JSONObject accumulate(String name, Object value)": "Appends value to the array already mapped to name.",
                "Object get(String name)": "Returns the value mapped by name, or throws if no such mapping exists.",
                "boolean getBoolean(String name)": "Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or throws otherwise.",
                "double getDouble(String name)": "Returns the value mapped by name if it exists and is a double or can be coerced to a double, or throws otherwise.",
                "int getInt(String name)": "Returns the value mapped by name if it exists and is an int or can be coerced to an int, or throws otherwise.",
                "JSONArray getJSONArray(String name)": "Returns the value mapped by name if it exists and is a JSONArray, or throws otherwise.",
                "JSONObject getJSONObject(String name)": "Returns the value mapped by name if it exists and is a JSONObject, or throws otherwise.",
                "long getLong(String name)": "Returns the value mapped by name if it exists and is a long or can be coerced to a long, or throws otherwise.",
                "String getString(String name)": "Returns the value mapped by name if it exists, coercing it if necessary, or throws if no such mapping exists.",
                "boolean has(String name)": "Returns true if this object has a mapping for name.",
                "boolean isNull(String name)": "Returns true if this object has no mapping for name or if it has a mapping whose value is NULL.",
                "Iterator keys()": "Returns an iterator of the String names in this object.",
                "int length()": "Returns the number of name/value mappings in this object.",
                "JSONArray names()": "Returns an array containing the string names in this object.",
                "String numberToString(Number number)": "Encodes the number as a JSON string.",
                "Object opt(String name)": "Returns the value mapped by name, or null if no such mapping exists.",
                "boolean optBoolean(String name, boolean fallback)": "Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or fallback otherwise.",
                "boolean optBoolean(String name)": "Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or false otherwise.",
                "double optDouble(String name, double fallback)": "Returns the value mapped by name if it exists and is a double or can be coerced to a double, or fallback otherwise.",
                "double optDouble(String name)": "Returns the value mapped by name if it exists and is a double or can be coerced to a double, or NaN otherwise.",
                "int optInt(String name, int fallback)": "Returns the value mapped by name if it exists and is an int or can be coerced to an int, or fallback otherwise.",
                "int optInt(String name)": "Returns the value mapped by name if it exists and is an int or can be coerced to an int, or 0 otherwise.",
                "JSONArray optJSONArray(String name)": "Returns the value mapped by name if it exists and is a JSONArray, or null otherwise.",
                "JSONObject optJSONObject(String name)": "Returns the value mapped by name if it exists and is a JSONObject, or null otherwise.",
                "long optLong(String name)": "Returns the value mapped by name if it exists and is a long or can be coerced to a long, or 0 otherwise.",
                "long optLong(String name, long fallback)": "Returns the value mapped by name if it exists and is a long or can be coerced to a long, or fallback otherwise.",
                "String optString(String name, String fallback)": "Returns the value mapped by name if it exists, coercing it if necessary, or fallback if no such mapping exists.",
                "String optString(String name)": "Returns the value mapped by name if it exists, coercing it if necessary, or the empty string if no such mapping exists.",
                "JSONObject put(String name, double value)": "Maps name to value, clobbering any existing name/value mapping with the same name.",
                "JSONObject put(String name, boolean value)": "Maps name to value, clobbering any existing name/value mapping with the same name.",
                "JSONObject put(String name, int value)": "Maps name to value, clobbering any existing name/value mapping with the same name.",
                "JSONObject put(String name, long value)": "Maps name to value, clobbering any existing name/value mapping with the same name.",
                "JSONObject put(String name, Object value)": "Maps name to value, clobbering any existing name/value mapping with the same name.",
                "JSONObject putOpt(String name, Object value)": "Equivalent to put(name, value) when both parameters are non-null; does nothing otherwise.",
                "String quote(String data)": "Encodes data as a JSON string.",
                "Object remove(String name)": "Removes the named mapping if it exists; does nothing otherwise.",
                "JSONArray toJSONArray(JSONArray names)": "Returns an array with the values corresponding to names.",
                "String toString()": "Encodes this object as a compact JSON string, such as:",
                "String toString(int indentSpaces)": "Encodes this object as a human readable JSON string for debugging, such as:",
                "Object wrap(Object o)": "Wraps the given object if necessary."
            },
            "super class": []
        }
    },
    "java.util.Collection": {
        "java.util.Collection": {
            "class": "Collection",
            "category": "Interface",
            "methods": {
                "boolean add(E e)": "Ensures that this collection contains the specified element (optional operation).",
                "boolean addAll(Collection c)": "Adds all of the elements in the specified collection to this collection (optional operation).",
                "void clear()": "Removes all of the elements from this collection (optional operation).",
                "boolean contains(Object o)": "Returns true if this collection contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this collection contains all of the elements in the specified collection.",
                "boolean equals(Object o)": "Compares the specified object with this collection for equality.",
                "int hashCode()": "Returns the hash code value for this collection.",
                "boolean isEmpty()": "Returns true if this collection contains no elements.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean remove(Object o)": "Removes a single instance of the specified element from this collection, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes all of this collection's elements that are also contained in the specified collection (optional operation).",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "boolean retainAll(Collection c)": "Retains only the elements in this collection that are contained in the specified collection (optional operation).",
                "int size()": "Returns the number of elements in this collection.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "Object[] toArray()": "Returns an array containing all of the elements in this collection.",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.lang.Iterable"
            ]
        }
    },
    "com.google.gson.JsonObject": {
        "com.google.gson.JsonObject": {
            "class": "JsonObject",
            "category": "Class",
            "methods": {
                "void add(java.lang.String property, JsonElement value)": "Adds a member, which is a name-value pair, to self.",
                "void addProperty(java.lang.String property, java.lang.Boolean value)": "Convenience method to add a boolean member.",
                "void addProperty(java.lang.String property, java.lang.Character value)": "Convenience method to add a char member.",
                "void addProperty(java.lang.String property, java.lang.Number value)": "Convenience method to add a primitive member.",
                "void addProperty(java.lang.String property, java.lang.String value)": "Convenience method to add a primitive member.",
                "JsonObject deepCopy()": "Creates a deep copy of this element and all its children",
                "java.util.Set entrySet()": "Returns a set of members of this object.",
                "boolean equals(java.lang.Object o)": "",
                "JsonElement get(java.lang.String memberName)": "Returns the member with the specified name.",
                "JsonArray getAsJsonArray(java.lang.String memberName)": "Convenience method to get the specified member as a JsonArray.",
                "JsonObject getAsJsonObject(java.lang.String memberName)": "Convenience method to get the specified member as a JsonObject.",
                "JsonPrimitive getAsJsonPrimitive(java.lang.String memberName)": "Convenience method to get the specified member as a JsonPrimitive element.",
                "boolean has(java.lang.String memberName)": "Convenience method to check if a member with the specified name is present in this object.",
                "int hashCode()": "",
                "java.util.Set keySet()": "Returns a set of members key values.",
                "JsonElement remove(java.lang.String property)": "Removes the property from this JsonObject.",
                "int size()": "Returns the number of key/value pairs in the object.",
                "JsonElement deepCopy()": "Returns a deep copy of this element.",
                "java.math.BigDecimal getAsBigDecimal()": "convenience method to get this element as a BigDecimal.",
                "java.math.BigInteger getAsBigInteger()": "convenience method to get this element as a BigInteger.",
                "boolean getAsBoolean()": "convenience method to get this element as a boolean value.",
                "byte getAsByte()": "convenience method to get this element as a primitive byte value.",
                "char getAsCharacter()": "convenience method to get this element as a primitive character value.",
                "double getAsDouble()": "convenience method to get this element as a primitive double value.",
                "float getAsFloat()": "convenience method to get this element as a primitive float value.",
                "int getAsInt()": "convenience method to get this element as a primitive integer value.",
                "JsonArray getAsJsonArray()": "convenience method to get this element as a JsonArray.",
                "JsonNull getAsJsonNull()": "convenience method to get this element as a JsonNull.",
                "JsonObject getAsJsonObject()": "convenience method to get this element as a JsonObject.",
                "JsonPrimitive getAsJsonPrimitive()": "convenience method to get this element as a JsonPrimitive.",
                "long getAsLong()": "convenience method to get this element as a primitive long value.",
                "java.lang.Number getAsNumber()": "convenience method to get this element as a Number.",
                "short getAsShort()": "convenience method to get this element as a primitive short value.",
                "java.lang.String getAsString()": "convenience method to get this element as a string value.",
                "boolean isJsonArray()": "provides check for verifying if this element is an array or not.",
                "boolean isJsonNull()": "provides check for verifying if this element represents a null value or not.",
                "boolean isJsonObject()": "provides check for verifying if this element is a Json object or not.",
                "boolean isJsonPrimitive()": "provides check for verifying if this element is a primitive or not.",
                "java.lang.String toString()": "Returns a String representation of this element."
            },
            "super class": [
                "com.google.gson.JsonElement"
            ]
        }
    },
    "java.util.AbstractCollection": {
        "java.util.AbstractCollection": {
            "class": "AbstractCollection",
            "category": "Class",
            "methods": {
                "boolean add(E e)": "Ensures that this collection contains the specified element (optional operation).",
                "boolean addAll(Collection c)": "Adds all of the elements in the specified collection to this collection (optional operation).",
                "void clear()": "Removes all of the elements from this collection (optional operation).",
                "boolean contains(Object o)": "Returns true if this collection contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this collection contains all of the elements in the specified collection.",
                "boolean isEmpty()": "Returns true if this collection contains no elements.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "boolean remove(Object o)": "Removes a single instance of the specified element from this collection, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes all of this collection's elements that are also contained in the specified collection (optional operation).",
                "boolean retainAll(Collection c)": "Retains only the elements in this collection that are contained in the specified collection (optional operation).",
                "int size()": "Returns the number of elements in this collection.",
                "Object[] toArray()": "Returns an array containing all of the elements in this collection.",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.",
                "String toString()": "Returns a string representation of this collection.",
                "boolean equals(Object o)": "Compares the specified object with this collection for equality.",
                "int hashCode()": "Returns the hash code value for this collection.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.Collection",
                "java.lang.Iterable"
            ]
        }
    },
    "gnu.trove.THash": {
        "gnu.trove.THash": {
            "class": "THash",
            "category": "Class",
            "methods": {
                "int calculateGrownCapacity()": "",
                "abstract int capacity()": "",
                "void clear()": "Empties the collection.",
                "java.lang.Object clone()": "",
                "void compact()": "Compresses the hashtable to the minimum prime size (as defined by PrimeFinder) that will hold all of the elements currently in the table.",
                "void ensureCapacity(int desiredCapacity)": "Ensure that this hashtable has sufficient capacity to hold desiredCapacity additional elements without requiring a rehash.",
                "float getAutoCompactionFactor()": "",
                "boolean isEmpty()": "Tells whether this set is currently holding any elements.",
                "void postInsertHook(boolean usedFreeSlot)": "After an insert, this hook is called to adjust the size/free values of the set and to perform rehashing if necessary.",
                "void reenableAutoCompaction(boolean check_for_compaction)": "Re-enable auto-compaction after it was disabled via tempDisableAutoCompaction().",
                "abstract void rehash(int newCapacity)": "Rehashes the set.",
                "void removeAt(int index)": "Delete the record at index.",
                "void setAutoCompactionFactor(float factor)": "The auto-compaction factor controls whether and when a table performs a compact() automatically after a certain number of remove operations.",
                "int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1.",
                "int size()": "Returns the number of distinct elements in this collection.",
                "void tempDisableAutoCompaction()": "Temporarily disables auto-compaction.",
                "void trimToSize()": "This simply calls compact."
            },
            "super class": []
        }
    },
    "java.sql.Statement": {
        "java.sql.Statement": {
            "class": "Statement",
            "category": "Interface",
            "methods": {
                "void addBatch(String sql)": "Adds the given SQL command to the current list of commands for this Statement object.",
                "void cancel()": "Cancels this Statement object if both the DBMS and driver support aborting an SQL statement.",
                "void clearBatch()": "Empties this Statement object's current list of SQL commands.",
                "void clearWarnings()": "Clears all the warnings reported on this Statement object.",
                "void close()": "Releases this Statement object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed.",
                "void closeOnCompletion()": "Specifies that this Statement will be closed when all its dependent result sets are closed.",
                "boolean execute(String sql)": "Executes the given SQL statement, which may return multiple results.",
                "boolean execute(String sql, int autoGeneratedKeys)": "Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval.",
                "boolean execute(String sql, int[] columnIndexes)": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "boolean execute(String sql, String[] columnNames)": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "int[] executeBatch()": "Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts.",
                "long[] executeLargeBatch()": "Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts.",
                "long executeLargeUpdate(String sql)": "Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement.",
                "long executeLargeUpdate(String sql, int autoGeneratedKeys)": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval.",
                "long executeLargeUpdate(String sql, int[] columnIndexes)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "long executeLargeUpdate(String sql, String[] columnNames)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "ResultSet executeQuery(String sql)": "Executes the given SQL statement, which returns a single ResultSet object.",
                "int executeUpdate(String sql)": "Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement.",
                "int executeUpdate(String sql, int autoGeneratedKeys)": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval.",
                "int executeUpdate(String sql, int[] columnIndexes)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "int executeUpdate(String sql, String[] columnNames)": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.",
                "Connection getConnection()": "Retrieves the Connection object that produced this Statement object.",
                "int getFetchDirection()": "Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object.",
                "int getFetchSize()": "Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object.",
                "ResultSet getGeneratedKeys()": "Retrieves any auto-generated keys created as a result of executing this Statement object.",
                "long getLargeMaxRows()": "Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain.",
                "long getLargeUpdateCount()": "Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned.",
                "int getMaxFieldSize()": "Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object.",
                "int getMaxRows()": "Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain.",
                "boolean getMoreResults()": "Moves to this Statement object's next result, returns true if it is a ResultSet object, and implicitly closes any current ResultSet object(s) obtained with the method getResultSet.",
                "boolean getMoreResults(int current)": "Moves to this Statement object's next result, deals with any current ResultSet object(s) according to the instructions specified by the given flag, and returns true if the next result is a ResultSet object.",
                "int getQueryTimeout()": "Retrieves the number of seconds the driver will wait for a Statement object to execute.",
                "ResultSet getResultSet()": "Retrieves the current result as a ResultSet object.",
                "int getResultSetConcurrency()": "Retrieves the result set concurrency for ResultSet objects generated by this Statement object.",
                "int getResultSetHoldability()": "Retrieves the result set holdability for ResultSet objects generated by this Statement object.",
                "int getResultSetType()": "Retrieves the result set type for ResultSet objects generated by this Statement object.",
                "int getUpdateCount()": "Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned.",
                "SQLWarning getWarnings()": "Retrieves the first warning reported by calls on this Statement object.",
                "boolean isClosed()": "Retrieves whether this Statement object has been closed.",
                "boolean isCloseOnCompletion()": "Returns a value indicating whether this Statement will be closed when all its dependent result sets are closed.",
                "boolean isPoolable()": "Returns a value indicating whether the Statement is poolable or not.",
                "void setCursorName(String name)": "Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods.",
                "void setEscapeProcessing(boolean enable)": "Sets escape processing on or off.",
                "void setFetchDirection(int direction)": "Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object.",
                "void setFetchSize(int rows)": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for ResultSet objects generated by this Statement.",
                "void setLargeMaxRows(long max)": "Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number.",
                "void setMaxFieldSize(int max)": "Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object.",
                "void setMaxRows(int max)": "Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number.",
                "void setPoolable(boolean poolable)": "Requests that a Statement be pooled or not pooled.",
                "void setQueryTimeout(int seconds)": "Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds."
            },
            "super class": []
        }
    },
    "java.sql.PreparedStatement": {
        "java.sql.PreparedStatement": {
            "class": "PreparedStatement",
            "category": "Interface",
            "methods": {
                "void addBatch()": "Adds a set of parameters to this PreparedStatement object's batch of commands.",
                "void clearParameters()": "Clears the current parameter values immediately.",
                "boolean execute()": "Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement.",
                "long executeLargeUpdate()": "Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.",
                "ResultSet executeQuery()": "Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.",
                "int executeUpdate()": "Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.",
                "ResultSetMetaData getMetaData()": "Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed.",
                "ParameterMetaData getParameterMetaData()": "Retrieves the number, types and properties of this PreparedStatement object's parameters.",
                "void setArray(int parameterIndex, Array x)": "Sets the designated parameter to the given java.sql.Array object.",
                "void setAsciiStream(int parameterIndex, InputStream x)": "Sets the designated parameter to the given input stream.",
                "void setAsciiStream(int parameterIndex, InputStream x, int length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setAsciiStream(int parameterIndex, InputStream x, long length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBigDecimal(int parameterIndex, BigDecimal x)": "Sets the designated parameter to the given java.math.BigDecimal value.",
                "void setBinaryStream(int parameterIndex, InputStream x)": "Sets the designated parameter to the given input stream.",
                "void setBinaryStream(int parameterIndex, InputStream x, int length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBinaryStream(int parameterIndex, InputStream x, long length)": "Sets the designated parameter to the given input stream, which will have the specified number of bytes.",
                "void setBlob(int parameterIndex, Blob x)": "Sets the designated parameter to the given java.sql.Blob object.",
                "void setBlob(int parameterIndex, InputStream inputStream)": "Sets the designated parameter to a InputStream object.",
                "void setBlob(int parameterIndex, InputStream inputStream, long length)": "Sets the designated parameter to a InputStream object.",
                "void setBoolean(int parameterIndex, boolean x)": "Sets the designated parameter to the given Java boolean value.",
                "void setByte(int parameterIndex, byte x)": "Sets the designated parameter to the given Java byte value.",
                "void setBytes(int parameterIndex, byte[] x)": "Sets the designated parameter to the given Java array of bytes.",
                "void setCharacterStream(int parameterIndex, Reader reader)": "Sets the designated parameter to the given Reader object.",
                "void setCharacterStream(int parameterIndex, Reader reader, int length)": "Sets the designated parameter to the given Reader object, which is the given number of characters long.",
                "void setCharacterStream(int parameterIndex, Reader reader, long length)": "Sets the designated parameter to the given Reader object, which is the given number of characters long.",
                "void setClob(int parameterIndex, Clob x)": "Sets the designated parameter to the given java.sql.Clob object.",
                "void setClob(int parameterIndex, Reader reader)": "Sets the designated parameter to a Reader object.",
                "void setClob(int parameterIndex, Reader reader, long length)": "Sets the designated parameter to a Reader object.",
                "void setDate(int parameterIndex, Date x)": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application.",
                "void setDate(int parameterIndex, Date x, Calendar cal)": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object.",
                "void setDouble(int parameterIndex, double x)": "Sets the designated parameter to the given Java double value.",
                "void setFloat(int parameterIndex, float x)": "Sets the designated parameter to the given Java float value.",
                "void setInt(int parameterIndex, int x)": "Sets the designated parameter to the given Java int value.",
                "void setLong(int parameterIndex, long x)": "Sets the designated parameter to the given Java long value.",
                "void setNCharacterStream(int parameterIndex, Reader value)": "Sets the designated parameter to a Reader object.",
                "void setNCharacterStream(int parameterIndex, Reader value, long length)": "Sets the designated parameter to a Reader object.",
                "void setNClob(int parameterIndex, NClob value)": "Sets the designated parameter to a java.sql.NClob object.",
                "void setNClob(int parameterIndex, Reader reader)": "Sets the designated parameter to a Reader object.",
                "void setNClob(int parameterIndex, Reader reader, long length)": "Sets the designated parameter to a Reader object.",
                "void setNString(int parameterIndex, String value)": "Sets the designated parameter to the given String object.",
                "void setNull(int parameterIndex, int sqlType)": "Sets the designated parameter to SQL NULL.",
                "void setNull(int parameterIndex, int sqlType, String typeName)": "Sets the designated parameter to SQL NULL.",
                "void setObject(int parameterIndex, Object x)": "Sets the value of the designated parameter using the given object.",
                "void setObject(int parameterIndex, Object x, int targetSqlType)": "Sets the value of the designated parameter with the given object.",
                "void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength)": "Sets the value of the designated parameter with the given object.",
                "void setObject(int parameterIndex, Object x, SQLType targetSqlType)": "Sets the value of the designated parameter with the given object.",
                "void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength)": "Sets the value of the designated parameter with the given object.",
                "void setRef(int parameterIndex, Ref x)": "Sets the designated parameter to the given REF(<structured-type>) value.",
                "void setRowId(int parameterIndex, RowId x)": "Sets the designated parameter to the given java.sql.RowId object.",
                "void setShort(int parameterIndex, short x)": "Sets the designated parameter to the given Java short value.",
                "void setSQLXML(int parameterIndex, SQLXML xmlObject)": "Sets the designated parameter to the given java.sql.SQLXML object.",
                "void setString(int parameterIndex, String x)": "Sets the designated parameter to the given Java String value.",
                "void setTime(int parameterIndex, Time x)": "Sets the designated parameter to the given java.sql.Time value.",
                "void setTime(int parameterIndex, Time x, Calendar cal)": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object.",
                "void setTimestamp(int parameterIndex, Timestamp x)": "Sets the designated parameter to the given java.sql.Timestamp value.",
                "void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object.",
                "void setURL(int parameterIndex, URL x)": "Sets the designated parameter to the given java.net.URL value."
            },
            "super class": []
        }
    },
    "java.util.concurrent.ConcurrentMap": {
        "java.util.concurrent.ConcurrentMap": {
            "class": "ConcurrentMap",
            "category": "Interface",
            "methods": {
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map."
            },
            "super class": [
                "java.util.Map"
            ]
        }
    },
    "java.lang.Iterable": {
        "java.lang.Iterable": {
            "class": "Iterable",
            "category": "Interface",
            "methods": {
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable."
            },
            "super class": []
        }
    },
    "com.google.common.collect.BiMap": {
        "com.google.common.collect.BiMap": {
            "class": "BiMap",
            "category": "Interface",
            "methods": {
                "V forcePut(K key, V value)": "An alternate form of put that silently removes any existing entry with the value value before proceeding with the put(K, V) operation.",
                "BiMap inverse()": "Returns the inverse view of this bimap, which maps each of this bimap's values to its associated key.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map map)": "",
                "Set values()": "",
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map."
            },
            "super class": [
                "java.util.Map"
            ]
        }
    },
    "org.ofbiz.base.util.UtilMisc": {
        "org.ofbiz.base.util.UtilMisc": {
            "class": "UtilMisc",
            "category": "Class",
            "methods": {
                "java.math.BigDecimal addToBigDecimalInMap(java.util.Map theMap, K mapKey, java.math.BigDecimal addNumber)": "Assuming theMap not null; if null will throw a NullPointerException",
                "void addToDoubleInMap(java.util.Map theMap, K key, java.lang.Double value)": "Adds value to the key entry in theMap, or creates a new one if not already there",
                "void addToListInMap(V element, java.util.Map theMap, K listKey)": "",
                "void addToSetInMap(V element, java.util.Map theMap, K setKey)": "",
                "void addToSortedSetInMap(V element, java.util.Map theMap, K setKey)": "",
                "java.util.List availableLocales()": "Returns a List of available locales sorted by display name",
                "java.util.Set collectionToSet(java.util.Collection c)": "",
                "java.lang.String collectionToString(java.util.Collection values, java.lang.String delimiter)": "Generates a String from given values delimited by delimiter.",
                "int compare(java.lang.Comparable obj1, T obj2)": "",
                "int compare(java.util.List obj1, java.util.List obj2)": "",
                "void copyFile(java.io.File sourceLocation, java.io.File targetLocation)": "",
                "java.util.Locale ensureLocale(java.lang.Object localeObject)": "The input can be a String, Locale, or even null and a valid Locale will always be returned; if nothing else works, returns the default locale.",
                "java.util.List getHostHeadersAllowed()": "List of domains or IP addresses to be checked to prevent Host Header Injection, no spaces after commas, no wildcard, can be extended of course...",
                "java.util.List getListFromMap(java.util.Map outerMap, K key)": "Assuming outerMap not null; if null will throw a NullPointerException",
                "java.util.Map getMapFromMap(java.util.Map outerMap, K key)": "Assuming outerMap not null; if null will throw a NullPointerException",
                "int getViewLastIndex(int listSize, int viewSize)": "",
                "T initCause(T throwable, java.lang.Throwable cause)": "",
                "void makeArrayListSerializable(java.util.ArrayList arrayList)": "This change an ArrayList to be Serializable by removing all entries that are not Serializable.",
                "java.util.List makeListWritable(java.util.Collection col)": "",
                "void makeMapSerializable(java.util.Map map)": "This change a Map to be Serializable by removing all entries with values that are not Serializable.",
                "java.util.Map makeMapWritable(java.util.Map map)": "",
                "java.util.Set makeSetWritable(java.util.Collection col)": "",
                "java.util.Locale parseLocale(java.lang.String localeString)": "Parse a locale string Locale object",
                "java.lang.String printMap(java.util.Map theMap)": "",
                "T removeFirst(java.util.List lst)": "",
                "java.util.List sortMaps(java.util.List listOfMaps, java.util.List sortKeys)": "Sort a List of Maps by specified consistent keys.",
                "java.util.Map splitPhoneNumber(java.lang.String phoneNumber, Delegator delegator)": "",
                "void staticWait(long timeout)": "Deprecated. use Thread.sleep()",
                "double toDouble(java.lang.Object obj)": "Converts an Object to a double.",
                "java.lang.Double toDoubleObject(java.lang.Object obj)": "Converts an Object to a Double.",
                "int toInteger(java.lang.Object obj)": "Converts an Object to an int.",
                "java.lang.Integer toIntegerObject(java.lang.Object obj)": "Converts an Object to an Integer.",
                "java.util.Iterator toIterator(java.util.Collection col)": "Get an iterator from a collection, returning null if collection is null",
                "java.util.List toList(java.util.Collection collection)": "",
                "java.util.List toList(T... data)": "Creates a list from passed objects.",
                "java.util.List toListArray(T[] data)": "",
                "long toLong(java.lang.Object obj)": "Converts an Object to a long.",
                "java.lang.Long toLongObject(java.lang.Object obj)": "Converts an Object to a Long.",
                "java.util.Map toMap(java.lang.Object... kvs)": "Creates a pseudo-literal map corresponding to key-values.",
                "java.util.Map toMap(java.util.function.Supplier constructor, java.lang.Object... kvs)": "Creates a pseudo-literal map corresponding to key-values.",
                "java.util.Set toSet(java.util.Collection collection)": "",
                "java.util.Set toSet(T... data)": "Create a set from the passed objects.",
                "java.util.Set toSetArray(T[] data)": ""
            },
            "super class": []
        }
    },
    "org.ejml.data.ReshapeMatrix64F": {
        "org.ejml.data.ReshapeMatrix64F": {
            "class": "ReshapeMatrix64F",
            "category": "Class",
            "methods": {
                "int getNumCols()": "Returns the number of columns in this matrix.",
                "int getNumRows()": "Returns the number of rows in this matrix.",
                "MatrixIterator iterator(boolean rowMajor, int minRow, int minCol, int maxRow, int maxCol)": "Creates a new iterator for traversing through a submatrix inside this matrix.",
                "void reshape(int numRows, int numCols)": "Equivalent to invoking reshape(numRows, numCols, false);",
                "void reshape(int numRows, int numCols, boolean saveValues)": "Changes the number of rows and columns in the matrix, allowing its size to grow or shrink.",
                "void set(ReshapeMatrix64F A)": "Assigns the value of 'this' matrix to be the same as 'A'.",
                "void setNumCols(int numCols)": "Sets the number of columns.",
                "void setNumRows(int numRows)": "Sets the number of rows."
            },
            "super class": []
        }
    },
    "java.awt.Container": {
        "java.awt.Container": {
            "class": "Container",
            "category": "Class",
            "methods": {
                "Component add(Component comp)": "Appends the specified component to the end of this container.",
                "Component add(Component comp, int index)": "Adds the specified component to this container at the given position.",
                "void add(Component comp, Object constraints)": "Adds the specified component to the end of this container.",
                "void add(Component comp, Object constraints, int index)": "Adds the specified component to this container with the specified constraints at the specified index.",
                "Component add(String name, Component comp)": "Adds the specified component to this container.",
                "void addContainerListener(ContainerListener l)": "Adds the specified container listener to receive container events from this container.",
                "void addImpl(Component comp, Object constraints, int index)": "Adds the specified component to this container at the specified index.",
                "void addNotify()": "Makes this Component displayable by connecting it to a native screen resource.",
                "void addPropertyChangeListener(PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list.",
                "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list for a specific property.",
                "void applyComponentOrientation(ComponentOrientation o)": "Sets the ComponentOrientation property of this container and all components contained within it.",
                "boolean areFocusTraversalKeysSet(int id)": "Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component.",
                "void doLayout()": "Prompts the layout manager to lay out this component.",
                "Component findComponentAt(int x, int y)": "Locates the visible child component that contains the specified position.",
                "Component findComponentAt(Point p)": "Locates the visible child component that contains the specified point.",
                "float getAlignmentX()": "Returns the alignment along the x axis.",
                "float getAlignmentY()": "Returns the alignment along the y axis.",
                "Component getComponent(int n)": "Gets the nth component in this container.",
                "Component getComponentAt(int x, int y)": "Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component.",
                "Component getComponentAt(Point p)": "Returns the component or subcomponent that contains the specified point.",
                "int getComponentCount()": "Gets the number of components in this panel.",
                "Component[] getComponents()": "Gets all the components in this container.",
                "int getComponentZOrder(Component comp)": "Returns the z-order index of the component inside the container.",
                "ContainerListener[] getContainerListeners()": "Returns an array of all the container listeners registered on this container.",
                "Set getFocusTraversalKeys(int id)": "Returns the Set of focus traversal keys for a given traversal operation for this Component.",
                "FocusTraversalPolicy getFocusTraversalPolicy()": "Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root.",
                "Insets getInsets()": "Determines the insets of this container, which indicate the size of the container's border.",
                "LayoutManager getLayout()": "Gets the layout manager for this container.",
                "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this Component.",
                "Dimension getMaximumSize()": "Gets the maximum size of this component.",
                "Dimension getMinimumSize()": "Gets the minimum size of this component.",
                "Point getMousePosition(boolean allowChildren)": "Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null.",
                "Dimension getPreferredSize()": "Gets the preferred size of this component.",
                "void invalidate()": "Invalidates this component and its ancestors.",
                "boolean isAncestorOf(Component c)": "Checks if the component is contained in the component hierarchy of this container.",
                "boolean isFocusCycleRoot()": "Returns whether this Container is the root of a focus traversal cycle.",
                "boolean isFocusCycleRoot(Container container)": "Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle.",
                "boolean isFocusTraversalPolicyProvider()": "Returns whether this container provides focus traversal policy.",
                "boolean isFocusTraversalPolicySet()": "Returns whether the focus traversal policy has been explicitly set for this Container.",
                "boolean isValidateRoot()": "Indicates if this container is a validate root.",
                "void list(PrintStream out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print stream.",
                "void list(PrintWriter out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print writer.",
                "void paint(Graphics g)": "Paints this component.",
                "void paintComponents(Graphics g)": "Paints each of the components in this container.",
                "String paramString()": "Returns a string representing the state of this component.",
                "void print(Graphics g)": "Prints this component.",
                "void printComponents(Graphics g)": "Prints each of the components in this container.",
                "void processContainerEvent(ContainerEvent e)": "Processes container events occurring on this container by dispatching them to any registered ContainerListener objects.",
                "void processEvent(AWTEvent e)": "Processes events occurring on this component.",
                "void remove(Component comp)": "Removes the specified component from this container.",
                "void remove(int index)": "Removes the component, specified by index, from this container.",
                "void removeAll()": "Removes all the components from this container.",
                "void removeContainerListener(ContainerListener l)": "Removes the specified container listener so it no longer receives container events from this container.",
                "void removeNotify()": "Makes this Component undisplayable by destroying it native screen resource.",
                "void setComponentZOrder(Component comp, int index)": "Moves the specified component to the specified z-order index in the container.",
                "void setFocusCycleRoot(boolean focusCycleRoot)": "Sets whether this Container is the root of a focus traversal cycle.",
                "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
                "void setFocusTraversalPolicy(FocusTraversalPolicy policy)": "Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root.",
                "void setFocusTraversalPolicyProvider(boolean provider)": "Sets whether this container will be used to provide focus traversal policy.",
                "void setFont(Font f)": "Sets the font of this component.",
                "void setLayout(LayoutManager mgr)": "Sets the layout manager for this container.",
                "void transferFocusDownCycle()": "Transfers the focus down one focus traversal cycle.",
                "void update(Graphics g)": "Updates this component.",
                "void validate()": "Validates this component.",
                "void validateTree()": "Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid).",
                "void add(PopupMenu popup)": "Adds the specified popup menu to the component.",
                "void addComponentListener(ComponentListener l)": "Adds the specified component listener to receive component events from this component.",
                "void addFocusListener(FocusListener l)": "Adds the specified focus listener to receive focus events from this component when this component gains input focus.",
                "void addHierarchyBoundsListener(HierarchyBoundsListener l)": "Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.",
                "void addHierarchyListener(HierarchyListener l)": "Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.",
                "void addInputMethodListener(InputMethodListener l)": "Adds the specified input method listener to receive input method events from this component.",
                "void addKeyListener(KeyListener l)": "Adds the specified key listener to receive key events from this component.",
                "void addMouseListener(MouseListener l)": "Adds the specified mouse listener to receive mouse events from this component.",
                "void addMouseMotionListener(MouseMotionListener l)": "Adds the specified mouse motion listener to receive mouse motion events from this component.",
                "void addMouseWheelListener(MouseWheelListener l)": "Adds the specified mouse wheel listener to receive mouse wheel events from this component.",
                "void applyComponentOrientation(ComponentOrientation orientation)": "Sets the ComponentOrientation property of this component and all components contained within it.",
                "int checkImage(Image image, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "int checkImage(Image image, int width, int height, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)": "Potentially coalesce an event being posted with an existing event.",
                "boolean contains(int x, int y)": "Checks whether this component \"contains\" the specified point, where x and y are defined to be relative to the coordinate system of this component.",
                "boolean contains(Point p)": "Checks whether this component \"contains\" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.",
                "Image createImage(ImageProducer producer)": "Creates an image from the specified image producer.",
                "Image createImage(int width, int height)": "Creates an off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height)": "Creates a volatile off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height, ImageCapabilities caps)": "Creates a volatile off-screen drawable image, with the given capabilities.",
                "void disableEvents(long eventsToDisable)": "Disables the events defined by the specified event mask parameter from being delivered to this component.",
                "void dispatchEvent(AWTEvent e)": "Dispatches an event to this component or one of its sub components.",
                "void enableEvents(long eventsToEnable)": "Enables the events defined by the specified event mask parameter to be delivered to this component.",
                "void enableInputMethods(boolean enable)": "Enables or disables input method support for this component.",
                "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
                "void firePropertyChange(String propertyName, byte oldValue, byte newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, double oldValue, double newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, float oldValue, float newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
                "void firePropertyChange(String propertyName, long oldValue, long newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, Object oldValue, Object newValue)": "Support for reporting bound property changes for Object properties.",
                "void firePropertyChange(String propertyName, short oldValue, short newValue)": "Reports a bound property change.",
                "AccessibleContext getAccessibleContext()": "Gets the AccessibleContext associated with this Component.",
                "Color getBackground()": "Gets the background color of this component.",
                "int getBaseline(int width, int height)": "Returns the baseline.",
                "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
                "Rectangle getBounds()": "Gets the bounds of this component in the form of a Rectangle object.",
                "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and return rv.",
                "ColorModel getColorModel()": "Gets the instance of ColorModel used to display the component on the output device.",
                "ComponentListener[] getComponentListeners()": "Returns an array of all the component listeners registered on this component.",
                "ComponentOrientation getComponentOrientation()": "Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "Cursor getCursor()": "Gets the cursor set in the component.",
                "DropTarget getDropTarget()": "Gets the DropTarget associated with this Component.",
                "Container getFocusCycleRootAncestor()": "Returns the Container which is the focus cycle root of this Component's focus traversal cycle.",
                "FocusListener[] getFocusListeners()": "Returns an array of all the focus listeners registered on this component.",
                "boolean getFocusTraversalKeysEnabled()": "Returns whether focus traversal keys are enabled for this Component.",
                "Font getFont()": "Gets the font of this component.",
                "FontMetrics getFontMetrics(Font font)": "Gets the font metrics for the specified font.",
                "Color getForeground()": "Gets the foreground color of this component.",
                "Graphics getGraphics()": "Creates a graphics context for this component.",
                "GraphicsConfiguration getGraphicsConfiguration()": "Gets the GraphicsConfiguration associated with this Component.",
                "int getHeight()": "Returns the current height of this component.",
                "HierarchyBoundsListener[] getHierarchyBoundsListeners()": "Returns an array of all the hierarchy bounds listeners registered on this component.",
                "HierarchyListener[] getHierarchyListeners()": "Returns an array of all the hierarchy listeners registered on this component.",
                "boolean getIgnoreRepaint()": "",
                "InputContext getInputContext()": "Gets the input context used by this component for handling the communication with input methods when text is entered in this component.",
                "InputMethodListener[] getInputMethodListeners()": "Returns an array of all the input method listeners registered on this component.",
                "InputMethodRequests getInputMethodRequests()": "Gets the input method request handler which supports requests from input methods for this component.",
                "KeyListener[] getKeyListeners()": "Returns an array of all the key listeners registered on this component.",
                "Locale getLocale()": "Gets the locale of this component.",
                "Point getLocation()": "Gets the location of this component in the form of a point specifying the component's top-left corner.",
                "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and return rv.",
                "Point getLocationOnScreen()": "Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.",
                "MouseListener[] getMouseListeners()": "Returns an array of all the mouse listeners registered on this component.",
                "MouseMotionListener[] getMouseMotionListeners()": "Returns an array of all the mouse motion listeners registered on this component.",
                "Point getMousePosition()": "Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null.",
                "MouseWheelListener[] getMouseWheelListeners()": "Returns an array of all the mouse wheel listeners registered on this component.",
                "String getName()": "Gets the name of the component.",
                "Container getParent()": "Gets the parent of this component.",
                "PropertyChangeListener[] getPropertyChangeListeners()": "Returns an array of all the property change listeners registered on this component.",
                "PropertyChangeListener[] getPropertyChangeListeners(String propertyName)": "Returns an array of all the listeners which have been associated with the named property.",
                "Dimension getSize()": "Returns the size of this component in the form of a Dimension object.",
                "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and return rv.",
                "Toolkit getToolkit()": "Gets the toolkit of this component.",
                "Object getTreeLock()": "Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.",
                "int getWidth()": "Returns the current width of this component.",
                "int getX()": "Returns the current x coordinate of the components origin.",
                "int getY()": "Returns the current y coordinate of the components origin.",
                "boolean hasFocus()": "Returns true if this Component is the focus owner.",
                "boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)": "Repaints the component when the image has changed.",
                "boolean isBackgroundSet()": "Returns whether the background color has been explicitly set for this Component.",
                "boolean isCursorSet()": "Returns whether the cursor has been explicitly set for this Component.",
                "boolean isDisplayable()": "Determines whether this component is displayable.",
                "boolean isDoubleBuffered()": "Returns true if this component is painted to an offscreen image (\"buffer\") that's copied to the screen later.",
                "boolean isEnabled()": "Determines whether this component is enabled.",
                "boolean isFocusable()": "Returns whether this Component can be focused.",
                "boolean isFocusOwner()": "Returns true if this Component is the focus owner.",
                "boolean isFontSet()": "Returns whether the font has been explicitly set for this Component.",
                "boolean isForegroundSet()": "Returns whether the foreground color has been explicitly set for this Component.",
                "boolean isLightweight()": "A lightweight component doesn't have a native toolkit peer.",
                "boolean isMaximumSizeSet()": "Returns true if the maximum size has been set to a non-null value otherwise returns false.",
                "boolean isMinimumSizeSet()": "Returns whether or not setMinimumSize has been invoked with a non-null value.",
                "boolean isOpaque()": "Returns true if this component is completely opaque, returns false by default.",
                "boolean isPreferredSizeSet()": "Returns true if the preferred size has been set to a non-null value otherwise returns false.",
                "boolean isShowing()": "Determines whether this component is showing on screen.",
                "boolean isValid()": "Determines whether this component is valid.",
                "boolean isVisible()": "Determines whether this component should be visible when its parent is visible.",
                "void list()": "Prints a listing of this component to the standard system output stream System.out.",
                "void list(PrintStream out)": "Prints a listing of this component to the specified output stream.",
                "void list(PrintWriter out)": "Prints a listing to the specified print writer.",
                "void paintAll(Graphics g)": "Paints this component and all of its subcomponents.",
                "boolean prepareImage(Image image, ImageObserver observer)": "Prepares an image for rendering on this component.",
                "boolean prepareImage(Image image, int width, int height, ImageObserver observer)": "Prepares an image for rendering on this component at the specified width and height.",
                "void printAll(Graphics g)": "Prints this component and all of its subcomponents.",
                "void processComponentEvent(ComponentEvent e)": "Processes component events occurring on this component by dispatching them to any registered ComponentListener objects.",
                "void processFocusEvent(FocusEvent e)": "Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.",
                "void processHierarchyBoundsEvent(HierarchyEvent e)": "Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects.",
                "void processHierarchyEvent(HierarchyEvent e)": "Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects.",
                "void processInputMethodEvent(InputMethodEvent e)": "Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.",
                "void processKeyEvent(KeyEvent e)": "Processes key events occurring on this component by dispatching them to any registered KeyListener objects.",
                "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects.",
                "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.",
                "void processMouseWheelEvent(MouseWheelEvent e)": "Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects.",
                "void remove(MenuComponent popup)": "Removes the specified popup menu from the component.",
                "void removeComponentListener(ComponentListener l)": "Removes the specified component listener so that it no longer receives component events from this component.",
                "void removeFocusListener(FocusListener l)": "Removes the specified focus listener so that it no longer receives focus events from this component.",
                "void removeHierarchyBoundsListener(HierarchyBoundsListener l)": "Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.",
                "void removeHierarchyListener(HierarchyListener l)": "Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.",
                "void removeInputMethodListener(InputMethodListener l)": "Removes the specified input method listener so that it no longer receives input method events from this component.",
                "void removeKeyListener(KeyListener l)": "Removes the specified key listener so that it no longer receives key events from this component.",
                "void removeMouseListener(MouseListener l)": "Removes the specified mouse listener so that it no longer receives mouse events from this component.",
                "void removeMouseMotionListener(MouseMotionListener l)": "Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.",
                "void removeMouseWheelListener(MouseWheelListener l)": "Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.",
                "void removePropertyChangeListener(PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list.",
                "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list for a specific property.",
                "void repaint()": "Repaints this component.",
                "void repaint(int x, int y, int width, int height)": "Repaints the specified rectangle of this component.",
                "void repaint(long tm)": "Repaints the component.",
                "void repaint(long tm, int x, int y, int width, int height)": "Repaints the specified rectangle of this component within tm milliseconds.",
                "void requestFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocus(boolean temporary)": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocusInWindow()": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "void revalidate()": "Revalidates the component hierarchy up to the nearest validate root.",
                "void setBackground(Color c)": "Sets the background color of this component.",
                "void setBounds(int x, int y, int width, int height)": "Moves and resizes this component.",
                "void setBounds(Rectangle r)": "Moves and resizes this component to conform to the new bounding rectangle r.",
                "void setComponentOrientation(ComponentOrientation o)": "Sets the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "void setCursor(Cursor cursor)": "Sets the cursor image to the specified cursor.",
                "void setDropTarget(DropTarget dt)": "Associate a DropTarget with this component.",
                "void setEnabled(boolean b)": "Enables or disables this component, depending on the value of the parameter b.",
                "void setFocusable(boolean focusable)": "Sets the focusable state of this Component to the specified value.",
                "void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)": "Sets whether focus traversal keys are enabled for this Component.",
                "void setForeground(Color c)": "Sets the foreground color of this component.",
                "void setIgnoreRepaint(boolean ignoreRepaint)": "Sets whether or not paint messages received from the operating system should be ignored.",
                "void setLocale(Locale l)": "Sets the locale of this component.",
                "void setLocation(int x, int y)": "Moves this component to a new location.",
                "void setLocation(Point p)": "Moves this component to a new location.",
                "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
                "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
                "void setName(String name)": "Sets the name of the component to the specified string.",
                "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component to a constant value.",
                "void setSize(Dimension d)": "Resizes this component so that it has width d.width and height d.height.",
                "void setSize(int width, int height)": "Resizes this component so that it has width width and height height.",
                "void setVisible(boolean b)": "Shows or hides this component depending on the value of parameter b.",
                "String toString()": "Returns a string representation of this component and its values.",
                "void transferFocus()": "Transfers the focus to the next component, as though this Component were the focus owner.",
                "void transferFocusBackward()": "Transfers the focus to the previous component, as though this Component were the focus owner.",
                "void transferFocusUpCycle()": "Transfers the focus up one focus traversal cycle."
            },
            "super class": [
                "java.awt.Component"
            ]
        }
    },
    "java.lang.ThreadLocal": {
        "java.lang.ThreadLocal": {
            "class": "ThreadLocal",
            "category": "Class",
            "methods": {
                "T get()": "Returns the value in the current thread's copy of this thread-local variable.",
                "T initialValue()": "Returns the current thread's \"initial value\" for this thread-local variable.",
                "void remove()": "Removes the current thread's value for this thread-local variable.",
                "void set(T value)": "Sets the current thread's copy of this thread-local variable to the specified value.",
                "ThreadLocal withInitial(Supplier supplier)": "Creates a thread local variable."
            },
            "super class": []
        }
    },
    "org.antlr.runtime.tree.TreeAdaptor": {
        "org.antlr.runtime.tree.TreeAdaptor": {
            "class": "TreeAdaptor",
            "category": "Interface",
            "methods": {
                "void addChild(Object t, Object child)": "Add a child to the tree t.",
                "Object becomeRoot(Object newRoot, Object oldRoot)": "If oldRoot is a nil root, just copy or move the children to newRoot.",
                "Object becomeRoot(Token newRoot, Object oldRoot)": "Create a node for newRoot make it the root of oldRoot.",
                "Object create(int tokenType, String text)": "Create a new node derived from a token, with a new token type.",
                "Object create(int tokenType, Token fromToken)": "Create a new node derived from a token, with a new token type.",
                "Object create(int tokenType, Token fromToken, String text)": "Same as create(tokenType, fromToken) except set the text too.",
                "Object create(Token payload)": "Create a tree node from Token object; for CommonTree type trees, then the token just becomes the payload.",
                "Object deleteChild(Object t, int i)": "Remove ith child and shift children down from right.",
                "Object dupNode(Object treeNode)": "Duplicate a single tree node.",
                "Object dupTree(Object tree)": "Duplicate tree recursively, using dupNode() for each node",
                "Object errorNode(TokenStream input, Token start, Token stop, RecognitionException e)": "Return a tree node representing an error.",
                "Object getChild(Object t, int i)": "Get a child 0..n-1 node",
                "int getChildCount(Object t)": "How many children? If 0, then this is a leaf node",
                "int getChildIndex(Object t)": "What index is this node in the child list? Range: 0..n-1 If your node type doesn't handle this, it's ok but the tree rewrites in tree parsers need this functionality.",
                "Object getParent(Object t)": "Who is the parent node of this node; if null, implies node is root.",
                "String getText(Object t)": "",
                "Token getToken(Object t)": "Return the token object from which this node was created.",
                "int getTokenStartIndex(Object t)": "Get the token start index for this subtree; return -1 if no such index",
                "int getTokenStopIndex(Object t)": "Get the token stop index for this subtree; return -1 if no such index",
                "int getType(Object t)": "For tree parsing, I need to know the token type of a node",
                "int getUniqueID(Object node)": "For identifying trees.",
                "boolean isNil(Object tree)": "Is tree considered a nil node used to make lists of child nodes?",
                "Object nil()": "Return a nil node (an empty but non-null node) that can hold a list of element as the children.",
                "void replaceChildren(Object parent, int startChildIndex, int stopChildIndex, Object t)": "Replace from start to stop child index of parent with t, which might be a list.",
                "Object rulePostProcessing(Object root)": "Given the root of the subtree created for this rule, post process it to do any simplifications or whatever you want.",
                "void setChild(Object t, int i, Object child)": "Set ith child (0..n-1) to t; t must be non-null and non-nil node",
                "void setChildIndex(Object t, int index)": "",
                "void setParent(Object t, Object parent)": "",
                "void setText(Object t, String text)": "Node constructors can set the text of a node",
                "void setTokenBoundaries(Object t, Token startToken, Token stopToken)": "Where are the bounds in the input token stream for this node and all children? Each rule that creates AST nodes will call this method right before returning.",
                "void setType(Object t, int type)": "Node constructors can set the type of a node"
            },
            "super class": []
        }
    },
    "org.sax.InputSource": {
        "org.sax.InputSource": {
            "class": "InputSource",
            "category": "Class",
            "methods": {
                "InputStream getByteStream()": "Get the byte stream for this input source.",
                "Reader getCharacterStream()": "Get the character stream for this input source.",
                "String getEncoding()": "Get the character encoding for a byte stream or URI.",
                "String getPublicId()": "Get the public identifier for this input source.",
                "String getSystemId()": "Get the system identifier for this input source.",
                "void setByteStream(InputStream byteStream)": "Set the byte stream for this input source.",
                "void setCharacterStream(Reader characterStream)": "Set the character stream for this input source.",
                "void setEncoding(String encoding)": "Set the character encoding, if known.",
                "void setPublicId(String publicId)": "Set the public identifier for this input source.",
                "void setSystemId(String systemId)": "Set the system identifier for this input source."
            },
            "super class": []
        }
    },
    "com.eclipsesource.json.JsonValue": {
        "com.eclipsesource.json.JsonValue": {
            "class": "JsonValue",
            "category": "Class",
            "methods": {
                "JsonArray asArray()": "Returns this JSON value as JsonArray, assuming that this value represents a JSON array.",
                "boolean asBoolean()": "Returns this JSON value as a boolean value, assuming that this value is either true or false.",
                "double asDouble()": "Returns this JSON value as a double value, assuming that this value represents a JSON number.",
                "float asFloat()": "Returns this JSON value as a float value, assuming that this value represents a JSON number.",
                "int asInt()": "Returns this JSON value as an int value, assuming that this value represents a JSON number that can be interpreted as Java int.",
                "long asLong()": "Returns this JSON value as a long value, assuming that this value represents a JSON number that can be interpreted as Java long.",
                "JsonObject asObject()": "Returns this JSON value as JsonObject, assuming that this value represents a JSON object.",
                "String asString()": "Returns this JSON value as String, assuming that this value represents a JSON string.",
                "boolean equals(Object object)": "Indicates whether some other object is \"equal to\" this one according to the contract specified in Object.equals(Object).",
                "int hashCode()": "",
                "boolean isArray()": "Detects whether this value represents a JSON array.",
                "boolean isBoolean()": "Detects whether this value represents a boolean value.",
                "boolean isFalse()": "Detects whether this value represents the JSON literal false.",
                "boolean isNull()": "Detects whether this value represents the JSON literal null.",
                "boolean isNumber()": "Detects whether this value represents a JSON number.",
                "boolean isObject()": "Detects whether this value represents a JSON object.",
                "boolean isString()": "Detects whether this value represents a JSON string.",
                "boolean isTrue()": "Detects whether this value represents the JSON literal true.",
                "String toString()": "Returns the JSON string for this value in its minimal form, without any additional whitespace.",
                "String toString(WriterConfig config)": "Returns the JSON string for this value using the given formatting.",
                "void writeTo(Writer writer)": "Writes the JSON representation of this value to the given writer in its minimal form, without any additional whitespace.",
                "void writeTo(Writer writer, WriterConfig config)": "Writes the JSON representation of this value to the given writer using the given formatting."
            },
            "super class": []
        }
    },
    "net.minecraft.nbt.NBTTagCompound": {
        "net.minecraft.nbt.NBTTagCompound": {
            "class": "NBTTagCompound",
            "category": "Class",
            "methods": {
                "NBTBase copy()": "",
                "boolean equals(java.lang.Object p_equals_1_)": "",
                "boolean getBoolean(java.lang.String key)": "",
                "byte getByte(java.lang.String key)": "",
                "byte[] getByteArray(java.lang.String key)": "",
                "NBTTagCompound getCompoundTag(java.lang.String key)": "",
                "double getDouble(java.lang.String key)": "",
                "float getFloat(java.lang.String key)": "",
                "byte getId()": "",
                "int[] getIntArray(java.lang.String key)": "",
                "int getInteger(java.lang.String key)": "",
                "java.util.Set getKeySet()": "",
                "long getLong(java.lang.String key)": "",
                "short getShort(java.lang.String key)": "",
                "int getSize()": "",
                "java.lang.String getString(java.lang.String key)": "",
                "NBTBase getTag(java.lang.String key)": "",
                "byte getTagId(java.lang.String key)": "",
                "NBTTagList getTagList(java.lang.String key, int type)": "",
                "java.util.UUID getUniqueId(java.lang.String key)": "",
                "int hashCode()": "",
                "boolean hasKey(java.lang.String key)": "",
                "boolean hasKey(java.lang.String key, int type)": "",
                "boolean hasNoTags()": "",
                "boolean hasUniqueId(java.lang.String key)": "",
                "void merge(NBTTagCompound other)": "",
                "void removeTag(java.lang.String key)": "",
                "void setBoolean(java.lang.String key, boolean value)": "",
                "void setByte(java.lang.String key, byte value)": "",
                "void setByteArray(java.lang.String key, byte[] value)": "",
                "void setDouble(java.lang.String key, double value)": "",
                "void setFloat(java.lang.String key, float value)": "",
                "void setIntArray(java.lang.String key, int[] value)": "",
                "void setInteger(java.lang.String key, int value)": "",
                "void setLong(java.lang.String key, long value)": "",
                "void setShort(java.lang.String key, short value)": "",
                "void setString(java.lang.String key, java.lang.String value)": "",
                "void setTag(java.lang.String key, NBTBase value)": "",
                "void setUniqueId(java.lang.String key, java.util.UUID value)": "",
                "java.lang.String toString()": "",
                "NBTBase createNewByType(byte id)": "",
                "java.lang.String getString()": ""
            },
            "super class": [
                "net.minecraft.nbt.NBTBase"
            ]
        }
    },
    "java.util.ArrayList": {
        "java.util.ArrayList": {
            "class": "ArrayList",
            "category": "Class",
            "methods": {
                "boolean add(E e)": "Appends the specified element to the end of this list (optional operation).",
                "void add(int index, E element)": "Inserts the specified element at the specified position in this list (optional operation).",
                "boolean addAll(Collection c)": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).",
                "boolean addAll(int index, Collection c)": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).",
                "void clear()": "Removes all of the elements from this list (optional operation).",
                "Object clone()": "Returns a shallow copy of this ArrayList instance.",
                "boolean contains(Object o)": "Returns true if this list contains the specified element.",
                "void ensureCapacity(int minCapacity)": "Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.",
                "E get(int index)": "Returns the element at the specified position in this list.",
                "int indexOf(Object o)": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "boolean isEmpty()": "Returns true if this list contains no elements.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "int lastIndexOf(Object o)": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "ListIterator listIterator()": "Returns a list iterator over the elements in this list (in proper sequence).",
                "ListIterator listIterator(int index)": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.",
                "E remove(int index)": "Removes the element at the specified position in this list (optional operation).",
                "boolean remove(Object o)": "Removes the first occurrence of the specified element from this list, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "void removeRange(int fromIndex, int toIndex)": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
                "void replaceAll(UnaryOperator operator)": "Replaces each element of this list with the result of applying the operator to that element.",
                "boolean retainAll(Collection c)": "Retains only the elements in this list that are contained in the specified collection (optional operation).",
                "E set(int index, E element)": "Replaces the element at the specified position in this list with the specified element (optional operation).",
                "int size()": "Returns the number of elements in this list.",
                "void sort(Comparator c)": "Sorts this list according to the order induced by the specified Comparator.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "List subList(int fromIndex, int toIndex)": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
                "Object[] toArray()": "Returns an array containing all of the elements in this list in proper sequence (from first to last element).",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                "void trimToSize()": "Trims the capacity of this ArrayList instance to be the list's current size.",
                "boolean equals(Object o)": "Compares the specified object with this list for equality.",
                "int hashCode()": "Returns the hash code value for this list.",
                "boolean containsAll(Collection c)": "Returns true if this list contains all of the elements of the specified collection.",
                "String toString()": "Returns a string representation of this collection.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source."
            },
            "super class": [
                "java.util.AbstractList",
                "java.util.AbstractCollection",
                "java.util.Collection",
                "java.util.List",
                "java.lang.Iterable"
            ]
        }
    },
    "org.bukkit.configuration.file.YamlConfiguration": {
        "org.bukkit.configuration.file.YamlConfiguration": {
            "class": "YamlConfiguration",
            "category": "Class",
            "methods": {
                "YamlConfiguration loadConfiguration(Reader reader)": "Creates a new YamlConfiguration, loading from the given reader.",
                "void loadFromString(String contents)": "Loads this FileConfiguration from the specified string, as opposed to from file.",
                "YamlConfigurationOptions options()": "Gets the ConfigurationOptions for this Configuration",
                "String saveToString()": "Saves this FileConfiguration to a string, and returns it.",
                "void addDefault(String path, Object value)": "Sets the default value in the root at the given path as provided.",
                "boolean contains(String path)": "Checks if this ConfigurationSection contains the given path.",
                "boolean contains(String path, boolean ignoreDefault)": "Checks if this ConfigurationSection contains the given path.",
                "String createPath(ConfigurationSection section, String key)": "Creates a full path to the given ConfigurationSection from its root Configuration.",
                "String createPath(ConfigurationSection section, String key, ConfigurationSection relativeTo)": "Creates a relative path to the given ConfigurationSection from the given relative section.",
                "ConfigurationSection createSection(String path)": "Creates an empty ConfigurationSection at the specified path.",
                "ConfigurationSection createSection(String path, Map<?,?> map)": "Creates a ConfigurationSection at the specified path, with specified values.",
                "Object get(String path)": "Gets the requested Object by path.",
                "Object get(String path, Object def)": "Gets the requested Object by path, returning a default value if not found.",
                "boolean getBoolean(String path)": "Gets the requested boolean by path.",
                "boolean getBoolean(String path, boolean def)": "Gets the requested boolean by path, returning a default value if not found.",
                "List<Boolean> getBooleanList(String path)": "Gets the requested List of Boolean by path.",
                "List<Byte> getByteList(String path)": "Gets the requested List of Byte by path.",
                "List<Character> getCharacterList(String path)": "Gets the requested List of Character by path.",
                "Color getColor(String path)": "Gets the requested Color by path.",
                "Color getColor(String path, Color def)": "Gets the requested Color by path, returning a default value if not found.",
                "List<String> getComments(String path)": "Gets the requested comment list by path.",
                "ConfigurationSection getConfigurationSection(String path)": "Gets the requested ConfigurationSection by path.",
                "String getCurrentPath()": "Gets the path of this ConfigurationSection from its root Configuration.",
                "Object getDefault(String path)": "",
                "ConfigurationSection getDefaultSection()": "Gets the equivalent ConfigurationSection from the default Configuration defined in ConfigurationSection.getRoot().",
                "double getDouble(String path)": "Gets the requested double by path.",
                "double getDouble(String path, double def)": "Gets the requested double by path, returning a default value if not found.",
                "List<Double> getDoubleList(String path)": "Gets the requested List of Double by path.",
                "List<Float> getFloatList(String path)": "Gets the requested List of Float by path.",
                "List<String> getInlineComments(String path)": "Gets the requested inline comment list by path.",
                "int getInt(String path)": "Gets the requested int by path.",
                "int getInt(String path, int def)": "Gets the requested int by path, returning a default value if not found.",
                "List<Integer> getIntegerList(String path)": "Gets the requested List of Integer by path.",
                "ItemStack getItemStack(String path)": "Gets the requested ItemStack by path.",
                "ItemStack getItemStack(String path, ItemStack def)": "Gets the requested ItemStack by path, returning a default value if not found.",
                "Set<String> getKeys(boolean deep)": "Gets a set containing all keys in this section.",
                "List<?> getList(String path)": "Gets the requested List by path.",
                "List<?> getList(String path, List<?> def)": "Gets the requested List by path, returning a default value if not found.",
                "Location getLocation(String path)": "Gets the requested Location by path.",
                "Location getLocation(String path, Location def)": "Gets the requested Location by path, returning a default value if not found.",
                "long getLong(String path)": "Gets the requested long by path.",
                "long getLong(String path, long def)": "Gets the requested long by path, returning a default value if not found.",
                "List<Long> getLongList(String path)": "Gets the requested List of Long by path.",
                "List<Map<?,?>> getMapList(String path)": "Gets the requested List of Maps by path.",
                "String getName()": "Gets the name of this individual ConfigurationSection, in the path.",
                "<T> T getObject(String path, Class<T> clazz)": "Gets the requested object at the given path.",
                "<T> T getObject(String path, Class<T> clazz, T def)": "Gets the requested object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "OfflinePlayer getOfflinePlayer(String path)": "Gets the requested OfflinePlayer by path.",
                "OfflinePlayer getOfflinePlayer(String path, OfflinePlayer def)": "Gets the requested OfflinePlayer by path, returning a default value if not found.",
                "ConfigurationSection getParent()": "Gets the parent ConfigurationSection that directly contains this ConfigurationSection.",
                "Configuration getRoot()": "Gets the root Configuration that contains this ConfigurationSection.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz)": "Gets the requested ConfigurationSerializable object at the given path.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz, T def)": "Gets the requested ConfigurationSerializable object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "List<Short> getShortList(String path)": "Gets the requested List of Short by path.",
                "String getString(String path)": "Gets the requested String by path.",
                "String getString(String path, String def)": "Gets the requested String by path, returning a default value if not found.",
                "List<String> getStringList(String path)": "Gets the requested List of String by path.",
                "Map<String,Object> getValues(boolean deep)": "Gets a Map containing all keys and their values for this section.",
                "Vector getVector(String path)": "Gets the requested Vector by path.",
                "Vector getVector(String path, Vector def)": "Gets the requested Vector by path, returning a default value if not found.",
                "boolean isBoolean(String path)": "Checks if the specified path is a boolean.",
                "boolean isColor(String path)": "Checks if the specified path is a Color.",
                "boolean isConfigurationSection(String path)": "Checks if the specified path is a ConfigurationSection.",
                "boolean isDouble(String path)": "Checks if the specified path is a double.",
                "boolean isInt(String path)": "Checks if the specified path is an int.",
                "boolean isItemStack(String path)": "Checks if the specified path is an ItemStack.",
                "boolean isList(String path)": "Checks if the specified path is a List.",
                "boolean isLocation(String path)": "Checks if the specified path is a Location.",
                "boolean isLong(String path)": "Checks if the specified path is a long.",
                "boolean isOfflinePlayer(String path)": "Checks if the specified path is an OfflinePlayer.",
                "protected boolean isPrimitiveWrapper(Object input)": "Checks if the input object is a primitive wrapper class.",
                "boolean isSet(String path)": "Checks if this ConfigurationSection has a value set for the given path.",
                "boolean isString(String path)": "Checks if the specified path is a String.",
                "boolean isVector(String path)": "Checks if the specified path is a Vector.",
                "protected void mapChildrenKeys(Set<String> output, ConfigurationSection section, boolean deep)": "Maps all the keys of the children of this ConfigurationSection.",
                "protected void mapChildrenValues(Map<String,Object> output, ConfigurationSection section, boolean deep)": "Maps all the values of the children of this ConfigurationSection.",
                "void set(String path, Object value)": "Sets the specified path to the given value.",
                "void setComments(String path, List<String> comments)": "Sets the comment list at the specified path.",
                "void setInlineComments(String path, List<String> comments)": "Sets the inline comment list at the specified path.",
                "String toString()": "Returns a string representation of this ConfigurationSection and its children.",
                "void addDefaults(Map<String,Object> defaults)": "Sets the default values of the given paths as provided.",
                "void addDefaults(Configuration defaults)": "Sets the default values of the given paths as provided.",
                "Configuration getDefaults()": "Gets the source Configuration for this configuration.",
                "MemoryConfigurationOptions options()": "Gets the ConfigurationOptions for this Configuration.",
                "void setDefaults(Configuration defaults)": "Sets the source of all default values for this Configuration.",
                "String buildHeader()": "Builds a header for this FileConfiguration. Deprecated and only exists for backwards compatibility.",
                "void load(File file)": "Loads this FileConfiguration from the specified location.",
                "void load(Reader reader)": "Loads this FileConfiguration from the specified reader.",
                "void load(String file)": "Loads this FileConfiguration from the specified location.",
                "FileConfigurationOptions options()": "Gets the ConfigurationOptions for this Configuration.",
                "void save(File file)": "Saves this FileConfiguration to the specified location.",
                "void save(String file)": "Saves this FileConfiguration to the specified location."
            },
            "super class": [
                "org.bukkit.configuration.MemorySection",
                "org.bukkit.configuration.MemoryConfiguration",
                "org.bukkit.configuration.file.FileConfiguration"
            ]
        }
    },
    "org.sax.XMLReader": {
        "org.sax.XMLReader": {
            "class": "XMLReader",
            "category": "Interface",
            "methods": {
                "ContentHandler getContentHandler()": "Return the current content handler.",
                "DTDHandler getDTDHandler()": "Return the current DTD handler.",
                "EntityResolver getEntityResolver()": "Return the current entity resolver.",
                "ErrorHandler getErrorHandler()": "Return the current error handler.",
                "boolean getFeature(String name)": "Look up the value of a feature flag.",
                "Object getProperty(String name)": "Look up the value of a property.",
                "void parse(InputSource input)": "Parse an XML document.",
                "void parse(String systemId)": "Parse an XML document from a system identifier (URI).",
                "void setContentHandler(ContentHandler handler)": "Allow an application to register a content event handler.",
                "void setDTDHandler(DTDHandler handler)": "Allow an application to register a DTD event handler.",
                "void setEntityResolver(EntityResolver resolver)": "Allow an application to register an entity resolver.",
                "void setErrorHandler(ErrorHandler handler)": "Allow an application to register an error event handler.",
                "void setFeature(String name, boolean value)": "Set the value of a feature flag.",
                "void setProperty(String name, Object value)": "Set the value of a property."
            },
            "super class": []
        }
    },
    "org.apache.http.client.methods.HttpEntityEnclosingRequestBase": {
        "org.apache.http.client.methods.HttpEntityEnclosingRequestBase": {
            "class": "HttpEntityEnclosingRequestBase",
            "category": "Class",
            "methods": {
                "Object clone()": "",
                "boolean expectContinue()": "",
                "HttpEntity getEntity()": "",
                "void setEntity(HttpEntity entity)": "",
                "RequestConfig getConfig()": "Returns actual request configuration.",
                "String getMethod()": "Returns the HTTP method this request uses, such as GET, PUT, POST, or other.",
                "ProtocolVersion getProtocolVersion()": "",
                "RequestLine getRequestLine()": "",
                "URI getURI()": "Returns the original request URI.",
                "void releaseConnection()": "A convenience method to simplify migration from HttpClient 3.1 API.",
                "void setConfig(RequestConfig config)": "",
                "void setProtocolVersion(ProtocolVersion version)": "",
                "void setURI(URI uri)": "",
                "void started()": "",
                "String toString()": "",
                "void abort()": "Aborts this http request.",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.client.methods.HttpRequestBase",
                "org.apache.http.client.methods.AbstractExecutionAwareRequest",
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "net.minecraft.inventory.InventoryBasic": {
        "net.minecraft.inventory.InventoryBasic": {
            "class": "InventoryBasic",
            "category": "Class",
            "methods": {
                "void addInventoryChangeListener(IInventoryChangedListener listener)": "",
                "ItemStack addItem(ItemStack stack)": "",
                "void clear()": "",
                "void closeInventory(EntityPlayer player)": "",
                "ItemStack decrStackSize(int index, int count)": "",
                "ITextComponent getDisplayName()": "",
                "int getField(int id)": "",
                "int getFieldCount()": "",
                "int getInventoryStackLimit()": "",
                "java.lang.String getName()": "",
                "int getSizeInventory()": "",
                "ItemStack getStackInSlot(int index)": "",
                "boolean hasCustomName()": "",
                "boolean isItemValidForSlot(int index, ItemStack stack)": "",
                "boolean isUseableByPlayer(EntityPlayer player)": "",
                "void markDirty()": "",
                "void openInventory(EntityPlayer player)": "",
                "void removeInventoryChangeListener(IInventoryChangedListener listener)": "",
                "ItemStack removeStackFromSlot(int index)": "",
                "void setCustomName(java.lang.String inventoryTitleIn)": "",
                "void setField(int id, int value)": "",
                "void setInventorySlotContents(int index, ItemStack stack)": ""
            },
            "super class": []
        }
    },
    "android.content.res.TypedArray": {
        "android.content.res.TypedArray": {
            "class": "TypedArray",
            "category": "class",
            "methods": {
                "void close()": "Recycles the TypedArray, to be re-used by a later caller.",
                "boolean getBoolean(int index, boolean defValue)": "Retrieve the boolean value for the attribute at index.",
                "int getChangingConfigurations()": "Return a mask of the configuration parameters for which the values in this typed array may change.",
                "int getColor(int index, int defValue)": "Retrieve the color value for the attribute at index.",
                "ColorStateList getColorStateList(int index)": "Retrieve the ColorStateList for the attribute at index.",
                "float getDimension(int index, float defValue)": "Retrieve a dimensional unit attribute at index.",
                "int getDimensionPixelOffset(int index, int defValue)": "Retrieve a dimensional unit attribute at index for use as an offset in raw pixels.",
                "int getDimensionPixelSize(int index, int defValue)": "Retrieve a dimensional unit attribute at index for use as a size in raw pixels.",
                "Drawable getDrawable(int index)": "Retrieve the Drawable for the attribute at index.",
                "float getFloat(int index, float defValue)": "Retrieve the float value for the attribute at index.",
                "Typeface getFont(int index)": "Retrieve the Typeface for the attribute at index.",
                "float getFraction(int index, int base, int pbase, float defValue)": "Retrieves a fractional unit attribute at index.",
                "int getIndex(int at)": "Returns an index in the array that has data.",
                "int getIndexCount()": "Returns the number of indices in the array that actually have data.",
                "int getInt(int index, int defValue)": "Retrieve the integer value for the attribute at index.",
                "int getInteger(int index, int defValue)": "Retrieve the integer value for the attribute at index.",
                "int getLayoutDimension(int index, int defValue)": "Special version of getDimensionPixelSize(int, int) for retrieving ViewGroup's layout_width and layout_height attributes.",
                "int getLayoutDimension(int index, String name)": "Special version of getDimensionPixelSize(int, int) for retrieving ViewGroup's layout_width and layout_height attributes.",
                "String getNonResourceString(int index)": "Retrieves the string value for the attribute at index, but only if that string comes from an immediate value in an XML file.",
                "String getPositionDescription()": "Returns a message about the parser state suitable for printing error messages.",
                "int getResourceId(int index, int defValue)": "Retrieves the resource identifier for the attribute at index.",
                "Resources getResources()": "Returns the Resources object this array was loaded from.",
                "int getSourceResourceId(int index, int defaultValue)": "Returns the resource ID of the style or layout against which the specified attribute was resolved, otherwise returns defValue.",
                "String getString(int index)": "Retrieves the string value for the attribute at index.",
                "CharSequence getText(int index)": "Retrieves the styled string value for the attribute at index.",
                "CharSequence[] getTextArray(int index)": "Retrieve the CharSequence[] for the attribute at index.",
                "int getType(int index)": "Returns the type of attribute at the specified index.",
                "boolean getValue(int index, TypedValue outValue)": "Retrieve the raw TypedValue for the attribute at index.",
                "boolean hasValue(int index)": "Determines whether there is an attribute at index.",
                "boolean hasValueOrEmpty(int index)": "Determines whether there is an attribute at index, returning true if the attribute was explicitly set to @empty and false only if the attribute was undefined.",
                "int length()": "Returns the number of values in this array.",
                "TypedValue peekValue(int index)": "Retrieve the raw TypedValue for the attribute at index and return a temporary object holding its data.",
                "void recycle()": "Recycles the TypedArray, to be re-used by a later caller.",
                "String toString()": "Returns a string representation of the object."
            },
            "super class": [
                "Object",
                "TypedArray"
            ]
        }
    },
    "javax.swing.JTextPane": {
        "javax.swing.JTextPane": {
            "class": "JTextPane",
            "category": "Class",
            "methods": {
                "Style addStyle(String nm, Style parent)": "Adds a style into the logical style hierarchy.",
                "EditorKit createDefaultEditorKit()": "Creates the default editor kit (PlainEditorKit) for when the component is first created.",
                "AttributeSet getCharacterAttributes()": "Fetches the character attributes in effect at the current location of the caret, or null.",
                "MutableAttributeSet getInputAttributes()": "Gets the input attributes for the pane.",
                "Style getLogicalStyle()": "Fetches the logical style assigned to the paragraph represented by the current position of the caret, or null.",
                "AttributeSet getParagraphAttributes()": "Fetches the current paragraph attributes in effect at the location of the caret, or null if none.",
                "Style getStyle(String nm)": "Fetches a named non-null style previously added.",
                "StyledDocument getStyledDocument()": "Fetches the model associated with the editor.",
                "StyledEditorKit getStyledEditorKit()": "Gets the editor kit.",
                "String getUIClassID()": "Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component.",
                "void insertComponent(Component c)": "Inserts a component into the document as a replacement for the currently selected content.",
                "void insertIcon(Icon g)": "Inserts an icon into the document as a replacement for the currently selected content.",
                "String paramString()": "Returns a string representing the state of this component.",
                "void removeStyle(String nm)": "Removes a named non-null style previously added to the document.",
                "void replaceSelection(String content)": "Replaces the currently selected content with new content represented by the given string.",
                "void setCharacterAttributes(AttributeSet attr, boolean replace)": "Applies the given attributes to character content.",
                "void setDocument(Document doc)": "Associates the editor with a text document.",
                "void setEditorKit(EditorKit kit)": "Sets the currently installed kit for handling content.",
                "void setLogicalStyle(Style s)": "Sets the logical style to use for the paragraph at the current caret position.",
                "void setParagraphAttributes(AttributeSet attr, boolean replace)": "Applies the given attributes to paragraphs.",
                "void setStyledDocument(StyledDocument doc)": "Associates the editor with a text document.",
                "void addHyperlinkListener(HyperlinkListener listener)": "Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.",
                "EditorKit createEditorKitForContentType(String type)": "Creates a handler for the given type from the default registry of editor kits.",
                "void fireHyperlinkUpdate(HyperlinkEvent e)": "Notifies all listeners that have registered interest for notification on this event type.",
                "AccessibleContext getAccessibleContext()": "Gets the AccessibleContext associated with this Component.",
                "String getContentType()": "Gets the type of content that this editor is currently set to deal with.",
                "EditorKit getEditorKit()": "Fetches the currently installed kit for handling content.",
                "String getEditorKitClassNameForContentType(String type)": "Returns the currently registered EditorKit class name for the type type.",
                "EditorKit getEditorKitForContentType(String type)": "Fetches the editor kit to use for the given type of content.",
                "HyperlinkListener[] getHyperlinkListeners()": "Returns an array of all the HyperLinkListeners added to this JEditorPane with addHyperlinkListener().",
                "URL getPage()": "Gets the current URL being displayed.",
                "Dimension getPreferredSize()": "Gets the preferred size of this component.",
                "boolean getScrollableTracksViewportHeight()": "Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.",
                "boolean getScrollableTracksViewportWidth()": "Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.",
                "InputStream getStream(URL page)": "Fetches a stream for the given URL, which is about to be loaded by the setPage method.",
                "String getText()": "Returns the text contained in this TextComponent.",
                "void read(InputStream in, Object desc)": "This method initializes from a stream.",
                "void registerEditorKitForContentType(String type, String classname)": "Establishes the default bindings of type to classname.",
                "void registerEditorKitForContentType(String type, String classname, ClassLoader loader)": "Establishes the default bindings of type to classname.",
                "void removeHyperlinkListener(HyperlinkListener listener)": "Removes a hyperlink listener.",
                "void scrollToReference(String reference)": "Scrolls the view to the given reference location (that is, the value returned by the UL.getRef method for the URL being displayed).",
                "void setContentType(String type)": "Sets the type of content that this editor handles.",
                "void setEditorKitForContentType(String type, EditorKit k)": "Directly sets the editor kit to use for the given type.",
                "void setPage(String url)": "Sets the current URL being displayed.",
                "void setPage(URL page)": "Sets the current URL being displayed.",
                "void setText(String t)": "Sets the text of this TextComponent to the specified text.",
                "void addCaretListener(CaretListener listener)": "Adds a caret listener for notification of any changes to the caret.",
                "void addInputMethodListener(InputMethodListener l)": "Adds the specified input method listener to receive input method events from this component.",
                "Keymap addKeymap(String nm, Keymap parent)": "Adds a new keymap into the keymap hierarchy.",
                "void copy()": "Transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model.",
                "void cut()": "Transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model.",
                "void fireCaretUpdate(CaretEvent e)": "Notifies all listeners that have registered interest for notification on this event type.",
                "Action[] getActions()": "Fetches the command list for the editor.",
                "Caret getCaret()": "Fetches the caret that allows text-oriented navigation over the view.",
                "Color getCaretColor()": "Fetches the current color used to render the caret.",
                "CaretListener[] getCaretListeners()": "Returns an array of all the caret listeners registered on this text component.",
                "int getCaretPosition()": "Returns the position of the text insertion caret for the text component.",
                "Color getDisabledTextColor()": "Fetches the current color used to render the disabled text.",
                "Document getDocument()": "Fetches the model associated with the editor.",
                "boolean getDragEnabled()": "Returns whether or not automatic drag handling is enabled.",
                "JTextComponent.DropLocation getDropLocation()": "Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown.",
                "DropMode getDropMode()": "Returns the drop mode for this component.",
                "char getFocusAccelerator()": "Returns the key accelerator that will cause the receiving text component to get the focus.",
                "Highlighter getHighlighter()": "Fetches the object responsible for making highlights.",
                "InputMethodRequests getInputMethodRequests()": "Gets the input method request handler which supports requests from input methods for this component.",
                "Keymap getKeymap()": "Fetches the keymap currently active in this text component.",
                "Keymap getKeymap(String nm)": "Fetches a named keymap previously added to the document.",
                "Insets getMargin()": "Returns the margin between the text component's border and its text.",
                "NavigationFilter getNavigationFilter()": "Returns the NavigationFilter.",
                "Dimension getPreferredScrollableViewportSize()": "Returns the preferred size of the viewport for a view component.",
                "Printable getPrintable(MessageFormat headerFormat, MessageFormat footerFormat)": "Returns a Printable to use for printing the content of this JTextComponent.",
                "int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)": "Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation.",
                "int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)": "Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation.",
                "String getSelectedText()": "Returns the selected text contained in this TextComponent.",
                "Color getSelectedTextColor()": "Fetches the current color used to render the selected text.",
                "Color getSelectionColor()": "Fetches the current color used to render the selection.",
                "int getSelectionEnd()": "Returns the selected text's end position.",
                "int getSelectionStart()": "Returns the selected text's start position.",
                "String getText(int offs, int len)": "Fetches a portion of the text represented by the component.",
                "String getToolTipText(MouseEvent event)": "Returns the string to be used as the tooltip for event.",
                "TextUI getUI()": "Fetches the user-interface factory for this text-oriented editor.",
                "boolean isEditable()": "Returns the boolean indicating whether this TextComponent is editable or not.",
                "void loadKeymap(Keymap map, JTextComponent.KeyBinding[] bindings, Action[] actions)": "Loads a keymap with a bunch of bindings.",
                "Rectangle modelToView(int pos)": "Converts the given location in the model to a place in the view coordinate system.",
                "void moveCaretPosition(int pos)": "Moves the caret to a new position, leaving behind a mark defined by the last time setCaretPosition was called.",
                "void paste()": "Transfers the contents of the system clipboard into the associated text model.",
                "boolean print()": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with no header or footer text.",
                "boolean print(MessageFormat headerFormat, MessageFormat footerFormat)": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with the specified header and footer text.",
                "boolean print(MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintService service, PrintRequestAttributeSet attributes, boolean interactive)": "Prints the content of this JTextComponent.",
                "void processInputMethodEvent(InputMethodEvent e)": "Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.",
                "void read(Reader in, Object desc)": "Initializes from a stream.",
                "void removeCaretListener(CaretListener listener)": "Removes a caret listener.",
                "Keymap removeKeymap(String nm)": "Removes a named keymap previously added to the document.",
                "void removeNotify()": "Makes this Component undisplayable by destroying it native screen resource.",
                "void restoreComposedText()": "Restores composed text previously saved by saveComposedText.",
                "boolean saveComposedText(int pos)": "Saves composed text around the specified position.",
                "void select(int selectionStart, int selectionEnd)": "Selects the text between the specified start and end positions.",
                "void selectAll()": "Selects all the text in the TextComponent.",
                "void setCaret(Caret c)": "Sets the caret to be used.",
                "void setCaretColor(Color c)": "Sets the current color used to render the caret.",
                "void setCaretPosition(int position)": "Sets the position of the text insertion caret for the TextComponent.",
                "void setComponentOrientation(ComponentOrientation o)": "Sets the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "void setDisabledTextColor(Color c)": "Sets the current color used to render the disabled text.",
                "void setDragEnabled(boolean b)": "Turns on or off automatic drag handling.",
                "void setDropMode(DropMode dropMode)": "Sets the drop mode for this component.",
                "void setEditable(boolean b)": "Sets the specified boolean to indicate whether or not this TextComponent should be editable.",
                "void setFocusAccelerator(char aKey)": "Sets the key accelerator that will cause the receiving text component to get the focus.",
                "void setHighlighter(Highlighter h)": "Sets the highlighter to be used.",
                "void setKeymap(Keymap map)": "Sets the keymap to use for binding events to actions.",
                "void setMargin(Insets m)": "Sets margin space between the text component's border and its text.",
                "void setNavigationFilter(NavigationFilter filter)": "Sets the NavigationFilter.",
                "void setSelectedTextColor(Color c)": "Sets the current color used to render the selected text.",
                "void setSelectionColor(Color c)": "Sets the current color used to render the selection.",
                "void setSelectionEnd(int selectionEnd)": "Sets the selection end to the specified position.",
                "void setSelectionStart(int selectionStart)": "Sets the selection start to the specified position.",
                "void setUI(TextUI ui)": "Sets the user-interface factory for this text-oriented editor.",
                "void updateUI()": "Resets the UI property to a value from the current look and feel.",
                "int viewToModel(Point pt)": "Converts the given place in the view coordinate system to the nearest representative location in the model.",
                "void write(Writer out)": "Stores the contents of the model into the given stream.",
                "void addAncestorListener(AncestorListener listener)": "Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible.",
                "void addNotify()": "Makes this Component displayable by connecting it to a native screen resource.",
                "void addVetoableChangeListener(VetoableChangeListener listener)": "Adds a VetoableChangeListener to the listener list.",
                "void computeVisibleRect(Rectangle visibleRect)": "Returns the Component's \"visible rect rectangle\" - the intersection of the visible rectangles for this component and all of its ancestors.",
                "boolean contains(int x, int y)": "Checks whether this component \"contains\" the specified point, where x and y are defined to be relative to the coordinate system of this component.",
                "JToolTip createToolTip()": "Returns the instance of JToolTip that should be used to display the tooltip.",
                "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
                "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
                "void fireVetoableChange(String propertyName, Object oldValue, Object newValue)": "Supports reporting constrained property changes.",
                "ActionListener getActionForKeyStroke(KeyStroke aKeyStroke)": "Returns the object that will perform the action registered for a given keystroke.",
                "ActionMap getActionMap()": "Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding.",
                "float getAlignmentX()": "Returns the alignment along the x axis.",
                "float getAlignmentY()": "Returns the alignment along the y axis.",
                "AncestorListener[] getAncestorListeners()": "Returns an array of all the ancestor listeners registered on this component.",
                "boolean getAutoscrolls()": "Gets the autoscrolls property.",
                "int getBaseline(int width, int height)": "Returns the baseline.",
                "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
                "Border getBorder()": "Returns the border of this component or null if no border is currently set.",
                "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and return rv.",
                "Object getClientProperty(Object key)": "Returns the value of the property with the specified key.",
                "Graphics getComponentGraphics(Graphics g)": "Returns the graphics object used to paint this component.",
                "JPopupMenu getComponentPopupMenu()": "Returns JPopupMenu that assigned for this component.",
                "int getConditionForKeyStroke(KeyStroke aKeyStroke)": "Returns the condition that determines whether a registered action occurs in response to the specified keystroke.",
                "int getDebugGraphicsOptions()": "Returns the state of graphics debugging.",
                "Locale getDefaultLocale()": "Returns the default locale used to initialize each JComponent's locale property upon creation.",
                "FontMetrics getFontMetrics(Font font)": "Gets the font metrics for the specified font.",
                "Graphics getGraphics()": "Creates a graphics context for this component.",
                "int getHeight()": "Returns the current height of this component.",
                "boolean getInheritsPopupMenu()": "Returns true if the JPopupMenu should be inherited from the parent.",
                "InputMap getInputMap()": "Returns the InputMap that is used when the component has focus.",
                "InputMap getInputMap(int condition)": "Returns the InputMap that is used during condition.",
                "InputVerifier getInputVerifier()": "Returns the input verifier for this component.",
                "Insets getInsets()": "Determines the insets of this container, which indicate the size of the container's border.",
                "Insets getInsets(Insets insets)": "Returns an Insets object containing this component's inset values.",
                "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this Component.",
                "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and return rv.",
                "Dimension getMaximumSize()": "Gets the maximum size of this component.",
                "Dimension getMinimumSize()": "Gets the minimum size of this component.",
                "Point getPopupLocation(MouseEvent event)": "Returns the preferred location to display the popup menu in this component's coordinate system.",
                "KeyStroke[] getRegisteredKeyStrokes()": "Returns the KeyStrokes that will initiate registered actions.",
                "JRootPane getRootPane()": "Returns the JRootPane ancestor for this component.",
                "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and return rv.",
                "Point getToolTipLocation(MouseEvent event)": "Returns the tooltip location in this component's coordinate system.",
                "String getToolTipText()": "Returns the tooltip string that has been set with setToolTipText.",
                "Container getTopLevelAncestor()": "Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.",
                "TransferHandler getTransferHandler()": "Gets the transferHandler property.",
                "boolean getVerifyInputWhenFocusTarget()": "Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.",
                "VetoableChangeListener[] getVetoableChangeListeners()": "Returns an array of all the vetoable change listeners registered on this component.",
                "Rectangle getVisibleRect()": "Returns the Component's \"visible rectangle\" - the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.",
                "int getWidth()": "Returns the current width of this component.",
                "int getX()": "Returns the current x coordinate of the components origin.",
                "int getY()": "Returns the current y coordinate of the components origin.",
                "void grabFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean isDoubleBuffered()": "Returns true if this component is painted to an offscreen image (\"buffer\") that's copied to the screen later.",
                "boolean isLightweightComponent(Component c)": "Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.",
                "boolean isOpaque()": "Returns true if this component is completely opaque, returns false by default.",
                "boolean isOptimizedDrawingEnabled()": "Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap.",
                "boolean isPaintingForPrint()": "Returns true if the current painting operation on this component is part of a print operation.",
                "boolean isPaintingOrigin()": "Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors.",
                "boolean isPaintingTile()": "Returns true if the component is currently painting a tile.",
                "boolean isRequestFocusEnabled()": "Returns true if this JComponent should get focus; otherwise returns false.",
                "boolean isValidateRoot()": "Indicates if this container is a validate root.",
                "void paint(Graphics g)": "Paints this component.",
                "void paintBorder(Graphics g)": "Paints the component's border.",
                "void paintChildren(Graphics g)": "Paints this component's children.",
                "void paintComponent(Graphics g)": "Calls the UI delegate's paint method, if the UI delegate is non-null.",
                "void paintImmediately(int x, int y, int w, int h)": "Paints the specified region in this component and all of its descendants that overlap the region, immediately.",
                "void paintImmediately(Rectangle r)": "Paints the specified region now.",
                "void print(Graphics g)": "Prints this component.",
                "void printAll(Graphics g)": "Prints this component and all of its subcomponents.",
                "void printBorder(Graphics g)": "Prints the component's border.",
                "void printChildren(Graphics g)": "Prints this component's children.",
                "void printComponent(Graphics g)": "This is invoked during a printing operation.",
                "void processComponentKeyEvent(KeyEvent e)": "Processes any key events that the component itself recognizes.",
                "boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)": "Invoked to process the key bindings for ks as the result of the KeyEvent e.",
                "void processKeyEvent(KeyEvent e)": "Processes key events occurring on this component by dispatching them to any registered KeyListener objects.",
                "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects.",
                "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.",
                "void putClientProperty(Object key, Object value)": "Adds an arbitrary key/value \"client property\" to this component.",
                "void registerKeyboardAction(ActionListener anAction, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void registerKeyboardAction(ActionListener anAction, String aCommand, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
                "void removeAncestorListener(AncestorListener listener)": "Unregisters listener so that it will no longer receive AncestorEvents.",
                "void removeVetoableChangeListener(VetoableChangeListener listener)": "Removes a VetoableChangeListener from the listener list.",
                "void repaint(long tm, int x, int y, int width, int height)": "Repaints the specified rectangle of this component within tm milliseconds.",
                "void repaint(Rectangle r)": "Adds the specified region to the dirty region list if the component is showing.",
                "void requestFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocus(boolean temporary)": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
                "boolean requestFocusInWindow()": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
                "void resetKeyboardActions()": "Unregisters all the bindings in the first tier InputMaps and ActionMap.",
                "void revalidate()": "Revalidates the component hierarchy up to the nearest validate root.",
                "void scrollRectToVisible(Rectangle aRect)": "Forwards the scrollRectToVisible() message to the JComponent's parent.",
                "void setActionMap(ActionMap am)": "Sets the ActionMap to am.",
                "void setAlignmentX(float alignmentX)": "Sets the the vertical alignment.",
                "void setAlignmentY(float alignmentY)": "Sets the the horizontal alignment.",
                "void setAutoscrolls(boolean autoscrolls)": "Sets the autoscrolls property.",
                "void setBackground(Color bg)": "Sets the background color of this component.",
                "void setBorder(Border border)": "Sets the border of this component.",
                "void setComponentPopupMenu(JPopupMenu popup)": "Sets the JPopupMenu for this JComponent.",
                "void setDebugGraphicsOptions(int debugOptions)": "Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.",
                "void setDefaultLocale(Locale l)": "Sets the default locale used to initialize each JComponent's locale property upon creation.",
                "void setDoubleBuffered(boolean aFlag)": "Sets whether this component should use a buffer to paint.",
                "void setEnabled(boolean enabled)": "Sets whether or not this component is enabled.",
                "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
                "void setFont(Font font)": "Sets the font for this component.",
                "void setForeground(Color fg)": "Sets the foreground color of this component.",
                "void setInheritsPopupMenu(boolean value)": "Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it.",
                "void setInputMap(int condition, InputMap map)": "Sets the InputMap to use under the condition condition to map.",
                "void setInputVerifier(InputVerifier inputVerifier)": "Sets the input verifier for this component.",
                "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
                "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
                "void setOpaque(boolean isOpaque)": "If true the component paints every pixel within its bounds.",
                "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component to a constant value.",
                "void setRequestFocusEnabled(boolean requestFocusEnabled)": "Provides a hint as to whether or not this JComponent should get focus.",
                "void setToolTipText(String text)": "Registers the text to display in a tool tip.",
                "void setTransferHandler(TransferHandler newHandler)": "Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop.",
                "void setUI(ComponentUI newUI)": "Sets the look and feel delegate for this component.",
                "void setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget)": "Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.",
                "void setVisible(boolean aFlag)": "Makes the component visible or invisible.",
                "void unregisterKeyboardAction(KeyStroke aKeyStroke)": "This method is now obsolete.",
                "void update(Graphics g)": "Updates this component.",
                "Component add(Component comp)": "Appends the specified component to the end of this container.",
                "Component add(Component comp, int index)": "Adds the specified component to this container at the given position.",
                "void add(Component comp, Object constraints)": "Adds the specified component to the end of this container.",
                "void add(Component comp, Object constraints, int index)": "Adds the specified component to this container with the specified constraints at the specified index.",
                "Component add(String name, Component comp)": "Adds the specified component to this container.",
                "void addContainerListener(ContainerListener l)": "Adds the specified container listener to receive container events from this container.",
                "void addImpl(Component comp, Object constraints, int index)": "Adds the specified component to this container at the specified index.",
                "void addPropertyChangeListener(PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list.",
                "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list for a specific property.",
                "void applyComponentOrientation(ComponentOrientation o)": "Sets the ComponentOrientation property of this container and all components contained within it.",
                "boolean areFocusTraversalKeysSet(int id)": "Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component.",
                "void doLayout()": "Prompts the layout manager to lay out this component.",
                "Component findComponentAt(int x, int y)": "Locates the visible child component that contains the specified position.",
                "Component findComponentAt(Point p)": "Locates the visible child component that contains the specified point.",
                "Component getComponent(int n)": "Gets the nth component in this container.",
                "Component getComponentAt(int x, int y)": "Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component.",
                "Component getComponentAt(Point p)": "Returns the component or subcomponent that contains the specified point.",
                "int getComponentCount()": "Gets the number of components in this panel.",
                "Component[] getComponents()": "Gets all the components in this container.",
                "int getComponentZOrder(Component comp)": "Returns the z-order index of the component inside the container.",
                "ContainerListener[] getContainerListeners()": "Returns an array of all the container listeners registered on this container.",
                "Set getFocusTraversalKeys(int id)": "Returns the Set of focus traversal keys for a given traversal operation for this Component.",
                "FocusTraversalPolicy getFocusTraversalPolicy()": "Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root.",
                "LayoutManager getLayout()": "Gets the layout manager for this container.",
                "Point getMousePosition(boolean allowChildren)": "Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null.",
                "void invalidate()": "Invalidates this component and its ancestors.",
                "boolean isAncestorOf(Component c)": "Checks if the component is contained in the component hierarchy of this container.",
                "boolean isFocusCycleRoot()": "Returns whether this Container is the root of a focus traversal cycle.",
                "boolean isFocusCycleRoot(Container container)": "Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle.",
                "boolean isFocusTraversalPolicyProvider()": "Returns whether this container provides focus traversal policy.",
                "boolean isFocusTraversalPolicySet()": "Returns whether the focus traversal policy has been explicitly set for this Container.",
                "void list(PrintStream out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print stream.",
                "void list(PrintWriter out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print writer.",
                "void paintComponents(Graphics g)": "Paints each of the components in this container.",
                "void printComponents(Graphics g)": "Prints each of the components in this container.",
                "void processContainerEvent(ContainerEvent e)": "Processes container events occurring on this container by dispatching them to any registered ContainerListener objects.",
                "void processEvent(AWTEvent e)": "Processes events occurring on this component.",
                "void remove(Component comp)": "Removes the specified component from this container.",
                "void remove(int index)": "Removes the component, specified by index, from this container.",
                "void removeAll()": "Removes all the components from this container.",
                "void removeContainerListener(ContainerListener l)": "Removes the specified container listener so it no longer receives container events from this container.",
                "void setComponentZOrder(Component comp, int index)": "Moves the specified component to the specified z-order index in the container.",
                "void setFocusCycleRoot(boolean focusCycleRoot)": "Sets whether this Container is the root of a focus traversal cycle.",
                "void setFocusTraversalPolicy(FocusTraversalPolicy policy)": "Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root.",
                "void setFocusTraversalPolicyProvider(boolean provider)": "Sets whether this container will be used to provide focus traversal policy.",
                "void setFont(Font f)": "Sets the font of this component.",
                "void setLayout(LayoutManager mgr)": "Sets the layout manager for this container.",
                "void transferFocusDownCycle()": "Transfers the focus down one focus traversal cycle.",
                "void validate()": "Validates this component.",
                "void validateTree()": "Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid).",
                "void add(PopupMenu popup)": "Adds the specified popup menu to the component.",
                "void addComponentListener(ComponentListener l)": "Adds the specified component listener to receive component events from this component.",
                "void addFocusListener(FocusListener l)": "Adds the specified focus listener to receive focus events from this component when this component gains input focus.",
                "void addHierarchyBoundsListener(HierarchyBoundsListener l)": "Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.",
                "void addHierarchyListener(HierarchyListener l)": "Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.",
                "void addKeyListener(KeyListener l)": "Adds the specified key listener to receive key events from this component.",
                "void addMouseListener(MouseListener l)": "Adds the specified mouse listener to receive mouse events from this component.",
                "void addMouseMotionListener(MouseMotionListener l)": "Adds the specified mouse motion listener to receive mouse motion events from this component.",
                "void addMouseWheelListener(MouseWheelListener l)": "Adds the specified mouse wheel listener to receive mouse wheel events from this component.",
                "void applyComponentOrientation(ComponentOrientation orientation)": "Sets the ComponentOrientation property of this component and all components contained within it.",
                "int checkImage(Image image, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "int checkImage(Image image, int width, int height, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
                "AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)": "Potentially coalesce an event being posted with an existing event.",
                "boolean contains(Point p)": "Checks whether this component \"contains\" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.",
                "Image createImage(ImageProducer producer)": "Creates an image from the specified image producer.",
                "Image createImage(int width, int height)": "Creates an off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height)": "Creates a volatile off-screen drawable image to be used for double buffering.",
                "VolatileImage createVolatileImage(int width, int height, ImageCapabilities caps)": "Creates a volatile off-screen drawable image, with the given capabilities.",
                "void disableEvents(long eventsToDisable)": "Disables the events defined by the specified event mask parameter from being delivered to this component.",
                "void dispatchEvent(AWTEvent e)": "Dispatches an event to this component or one of its sub components.",
                "void enableEvents(long eventsToEnable)": "Enables the events defined by the specified event mask parameter to be delivered to this component.",
                "void enableInputMethods(boolean enable)": "Enables or disables input method support for this component.",
                "void firePropertyChange(String propertyName, byte oldValue, byte newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, double oldValue, double newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, float oldValue, float newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, long oldValue, long newValue)": "Reports a bound property change.",
                "void firePropertyChange(String propertyName, Object oldValue, Object newValue)": "Support for reporting bound property changes for Object properties.",
                "void firePropertyChange(String propertyName, short oldValue, short newValue)": "Reports a bound property change.",
                "Color getBackground()": "Gets the background color of this component.",
                "Rectangle getBounds()": "Gets the bounds of this component in the form of a Rectangle object.",
                "ColorModel getColorModel()": "Gets the instance of ColorModel used to display the component on the output device.",
                "ComponentListener[] getComponentListeners()": "Returns an array of all the component listeners registered on this component.",
                "ComponentOrientation getComponentOrientation()": "Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.",
                "Cursor getCursor()": "Gets the cursor set in the component.",
                "DropTarget getDropTarget()": "Gets the DropTarget associated with this Component.",
                "Container getFocusCycleRootAncestor()": "Returns the Container which is the focus cycle root of this Component's focus traversal cycle.",
                "FocusListener[] getFocusListeners()": "Returns an array of all the focus listeners registered on this component.",
                "boolean getFocusTraversalKeysEnabled()": "Returns whether focus traversal keys are enabled for this Component.",
                "Font getFont()": "Gets the font of this component.",
                "Color getForeground()": "Gets the foreground color of this component.",
                "GraphicsConfiguration getGraphicsConfiguration()": "Gets the GraphicsConfiguration associated with this Component.",
                "HierarchyBoundsListener[] getHierarchyBoundsListeners()": "Returns an array of all the hierarchy bounds listeners registered on this component.",
                "HierarchyListener[] getHierarchyListeners()": "Returns an array of all the hierarchy listeners registered on this component.",
                "boolean getIgnoreRepaint()": "",
                "InputContext getInputContext()": "Gets the input context used by this component for handling the communication with input methods when text is entered in this component.",
                "InputMethodListener[] getInputMethodListeners()": "Returns an array of all the input method listeners registered on this component.",
                "KeyListener[] getKeyListeners()": "Returns an array of all the key listeners registered on this component.",
                "Locale getLocale()": "Gets the locale of this component.",
                "Point getLocation()": "Gets the location of this component in the form of a point specifying the component's top-left corner.",
                "Point getLocationOnScreen()": "Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.",
                "MouseListener[] getMouseListeners()": "Returns an array of all the mouse listeners registered on this component.",
                "MouseMotionListener[] getMouseMotionListeners()": "Returns an array of all the mouse motion listeners registered on this component.",
                "Point getMousePosition()": "Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null.",
                "MouseWheelListener[] getMouseWheelListeners()": "Returns an array of all the mouse wheel listeners registered on this component.",
                "String getName()": "Gets the name of the component.",
                "Container getParent()": "Gets the parent of this component.",
                "PropertyChangeListener[] getPropertyChangeListeners()": "Returns an array of all the property change listeners registered on this component.",
                "PropertyChangeListener[] getPropertyChangeListeners(String propertyName)": "Returns an array of all the listeners which have been associated with the named property.",
                "Dimension getSize()": "Returns the size of this component in the form of a Dimension object.",
                "Toolkit getToolkit()": "Gets the toolkit of this component.",
                "Object getTreeLock()": "Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.",
                "boolean hasFocus()": "Returns true if this Component is the focus owner.",
                "boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)": "Repaints the component when the image has changed.",
                "boolean isBackgroundSet()": "Returns whether the background color has been explicitly set for this Component.",
                "boolean isCursorSet()": "Returns whether the cursor has been explicitly set for this Component.",
                "boolean isDisplayable()": "Determines whether this component is displayable.",
                "boolean isEnabled()": "Determines whether this component is enabled.",
                "boolean isFocusable()": "Returns whether this Component can be focused.",
                "boolean isFocusOwner()": "Returns true if this Component is the focus owner.",
                "boolean isFontSet()": "Returns whether the font has been explicitly set for this Component.",
                "boolean isForegroundSet()": "Returns whether the foreground color has been explicitly set for this Component.",
                "boolean isLightweight()": "A lightweight component doesn't have a native toolkit peer.",
                "boolean isMaximumSizeSet()": "Returns true if the maximum size has been set to a non-null value otherwise returns false.",
                "boolean isMinimumSizeSet()": "Returns whether or not setMinimumSize has been invoked with a non-null value.",
                "boolean isPreferredSizeSet()": "Returns true if the preferred size has been set to a non-null value otherwise returns false.",
                "boolean isShowing()": "Determines whether this component is showing on screen.",
                "boolean isValid()": "Determines whether this component is valid.",
                "boolean isVisible()": "Determines whether this component should be visible when its parent is visible.",
                "void list()": "Prints a listing of this component to the standard system output stream System.out.",
                "void list(PrintStream out)": "Prints a listing of this component to the specified output stream.",
                "void list(PrintWriter out)": "Prints a listing to the specified print writer.",
                "void paintAll(Graphics g)": "Paints this component and all of its subcomponents.",
                "boolean prepareImage(Image image, ImageObserver observer)": "Prepares an image for rendering on this component.",
                "boolean prepareImage(Image image, int width, int height, ImageObserver observer)": "Prepares an image for rendering on this component at the specified width and height.",
                "void processComponentEvent(ComponentEvent e)": "Processes component events occurring on this component by dispatching them to any registered ComponentListener objects.",
                "void processFocusEvent(FocusEvent e)": "Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.",
                "void processHierarchyBoundsEvent(HierarchyEvent e)": "Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects.",
                "void processHierarchyEvent(HierarchyEvent e)": "Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects.",
                "void processMouseWheelEvent(MouseWheelEvent e)": "Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects.",
                "void remove(MenuComponent popup)": "Removes the specified popup menu from the component.",
                "void removeComponentListener(ComponentListener l)": "Removes the specified component listener so that it no longer receives component events from this component.",
                "void removeFocusListener(FocusListener l)": "Removes the specified focus listener so that it no longer receives focus events from this component.",
                "void removeHierarchyBoundsListener(HierarchyBoundsListener l)": "Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.",
                "void removeHierarchyListener(HierarchyListener l)": "Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.",
                "void removeInputMethodListener(InputMethodListener l)": "Removes the specified input method listener so that it no longer receives input method events from this component.",
                "void removeKeyListener(KeyListener l)": "Removes the specified key listener so that it no longer receives key events from this component.",
                "void removeMouseListener(MouseListener l)": "Removes the specified mouse listener so that it no longer receives mouse events from this component.",
                "void removeMouseMotionListener(MouseMotionListener l)": "Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.",
                "void removeMouseWheelListener(MouseWheelListener l)": "Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.",
                "void removePropertyChangeListener(PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list.",
                "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list for a specific property.",
                "void repaint()": "Repaints this component.",
                "void repaint(int x, int y, int width, int height)": "Repaints the specified rectangle of this component.",
                "void repaint(long tm)": "Repaints the component.",
                "void setBackground(Color c)": "Sets the background color of this component.",
                "void setBounds(int x, int y, int width, int height)": "Moves and resizes this component.",
                "void setBounds(Rectangle r)": "Moves and resizes this component to conform to the new bounding rectangle r.",
                "void setCursor(Cursor cursor)": "Sets the cursor image to the specified cursor.",
                "void setDropTarget(DropTarget dt)": "Associate a DropTarget with this component.",
                "void setEnabled(boolean b)": "Enables or disables this component, depending on the value of the parameter b.",
                "void setFocusable(boolean focusable)": "Sets the focusable state of this Component to the specified value.",
                "void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)": "Sets whether focus traversal keys are enabled for this Component.",
                "void setForeground(Color c)": "Sets the foreground color of this component.",
                "void setIgnoreRepaint(boolean ignoreRepaint)": "Sets whether or not paint messages received from the operating system should be ignored.",
                "void setLocale(Locale l)": "Sets the locale of this component.",
                "void setLocation(int x, int y)": "Moves this component to a new location.",
                "void setLocation(Point p)": "Moves this component to a new location.",
                "void setName(String name)": "Sets the name of the component to the specified string.",
                "void setSize(Dimension d)": "Resizes this component so that it has width d.width and height d.height.",
                "void setSize(int width, int height)": "Resizes this component so that it has width width and height height.",
                "void setVisible(boolean b)": "Shows or hides this component depending on the value of parameter b.",
                "String toString()": "Returns a string representation of this component and its values.",
                "void transferFocus()": "Transfers the focus to the next component, as though this Component were the focus owner.",
                "void transferFocusBackward()": "Transfers the focus to the previous component, as though this Component were the focus owner.",
                "void transferFocusUpCycle()": "Transfers the focus up one focus traversal cycle."
            },
            "super class": [
                "javax.swing.JEditorPane",
                "javax.swing.text.JTextComponent",
                "javax.swing.JComponent",
                "java.awt.Container",
                "java.awt.Component"
            ]
        }
    },
    "java.util.TreeMap": {
        "java.util.TreeMap": {
            "class": "TreeMap",
            "category": "Class",
            "methods": {
                "Map.Entry ceilingEntry(K key)": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.",
                "K ceilingKey(K key)": "Returns the least key greater than or equal to the given key, or null if there is no such key.",
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "Object clone()": "Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.",
                "Comparator comparator()": "Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "NavigableSet descendingKeySet()": "Returns a reverse order NavigableSet view of the keys contained in this map.",
                "NavigableMap descendingMap()": "Returns a reverse order view of the mappings contained in this map.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "Map.Entry firstEntry()": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
                "K firstKey()": "Returns the first (lowest) key currently in this map.",
                "Map.Entry floorEntry(K key)": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.",
                "K floorKey(K key)": "Returns the greatest key less than or equal to the given key, or null if there is no such key.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "SortedMap headMap(K toKey)": "Returns a view of the portion of this map whose keys are strictly less than toKey.",
                "NavigableMap headMap(K toKey, boolean inclusive)": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.",
                "Map.Entry higherEntry(K key)": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.",
                "K higherKey(K key)": "Returns the least key strictly greater than the given key, or null if there is no such key.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "Map.Entry lastEntry()": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
                "K lastKey()": "Returns the last (highest) key currently in this map.",
                "Map.Entry lowerEntry(K key)": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.",
                "K lowerKey(K key)": "Returns the greatest key strictly less than the given key, or null if there is no such key.",
                "NavigableSet navigableKeySet()": "Returns a NavigableSet view of the keys contained in this map.",
                "Map.Entry pollFirstEntry()": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
                "Map.Entry pollLastEntry()": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map map)": "Copies all of the mappings from the specified map to this map.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)": "Returns a view of the portion of this map whose keys range from fromKey to toKey.",
                "SortedMap subMap(K fromKey, K toKey)": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.",
                "SortedMap tailMap(K fromKey)": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey.",
                "NavigableMap tailMap(K fromKey, boolean inclusive)": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "String toString()": "Returns a string representation of this map.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable."
            },
            "super class": [
                "java.util.AbstractMap",
                "java.util.Map",
                "java.util.NavigableMap",
                "java.lang.Iterable"
            ]
        }
    },
    "org.bson.BSONObject": {
        "org.bson.BSONObject": {
            "class": "BSONObject",
            "category": "Interface",
            "methods": {
                "boolean containsField(java.lang.String s)": "Checks if this object contains a field with the given name.",
                "java.lang.Object get(java.lang.String key)": " Gets a field from this object by a given name. ",
                "java.util.Set<java.lang.String> keySet()": " Returns this object's fields' names",
                "java.lang.Object put(java.lang.String key, java.lang.Object v)": " Sets a name/value pair in this object. ",
                "void putAll(BSONObject o)": " Sets all key/value pairs from an object into this object ",
                "void putAll(java.util.Map m)": " Sets all key/value pairs from a map into this object ",
                "java.lang.Object removeField(java.lang.String key)": " Removes a field with a given name from this object. ",
                "java.util.Map toMap()": " Returns a map representing this BSONObject."
            },
            "super class": []
        }
    },
    "org.codehaus.jackson.node.BaseJsonNode": {
        "org.codehaus.jackson.node.BaseJsonNode": {
            "class": "BaseJsonNode",
            "category": "Class",
            "methods": {
                "JsonToken asToken()": "Method that can be used for efficient type detection when using stream abstraction for traversing nodes.",
                "ObjectNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName, List foundSoFar)": "",
                "JsonNode findPath(String fieldName)": "Method similar to JsonNode.findValue(java.lang.String), but that will return a \"missing node\" instead of null if no field is found.",
                "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
                "List findValues(String fieldName, List foundSoFar)": "",
                "List findValuesAsText(String fieldName, List foundSoFar)": "",
                "JsonParser.NumberType getNumberType()": "If this node is a numeric type (as per JsonNode.isNumber()), returns native type that node uses to store the numeric value.",
                "void serialize(JsonGenerator jgen, SerializerProvider provider)": "Method called to serialize node instances using given generator.",
                "void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
                "JsonParser traverse()": "Method for constructing a JsonParser instance for iterating over contents of the tree that this node is root of.",
                "void appendElement(JsonNode node)": "Appends the specified node to the end of this array node.",
                "boolean equals(Object o)": "Let's mark this standard method as to ensure all implementation classes define it.",
                "boolean getBooleanValue()": "Method for accessing boolean value of this node, if and only if this node is value node (method JsonNode.isValueNode() returns true).",
                "BigDecimal getDecimalValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "double getDoubleValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "Iterator<JsonNode> getElements()": "Method for accessing all value nodes of this node, iff this node is a JSON Array or an Object.",
                "JsonNode getElementValue(int index)": "Method for accessing value of the specified element of an array node.",
                "Iterator<String> getFieldNames()": "Method for accessing names of all fields for this JSON Object node.",
                "JsonNode getFieldValue(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "Iterator<JsonNode> getFieldValues()": "Method for accessing all values of fields for this JSON Object node.",
                "int getIntValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "long getLongValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "Number getNumberValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "JsonNode getPath(int index)": "This method is similar to getElementValue(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
                "JsonNode getPath(String fieldName)": "This method is similar to getFieldValue(java.lang.String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
                "String getTextValue()": "Method for accessing textual representation of this node, if and only if this node is a value node (method JsonNode.isValueNode() returns true).",
                "String getValueAsText()": "Method that will return valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise null.",
                "void insertElement(int index, JsonNode value)": "Inserts the specified node at the specified position in this array node.",
                "boolean isArray()": "Method that returns true if this node represents a JSON Array.",
                "boolean isBigDecimal()": "Method that returns true if this node is a numeric node that contains a BigDecimal value.",
                "boolean isBoolean()": "Method that returns true if this node is a boolean node that contains a boolean value.",
                "boolean isContainerNode()": "Method that returns true for container nodes: Arrays and Objects.",
                "boolean isDouble()": "Method that returns true if this node is a numeric node that contains a double value.",
                "boolean isFloatingPointNumber()": "Method that returns true if this node is a numeric node that contains a floating point value.",
                "boolean isInt()": "Method that returns true if this node is a numeric node that contains an int value.",
                "boolean isIntegralNumber()": "Method that returns true if this node is a numeric node that contains an integral (non-floating point) value.",
                "boolean isLong()": "Method that returns true if this node is a numeric node that contains a long value.",
                "boolean isMissingNode()": "Method that returns true for 'virtual' nodes which represent missing entries constructed by path accessor methods when there is no actual node matching given criteria.",
                "boolean isNull()": "Method that returns true if this node is a null node.",
                "boolean isNumber()": "Method that returns true if this node is a numeric node.",
                "boolean isObject()": "Method that returns true if this node represents a JSON Object.",
                "boolean isTextual()": "Method that returns true if this node is a textual node that contains a String value.",
                "boolean isValueNode()": "Method that returns true for all value nodes: ones that are not containers, and that do not represent 'missing' nodes in the path.",
                "JsonNode removeElement(int index)": "Removes the element at the specified position in this array node.",
                "JsonNode removeElement(String fieldName)": "Removes the field with the specified name from this object node.",
                "JsonNode reportNoArrayMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Array node.",
                "JsonNode reportNoObjectMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Object node.",
                "JsonNode setElement(int index, JsonNode value)": "Replaces the element at the specified position in this array node with the specified node.",
                "JsonNode setElement(String fieldName, JsonNode value)": "Replaces the field with the specified name in this object node with the specified value.",
                "int size()": "Returns the number of child nodes of this container node.",
                "String toString()": "Let's mark this standard method as to ensure all implementation classes define it.",
                "void writeTo(JsonGenerator jg)": "Method that can be called to serialize this node and all of its descendants using specified JSON generator."
            },
            "super class": [
                "org.codehaus.jackson.JsonNode"
            ]
        }
    },
    "com.github.javaparser.ast.Node": {
        "com.github.javaparser.ast.Node": {
            "class": "Node",
            "category": "Class",
            "methods": {
                "void addOrphanComment(Comment comment)": "",
                "Node clone()": "",
                "boolean containsData(DataKey key)": "",
                "void customInitialization()": "Called in every constructor for node specific code.",
                "boolean equals(Object obj)": "",
                "Optional findCompilationUnit()": "",
                "Node findRootNode()": "Finds the root node of this AST by finding the topmost parent.",
                "List getAllContainedComments()": "This is the list of Comment which are contained in the Node either because they are properly associated to one of its children or because they are floating around inside the Node",
                "List getChildNodes()": "Contains all nodes that have this node set as their parent.",
                "List getChildNodesByType(Class clazz)": "Recursively finds all nodes of a certain type.",
                "Optional getComment()": "This is a comment associated with this node.",
                "M getData(DataKey key)": "Gets data for this node using the given key.",
                "NodeMetaModel getMetaModel()": "",
                "List getOrphanComments()": "This is a list of Comment which are inside the node and are not associated with any meaningful AST Node.",
                "Optional getParentNode()": "Return the parent node or null, if no parent is set.",
                "Node getParentNodeForChildren()": "this for everything except NodeLists.",
                "Node.Parsedness getParsed()": "",
                "Optional getRange()": "",
                "SymbolResolver getSymbolResolver()": "",
                "Optional getTokenRange()": "",
                "int hashCode()": "",
                "boolean isRegistered(AstObserver observer)": "Was this observer registered? Note that equals is used to determine if the given observer was registered.",
                "void notifyPropertyChange(ObservableProperty property, P oldValue, P newValue)": "",
                "void register(AstObserver observer)": "Register an observer.",
                "void register(AstObserver observer, Node.ObserverRegistrationMode mode)": "Register a new observer for the given node.",
                "void registerForSubtree(AstObserver observer)": "Register the observer for the current node and all the contained node and nodelists, recursively.",
                "boolean remove()": "Try to remove this node from the parent",
                "boolean remove(Node node)": "",
                "Node removeComment()": "",
                "void removeForced()": "Forcibly removes this node from the AST.",
                "boolean removeOrphanComment(Comment comment)": "",
                "boolean replace(Node node)": "Try to replace this node in the parent with the supplied node.",
                "boolean replace(Node node, Node replacementNode)": "",
                "void setAsParentNodeOf(Node childNode)": "",
                "void setAsParentNodeOf(NodeList list)": "",
                "Node setBlockComment(String comment)": "Use this to store additional information to this node.",
                "Node setComment(Comment comment)": "Use this to store additional information to this node.",
                "void setData(DataKey key, M object)": "Sets data for this node using the given key.",
                "Node setLineComment(String comment)": "Use this to store additional information to this node.",
                "Node setParentNode(Node newParentNode)": "Assign a new parent to this node, removing it from the list of children of the previous parent, if any.",
                "Node setParsed(Node.Parsedness parsed)": "Used by the parser to flag unparsable nodes.",
                "Node setRange(Range range)": "",
                "Node setTokenRange(TokenRange tokenRange)": "",
                "String toString()": "Return the String representation of this node.",
                "String toString(PrettyPrinterConfiguration prettyPrinterConfiguration)": "",
                "void tryAddImportToParentCompilationUnit(Class clazz)": "",
                "void unregister(AstObserver observer)": "Unregister an observer."
            },
            "super class": []
        }
    },
    "java.util.EnumMap": {
        "java.util.EnumMap": {
            "class": "EnumMap",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "EnumMap clone()": "Returns a shallow copy of this enum map.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "Object clone()": "Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "String toString()": "Returns a string representation of this map.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception."
            },
            "super class": [
                "java.util.AbstractMap",
                "java.util.Map"
            ]
        }
    },
    "com.google.common.collect.Maps": {
        "com.google.common.collect.Maps": {
            "class": "Maps",
            "category": "Class",
            "methods": {
                "Converter asConverter(BiMap bimap)": "Returns a Converter that converts values using bimap.get(), and whose inverse view converts values using bimap.inverse().get().",
                "NavigableMap asMap(NavigableSet set, Function function)": "Returns a view of the navigable set as a map, mapping keys from the set according to the specified function.",
                "Map asMap(Set set, Function function)": "Returns a live Map view whose keys are the contents of set and whose values are computed on demand using function.",
                "SortedMap asMap(SortedSet set, Function function)": "Returns a view of the sorted set as a map, mapping keys from the set according to the specified function.",
                "MapDifference difference(Map left, Map right)": "Computes the difference between two maps.",
                "MapDifference difference(Map left, Map right, Equivalence valueEquivalence)": "Computes the difference between two maps.",
                "SortedMapDifference difference(SortedMap left, Map right)": "Computes the difference between two sorted maps, using the comparator of the left map, or Ordering.natural() if the left map uses the natural ordering of its elements.",
                "BiMap filterEntries(BiMap unfiltered, Predicate entryPredicate)": "Returns a bimap containing the mappings in unfiltered that satisfy a predicate.",
                "Map filterEntries(Map unfiltered, Predicate entryPredicate)": "Returns a map containing the mappings in unfiltered that satisfy a predicate.",
                "NavigableMap filterEntries(NavigableMap unfiltered, Predicate entryPredicate)": "Returns a sorted map containing the mappings in unfiltered that satisfy a predicate.",
                "SortedMap filterEntries(SortedMap unfiltered, Predicate entryPredicate)": "Returns a sorted map containing the mappings in unfiltered that satisfy a predicate.",
                "BiMap filterKeys(BiMap unfiltered, Predicate keyPredicate)": "Returns a bimap containing the mappings in unfiltered whose keys satisfy a predicate.",
                "Map filterKeys(Map unfiltered, Predicate keyPredicate)": "Returns a map containing the mappings in unfiltered whose keys satisfy a predicate.",
                "NavigableMap filterKeys(NavigableMap unfiltered, Predicate keyPredicate)": "Returns a navigable map containing the mappings in unfiltered whose keys satisfy a predicate.",
                "SortedMap filterKeys(SortedMap unfiltered, Predicate keyPredicate)": "Returns a sorted map containing the mappings in unfiltered whose keys satisfy a predicate.",
                "BiMap filterValues(BiMap unfiltered, Predicate valuePredicate)": "Returns a bimap containing the mappings in unfiltered whose values satisfy a predicate.",
                "Map filterValues(Map unfiltered, Predicate valuePredicate)": "Returns a map containing the mappings in unfiltered whose values satisfy a predicate.",
                "NavigableMap filterValues(NavigableMap unfiltered, Predicate valuePredicate)": "Returns a navigable map containing the mappings in unfiltered whose values satisfy a predicate.",
                "SortedMap filterValues(SortedMap unfiltered, Predicate valuePredicate)": "Returns a sorted map containing the mappings in unfiltered whose values satisfy a predicate.",
                "ImmutableMap fromProperties(Properties properties)": "Creates an ImmutableMap<String, String> from a Properties instance.",
                "Map.Entry immutableEntry(K key, V value)": "Returns an immutable map entry with the specified key and value.",
                "ImmutableMap immutableEnumMap(Map map)": "Returns an immutable map instance containing the given entries.",
                "ConcurrentMap newConcurrentMap()": "Returns a general-purpose instance of ConcurrentMap, which supports all optional operations of the ConcurrentMap interface.",
                "EnumMap newEnumMap(Class type)": "Creates an EnumMap instance.",
                "EnumMap newEnumMap(Map map)": "Creates an EnumMap with the same mappings as the specified map.",
                "HashMap newHashMap()": "Creates a mutable, empty HashMap instance.",
                "HashMap newHashMap(Map map)": "Creates a mutable HashMap instance with the same mappings as the specified map.",
                "HashMap newHashMapWithExpectedSize(int expectedSize)": "Creates a HashMap instance, with a high enough \"initial capacity\" that it should hold expectedSize elements without growth.",
                "IdentityHashMap newIdentityHashMap()": "Creates an IdentityHashMap instance.",
                "LinkedHashMap newLinkedHashMap()": "Creates a mutable, empty, insertion-ordered LinkedHashMap instance.",
                "LinkedHashMap newLinkedHashMap(Map map)": "Creates a mutable, insertion-ordered LinkedHashMap instance with the same mappings as the specified map.",
                "LinkedHashMap newLinkedHashMapWithExpectedSize(int expectedSize)": "Creates a LinkedHashMap instance, with a high enough \"initial capacity\" that it should hold expectedSize elements without growth.",
                "TreeMap newTreeMap()": "Creates a mutable, empty TreeMap instance using the natural ordering of its elements.",
                "TreeMap newTreeMap(Comparator comparator)": "Creates a mutable, empty TreeMap instance using the given comparator.",
                "TreeMap newTreeMap(SortedMap map)": "Creates a mutable TreeMap instance with the same mappings as the specified map and using the same ordering as the specified map.",
                "BiMap synchronizedBiMap(BiMap bimap)": "Returns a synchronized (thread-safe) bimap backed by the specified bimap.",
                "NavigableMap synchronizedNavigableMap(NavigableMap navigableMap)": "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map.",
                "ImmutableMap toMap(Iterable keys, Function valueFunction)": "Returns an immutable map whose keys are the distinct elements of keys and whose value for each key was computed by valueFunction.",
                "ImmutableMap toMap(Iterator keys, Function valueFunction)": "Returns an immutable map whose keys are the distinct elements of keys and whose value for each key was computed by valueFunction.",
                "Map transformEntries(Map fromMap, Maps.EntryTransformer transformer)": "Returns a view of a map whose values are derived from the original map's entries.",
                "NavigableMap transformEntries(NavigableMap fromMap, Maps.EntryTransformer transformer)": "Returns a view of a navigable map whose values are derived from the original navigable map's entries.",
                "SortedMap transformEntries(SortedMap fromMap, Maps.EntryTransformer transformer)": "Returns a view of a sorted map whose values are derived from the original sorted map's entries.",
                "Map transformValues(Map fromMap, Function function)": "Returns a view of a map where each value is transformed by a function.",
                "NavigableMap transformValues(NavigableMap fromMap, Function function)": "Returns a view of a navigable map where each value is transformed by a function.",
                "SortedMap transformValues(SortedMap fromMap, Function function)": "Returns a view of a sorted map where each value is transformed by a function.",
                "ImmutableMap uniqueIndex(Iterable values, Function keyFunction)": "Returns a map with the given values, indexed by keys derived from those values.",
                "ImmutableMap uniqueIndex(Iterator values, Function keyFunction)": "Returns a map with the given values, indexed by keys derived from those values.",
                "BiMap unmodifiableBiMap(BiMap bimap)": "Returns an unmodifiable view of the specified bimap.",
                "NavigableMap unmodifiableNavigableMap(NavigableMap map)": "Returns an unmodifiable view of the specified navigable map."
            },
            "super class": []
        }
    },
    "java.nio.ByteBuffer": {
        "java.nio.ByteBuffer": {
            "class": "ByteBuffer",
            "category": "Class",
            "methods": {
                "ByteBuffer allocate(int capacity)": "Allocates a new byte buffer.",
                "ByteBuffer allocateDirect(int capacity)": "Allocates a new direct byte buffer.",
                "byte[] array()": "Returns the byte array that backs this buffer (optional operation).",
                "int arrayOffset()": "Returns the offset within this buffer's backing array of the first element of the buffer (optional operation).",
                "CharBuffer asCharBuffer()": "Creates a view of this byte buffer as a char buffer.",
                "DoubleBuffer asDoubleBuffer()": "Creates a view of this byte buffer as a double buffer.",
                "FloatBuffer asFloatBuffer()": "Creates a view of this byte buffer as a float buffer.",
                "IntBuffer asIntBuffer()": "Creates a view of this byte buffer as an int buffer.",
                "LongBuffer asLongBuffer()": "Creates a view of this byte buffer as a long buffer.",
                "ByteBuffer asReadOnlyBuffer()": "Creates a new, read-only byte buffer that shares this buffer's content.",
                "ShortBuffer asShortBuffer()": "Creates a view of this byte buffer as a short buffer.",
                "ByteBuffer compact()": "Compacts this buffer (optional operation).",
                "int compareTo(ByteBuffer that)": "Compares this buffer to another.",
                "ByteBuffer duplicate()": "Creates a new byte buffer that shares this buffer's content.",
                "boolean equals(Object ob)": "Tells whether or not this buffer is equal to another object.",
                "byte get()": "Relative get method.",
                "ByteBuffer get(byte[] dst)": "Relative bulk get method.",
                "ByteBuffer get(byte[] dst, int offset, int length)": "Relative bulk get method.",
                "byte get(int index)": "Absolute get method.",
                "char getChar()": "Relative get method for reading a char value.",
                "char getChar(int index)": "Absolute get method for reading a char value.",
                "double getDouble()": "Relative get method for reading a double value.",
                "double getDouble(int index)": "Absolute get method for reading a double value.",
                "float getFloat()": "Relative get method for reading a float value.",
                "float getFloat(int index)": "Absolute get method for reading a float value.",
                "int getInt()": "Relative get method for reading an int value.",
                "int getInt(int index)": "Absolute get method for reading an int value.",
                "long getLong()": "Relative get method for reading a long value.",
                "long getLong(int index)": "Absolute get method for reading a long value.",
                "short getShort()": "Relative get method for reading a short value.",
                "short getShort(int index)": "Absolute get method for reading a short value.",
                "boolean hasArray()": "Tells whether or not this buffer is backed by an accessible array.",
                "int hashCode()": "Returns the current hash code of this buffer.",
                "boolean isDirect()": "Tells whether or not this buffer is direct.",
                "ByteOrder order()": "Retrieves this buffer's byte order.",
                "ByteBuffer order(ByteOrder bo)": "Modifies this buffer's byte order.",
                "ByteBuffer put(byte b)": "Relative put method (optional operation).",
                "ByteBuffer put(byte[] src)": "Relative bulk put method (optional operation).",
                "ByteBuffer put(byte[] src, int offset, int length)": "Relative bulk put method (optional operation).",
                "ByteBuffer put(ByteBuffer src)": "Relative bulk put method (optional operation).",
                "ByteBuffer put(int index, byte b)": "Absolute put method (optional operation).",
                "ByteBuffer putChar(char value)": "Relative put method for writing a char value (optional operation).",
                "ByteBuffer putChar(int index, char value)": "Absolute put method for writing a char value (optional operation).",
                "ByteBuffer putDouble(double value)": "Relative put method for writing a double value (optional operation).",
                "ByteBuffer putDouble(int index, double value)": "Absolute put method for writing a double value (optional operation).",
                "ByteBuffer putFloat(float value)": "Relative put method for writing a float value (optional operation).",
                "ByteBuffer putFloat(int index, float value)": "Absolute put method for writing a float value (optional operation).",
                "ByteBuffer putInt(int value)": "Relative put method for writing an int value (optional operation).",
                "ByteBuffer putInt(int index, int value)": "Absolute put method for writing an int value (optional operation).",
                "ByteBuffer putLong(int index, long value)": "Absolute put method for writing a long value (optional operation).",
                "ByteBuffer putLong(long value)": "Relative put method for writing a long value (optional operation).",
                "ByteBuffer putShort(int index, short value)": "Absolute put method for writing a short value (optional operation).",
                "ByteBuffer putShort(short value)": "Relative put method for writing a short value (optional operation).",
                "ByteBuffer slice()": "Creates a new byte buffer whose content is a shared subsequence of this buffer's content.",
                "String toString()": "Returns a string summarizing the state of this buffer.",
                "ByteBuffer wrap(byte[] array)": "Wraps a byte array into a buffer.",
                "ByteBuffer wrap(byte[] array, int offset, int length)": "Wraps a byte array into a buffer.",
                "Object array()": "Returns the array that backs this buffer (optional operation).",
                "int capacity()": "Returns this buffer's capacity.",
                "Buffer clear()": "Clears this buffer.",
                "Buffer flip()": "Flips this buffer.",
                "boolean hasRemaining()": "Tells whether there are any elements between the current position and the limit.",
                "boolean isReadOnly()": "Tells whether or not this buffer is read-only.",
                "int limit()": "Returns this buffer's limit.",
                "Buffer limit(int newLimit)": "Sets this buffer's limit.",
                "Buffer mark()": "Sets this buffer's mark at its position.",
                "int position()": "Returns this buffer's position.",
                "Buffer position(int newPosition)": "Sets this buffer's position.",
                "int remaining()": "Returns the number of elements between the current position and the limit.",
                "Buffer reset()": "Resets this buffer's position to the previously-marked position.",
                "Buffer rewind()": "Rewinds this buffer."
            },
            "super class": [
                "java.nio.Buffer"
            ]
        }
    },
    "com.fasterxml.jackson.databind.node.BaseJsonNode": {
        "com.fasterxml.jackson.databind.node.BaseJsonNode": {
            "class": "BaseJsonNode",
            "category": "Class",
            "methods": {
                "com.fasterxml.jackson.core.JsonToken asToken()": "Method that can be used for efficient type detection when using stream abstraction for traversing nodes.",
                "JsonNode findPath(String fieldName)": "Method similar to findValue(java.lang.String), but that will return a \"missing node\" instead of null if no field is found.",
                "com.fasterxml.jackson.core.JsonParser.NumberType numberType()": "Returns code that identifies type of underlying numeric value, if (and only if) node is a number node.",
                "void serialize(com.fasterxml.jackson.core.JsonGenerator jgen, SerializerProvider provider)": "Method called to serialize node instances using given generator.",
                "void serializeWithType(com.fasterxml.jackson.core.JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
                "com.fasterxml.jackson.core.JsonParser traverse()": "",
                "com.fasterxml.jackson.core.JsonParser traverse(com.fasterxml.jackson.core.ObjectCodec codec)": "",
                "JsonNode _at(com.fasterxml.jackson.core.JsonPointer ptr)": "",
                "boolean asBoolean()": "Method that will try to convert value of this node to a Java boolean.",
                "boolean asBoolean(boolean defaultValue)": "Method that will try to convert value of this node to a Java boolean.",
                "double asDouble()": "Method that will try to convert value of this node to a Java double.",
                "double asDouble(double defaultValue)": "Method that will try to convert value of this node to a Java double.",
                "int asInt()": "Method that will try to convert value of this node to a Java int.",
                "int asInt(int defaultValue)": "Method that will try to convert value of this node to a Java int.",
                "long asLong()": "Method that will try to convert value of this node to a Java long.",
                "long asLong(long defaultValue)": "Method that will try to convert value of this node to a Java long.",
                "String asText()": "Method that will return a valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise empty String.",
                "String asText(String defaultValue)": "Method similar to asText(), except that it will return defaultValue in cases where null value would be returned; either for missing nodes (trying to access missing property, or element at invalid item for array) or explicit nulls.",
                "JsonNode at(com.fasterxml.jackson.core.JsonPointer ptr)": "Method for locating node specified by given JSON pointer instances.",
                "JsonNode at(String jsonPtrExpr)": "Convenience method that is functionally equivalent to:",
                "BigInteger bigIntegerValue()": "",
                "byte[] binaryValue()": "Method to use for accessing binary content of binary nodes (nodes for which isBinary() returns true); or for Text Nodes (ones for which textValue() returns non-null value), to read decoded base64 data.",
                "boolean booleanValue()": "Method to use for accessing JSON boolean values (value literals 'true' and 'false').",
                "boolean canConvertToInt()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 32-bit signed integer type, int.",
                "boolean canConvertToLong()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 64-bit signed integer type, long.",
                "BigDecimal decimalValue()": "",
                "T deepCopy()": "Method that can be called to get a node that is guaranteed not to allow changing of this node through mutators on this node or any of its children.",
                "double doubleValue()": "Returns 64-bit floating point (double) value for this node, if and only if this node is numeric (isNumber() returns true).",
                "Iterator elements()": "Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node.",
                "boolean equals(Comparator comparator, JsonNode other)": "Entry method for invoking customizable comparison, using passed-in Comparator object.",
                "boolean equals(Object o)": "Equality for node objects is defined as full (deep) value equality.",
                "Iterator fieldNames()": "",
                "Iterator fields()": "",
                "JsonNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName, List foundSoFar)": "",
                "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
                "List findValues(String fieldName)": "Method for finding JSON Object fields with specified name, and returning found ones as a List.",
                "List findValues(String fieldName, List foundSoFar)": "",
                "List findValuesAsText(String fieldName)": "Similar to findValues(java.lang.String), but will additionally convert values into Strings, calling asText().",
                "List findValuesAsText(String fieldName, List foundSoFar)": "",
                "float floatValue()": "Returns 32-bit floating value for this node, if and only if this node is numeric (isNumber() returns true).",
                "JsonNode get(int index)": "Method for accessing value of the specified element of an array node.",
                "JsonNode get(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "JsonNodeType getNodeType()": "Return the type of this node",
                "boolean has(int index)": "Method that allows checking whether this node is JSON Array node and contains a value for specified index If this is the case (including case of specified indexing having null as value), returns true; otherwise returns false.",
                "boolean has(String fieldName)": "Method that allows checking whether this node is JSON Object node and contains value for specified property.",
                "boolean hasNonNull(int index)": "Method that is similar to has(int), but that will return false for explicitly added nulls.",
                "boolean hasNonNull(String fieldName)": "Method that is similar to has(String), but that will return false for explicitly added nulls.",
                "int intValue()": "Returns integer value for this node, if and only if this node is numeric (isNumber() returns true).",
                "boolean isArray()": "",
                "boolean isBigDecimal()": "",
                "boolean isBigInteger()": "",
                "boolean isBinary()": "Method that can be used to check if this node represents binary data (Base64 encoded).",
                "boolean isBoolean()": "Method that can be used to check if this node was created from JSON boolean value (literals \"true\" and \"false\").",
                "boolean isContainerNode()": "",
                "boolean isDouble()": "",
                "boolean isFloat()": "",
                "boolean isFloatingPointNumber()": "",
                "boolean isInt()": "Method that can be used to check whether contained value is a number represented as Java int.",
                "boolean isIntegralNumber()": "",
                "boolean isLong()": "Method that can be used to check whether contained value is a number represented as Java long.",
                "boolean isMissingNode()": "",
                "boolean isNull()": "Method that can be used to check if this node was created from JSON literal null value.",
                "boolean isNumber()": "",
                "boolean isObject()": "",
                "boolean isPojo()": "Method that can be used to check if the node is a wrapper for a POJO (\"Plain Old Java Object\" aka \"bean\".",
                "boolean isShort()": "Method that can be used to check whether contained value is a number represented as Java short.",
                "boolean isTextual()": "Method that checks whether this node represents basic JSON String value.",
                "boolean isValueNode()": "",
                "Iterator iterator()": "Same as calling elements(); implemented so that convenience \"for-each\" loop can be used for looping over elements of JSON Array constructs.",
                "long longValue()": "Returns 64-bit long value for this node, if and only if this node is numeric (isNumber() returns true).",
                "Number numberValue()": "Returns numeric value for this node, if and only if this node is numeric (isNumber() returns true); otherwise returns null",
                "JsonNode path(int index)": "This method is similar to get(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "JsonNode path(String fieldName)": "This method is similar to get(String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "short shortValue()": "Returns 16-bit short value for this node, if and only if this node is numeric (isNumber() returns true).",
                "int size()": "",
                "String textValue()": "Method to use for accessing String values.",
                "String toString()": "Note: marked as abstract to ensure all implementation classes define it properly.",
                "JsonNode with(String propertyName)": "Method that can be called on Object nodes, to access a property that has Object value; or if no such property exists, to create, add and return such Object node.",
                "JsonNode withArray(String propertyName)": "Method that can be called on Object nodes, to access a property that has Array value; or if no such property exists, to create, add and return such Array node.",
                "boolean isEmpty(SerializerProvider serializers)": "Method that may be called on instance to determine if it is considered \"empty\" for purposes of serialization filtering or not."
            },
            "super class": [
                "com.fasterxml.jackson.databind.JsonNode",
                "com.fasterxml.jackson.databind.JsonSerializable.Base"
            ]
        }
    },
    "org.eclipse.jface.resource.ImageRegistry": {
        "org.eclipse.jface.resource.ImageRegistry": {
            "class": "ImageRegistry",
            "category": "Class",
            "methods": {
                "Image get(String key)": "Returns the image associated with the given key in this registry, or null if none.",
                "void put(String key, Image image)": "Adds an image to this registry.",
                "void put(String key, ImageDescriptor descriptor)": "Adds (or replaces) an image descriptor to this registry."
            },
            "super class": []
        }
    },
    "java.util.concurrent.atomic.AtomicReference": {
        "java.util.concurrent.atomic.AtomicReference": {
            "class": "AtomicReference",
            "category": "Class",
            "methods": {
                "V accumulateAndGet(V x, BinaryOperator accumulatorFunction)": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value.",
                "boolean compareAndSet(V expect, V update)": "Atomically sets the value to the given updated value if the current value == the expected value.",
                "V get()": "Gets the current value.",
                "V getAndAccumulate(V x, BinaryOperator accumulatorFunction)": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value.",
                "V getAndSet(V newValue)": "Atomically sets to the given value and returns the old value.",
                "V getAndUpdate(UnaryOperator updateFunction)": "Atomically updates the current value with the results of applying the given function, returning the previous value.",
                "void lazySet(V newValue)": "Eventually sets to the given value.",
                "void set(V newValue)": "Sets to the given value.",
                "String toString()": "Returns the String representation of the current value.",
                "V updateAndGet(UnaryOperator updateFunction)": "Atomically updates the current value with the results of applying the given function, returning the updated value.",
                "boolean weakCompareAndSet(V expect, V update)": "Atomically sets the value to the given updated value if the current value == the expected value."
            },
            "super class": []
        }
    },
    "java.lang.StringBuffer": {
        "java.lang.StringBuffer": {
            "class": "StringBuffer",
            "category": "Class",
            "methods": {
                "StringBuffer append(boolean b)": "Appends the string representation of the boolean argument to the sequence.",
                "StringBuffer append(char c)": "Appends the string representation of the char argument to this sequence.",
                "StringBuffer append(char[] str)": "Appends the string representation of the char array argument to this sequence.",
                "StringBuffer append(char[] str, int offset, int len)": "Appends the string representation of a subarray of the char array argument to this sequence.",
                "StringBuffer append(CharSequence s)": "Appends the specified CharSequence to this sequence.",
                "StringBuffer append(CharSequence s, int start, int end)": "Appends a subsequence of the specified CharSequence to this sequence.",
                "StringBuffer append(double d)": "Appends the string representation of the double argument to this sequence.",
                "StringBuffer append(float f)": "Appends the string representation of the float argument to this sequence.",
                "StringBuffer append(int i)": "Appends the string representation of the int argument to this sequence.",
                "StringBuffer append(long lng)": "Appends the string representation of the long argument to this sequence.",
                "StringBuffer append(Object obj)": "Appends the string representation of the Object argument.",
                "StringBuffer append(String str)": "Appends the specified string to this character sequence.",
                "StringBuffer append(StringBuffer sb)": "Appends the specified StringBuffer to this sequence.",
                "StringBuffer appendCodePoint(int codePoint)": "Appends the string representation of the codePoint argument to this sequence.",
                "int capacity()": "Returns the current capacity.",
                "char charAt(int index)": "Returns the char value in this sequence at the specified index.",
                "int codePointAt(int index)": "Returns the character (Unicode code point) at the specified index.",
                "int codePointBefore(int index)": "Returns the character (Unicode code point) before the specified index.",
                "int codePointCount(int beginIndex, int endIndex)": "Returns the number of Unicode code points in the specified text range of this sequence.",
                "StringBuffer delete(int start, int end)": "Removes the characters in a substring of this sequence.",
                "StringBuffer deleteCharAt(int index)": "Removes the char at the specified position in this sequence.",
                "void ensureCapacity(int minimumCapacity)": "Ensures that the capacity is at least equal to the specified minimum.",
                "void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)": "Characters are copied from this sequence into the destination character array dst.",
                "int indexOf(String str)": "Returns the index within this string of the first occurrence of the specified substring.",
                "int indexOf(String str, int fromIndex)": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.",
                "StringBuffer insert(int offset, boolean b)": "Inserts the string representation of the boolean argument into this sequence.",
                "StringBuffer insert(int offset, char c)": "Inserts the string representation of the char argument into this sequence.",
                "StringBuffer insert(int offset, char[] str)": "Inserts the string representation of the char array argument into this sequence.",
                "StringBuffer insert(int index, char[] str, int offset, int len)": "Inserts the string representation of a subarray of the str array argument into this sequence.",
                "StringBuffer insert(int dstOffset, CharSequence s)": "Inserts the specified CharSequence into this sequence.",
                "StringBuffer insert(int dstOffset, CharSequence s, int start, int end)": "Inserts a subsequence of the specified CharSequence into this sequence.",
                "StringBuffer insert(int offset, double d)": "Inserts the string representation of the double argument into this sequence.",
                "StringBuffer insert(int offset, float f)": "Inserts the string representation of the float argument into this sequence.",
                "StringBuffer insert(int offset, int i)": "Inserts the string representation of the second int argument into this sequence.",
                "StringBuffer insert(int offset, long l)": "Inserts the string representation of the long argument into this sequence.",
                "StringBuffer insert(int offset, Object obj)": "Inserts the string representation of the Object argument into this character sequence.",
                "StringBuffer insert(int offset, String str)": "Inserts the string into this character sequence.",
                "int lastIndexOf(String str)": "Returns the index within this string of the rightmost occurrence of the specified substring.",
                "int lastIndexOf(String str, int fromIndex)": "Returns the index within this string of the last occurrence of the specified substring.",
                "int length()": "Returns the length (character count).",
                "int offsetByCodePoints(int index, int codePointOffset)": "Returns the index within this sequence that is offset from the given index by codePointOffset code points.",
                "StringBuffer replace(int start, int end, String str)": "Replaces the characters in a substring of this sequence with characters in the specified String.",
                "StringBuffer reverse()": "Causes this character sequence to be replaced by the reverse of the sequence.",
                "void setCharAt(int index, char ch)": "The character at the specified index is set to ch.",
                "void setLength(int newLength)": "Sets the length of the character sequence.",
                "CharSequence subSequence(int start, int end)": "Returns a new character sequence that is a subsequence of this sequence.",
                "String substring(int start)": "Returns a new String that contains a subsequence of characters currently contained in this character sequence.",
                "String substring(int start, int end)": "Returns a new String that contains a subsequence of characters currently contained in this sequence.",
                "String toString()": "Returns a string representing the data in this sequence.",
                "void trimToSize()": "Attempts to reduce storage used for the character sequence."
            },
            "super class": []
        }
    },
    "org.codehaus.jackson.node.ObjectNode": {
        "org.codehaus.jackson.node.ObjectNode": {
            "class": "ObjectNode",
            "category": "Class",
            "methods": {
                "JsonToken asToken()": "Method that can be used for efficient type detection when using stream abstraction for traversing nodes.",
                "boolean equals(Object o)": "Let's mark this standard method as to ensure all implementation classes define it.",
                "ObjectNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName, List foundSoFar)": "",
                "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
                "List findValues(String fieldName, List foundSoFar)": "",
                "List findValuesAsText(String fieldName, List foundSoFar)": "",
                "JsonNode get(int index)": "Method for accessing value of the specified element of an array node.",
                "JsonNode get(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "Iterator getElements()": "Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node.",
                "Iterator getFieldNames()": "Method for accessing names of all fields for this Node, iff this node is a JSON Object node.",
                "Iterator getFields()": "Method to use for accessing all fields (with both names and values) of this JSON Object.",
                "int hashCode()": "",
                "boolean isObject()": "Method that returns true if this node represents a JSON Object.",
                "JsonNode path(int index)": "This method is similar to JsonNode.get(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a \"missing node\" (node that returns true for JsonNode.isMissingNode()) will be returned.",
                "JsonNode path(String fieldName)": "This method is similar to JsonNode.get(String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a \"missing node\" (node that returns true for JsonNode.isMissingNode()) will be returned.",
                "void put(String fieldName, BigDecimal v)": "Method for setting value of a field to specified numeric value.",
                "void put(String fieldName, boolean v)": "Method for setting value of a field to specified String value.",
                "void put(String fieldName, Boolean value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "void put(String fieldName, byte[] v)": "Method for setting value of a field to specified binary value",
                "void put(String fieldName, double v)": "Method for setting value of a field to specified numeric value.",
                "void put(String fieldName, Double value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "void put(String fieldName, float v)": "Method for setting value of a field to specified numeric value.",
                "void put(String fieldName, Float value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "void put(String fieldName, int v)": "Method for setting value of a field to specified numeric value.",
                "void put(String fieldName, Integer value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "JsonNode put(String fieldName, JsonNode value)": "Method that will set specified field, replacing old value, if any.",
                "void put(String fieldName, long v)": "Method for setting value of a field to specified numeric value.",
                "void put(String fieldName, Long value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "void put(String fieldName, String v)": "Method for setting value of a field to specified String value.",
                "JsonNode putAll(Map properties)": "Method for adding given properties to this object node, overriding any existing values for those properties.",
                "JsonNode putAll(ObjectNode other)": "Method for adding all properties of the given Object, overriding any existing values for those properties.",
                "ArrayNode putArray(String fieldName)": "Method that will construct an ArrayNode and add it as a field of this ObjectNode, replacing old value, if any.",
                "void putContentsTo(Map dst)": "",
                "void putNull(String fieldName)": "",
                "ObjectNode putObject(String fieldName)": "Method that will construct an ObjectNode and add it as a field of this ObjectNode, replacing old value, if any.",
                "void putPOJO(String fieldName, Object pojo)": "",
                "ObjectNode remove(Collection fieldNames)": "Method for removing specified field properties out of this ObjectNode.",
                "JsonNode remove(String fieldName)": "Method for removing field entry from this ObjectNode.",
                "ObjectNode removeAll()": "Method for removing all field properties, such that this ObjectNode will contain no properties after call.",
                "ObjectNode retain(Collection fieldNames)": "Method for removing all field properties out of this ObjectNode except for ones specified in argument.",
                "ObjectNode retain(String... fieldNames)": "Method for removing all field properties out of this ObjectNode except for ones specified in argument.",
                "void serialize(JsonGenerator jg, SerializerProvider provider)": "Method that can be called to serialize this node and all of its descendants using specified JSON generator.",
                "void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
                "int size()": "Returns the number of child nodes of this container node.",
                "String toString()": "Let's mark this standard method as to ensure all implementation classes define it.",
                "ObjectNode with(String propertyName)": "Method that can be called on object nodes, to access a property that has object value; or if no such property exists, to create and return such object node.",
                "void appendElement(JsonNode node)": "Appends the specified node to the end of this array node.",
                "JsonNode getElementValue(int index)": "Method for accessing value of the specified element of an array node.",
                "JsonNode getFieldValue(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "String getValueAsText()": "Method that will return valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise null.",
                "void insertElement(int index, JsonNode value)": "Inserts the specified node at the specified position in this array node.",
                "boolean isContainerNode()": "Method that returns true for container nodes: Arrays and Objects.",
                "JsonNode removeElement(int index)": "Removes the element at the specified position in this array node.",
                "JsonNode removeElement(String fieldName)": "Removes the field with the specified name from this object node.",
                "JsonNode setElement(int index, JsonNode value)": "Replaces the element at the specified position in this array node with the specified node.",
                "JsonNode setElement(String fieldName, JsonNode value)": "Replaces the field with the specified name in this object node with the specified value.",
                "JsonNode findPath(String fieldName)": "Method similar to JsonNode.findValue(java.lang.String), but that will return a \"missing node\" instead of null if no field is found.",
                "JsonParser.NumberType getNumberType()": "If this node is a numeric type (as per JsonNode.isNumber()), returns native type that node uses to store the numeric value.",
                "void serialize(JsonGenerator jgen, SerializerProvider provider)": "Method called to serialize node instances using given generator.",
                "void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
                "JsonParser traverse()": "Method for constructing a JsonParser instance for iterating over contents of the tree that this node is root of.",
                "boolean getBooleanValue()": "Method for accessing boolean value of this node, if and only if this node is value node (method JsonNode.isValueNode() returns true).",
                "BigDecimal getDecimalValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "double getDoubleValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "Iterator<JsonNode> getElements()": "Method for accessing all value nodes of this node, iff this node is a JSON Array or an Object.",
                "Iterator<String> getFieldNames()": "Method for accessing names of all fields for this JSON Object node.",
                "Iterator<JsonNode> getFieldValues()": "Method for accessing all values of fields for this JSON Object node.",
                "int getIntValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "long getLongValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "Number getNumberValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "JsonNode getPath(int index)": "This method is similar to getElementValue(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
                "JsonNode getPath(String fieldName)": "This method is similar to getFieldValue(java.lang.String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
                "String getTextValue()": "Method for accessing textual representation of this node, if and only if this node is a value node (method JsonNode.isValueNode() returns true).",
                "boolean isArray()": "Method that returns true if this node represents a JSON Array.",
                "boolean isBigDecimal()": "Method that returns true if this node is a numeric node that contains a BigDecimal value.",
                "boolean isBoolean()": "Method that returns true if this node is a boolean node that contains a boolean value.",
                "boolean isDouble()": "Method that returns true if this node is a numeric node that contains a double value.",
                "boolean isFloatingPointNumber()": "Method that returns true if this node is a numeric node that contains a floating point value.",
                "boolean isInt()": "Method that returns true if this node is a numeric node that contains an int value.",
                "boolean isIntegralNumber()": "Method that returns true if this node is a numeric node that contains an integral (non-floating point) value.",
                "boolean isLong()": "Method that returns true if this node is a numeric node that contains a long value.",
                "boolean isMissingNode()": "Method that returns true for 'virtual' nodes which represent missing entries constructed by path accessor methods when there is no actual node matching given criteria.",
                "boolean isNull()": "Method that returns true if this node is a null node.",
                "boolean isNumber()": "Method that returns true if this node is a numeric node.",
                "boolean isTextual()": "Method that returns true if this node is a textual node that contains a String value.",
                "boolean isValueNode()": "Method that returns true for all value nodes: ones that are not containers, and that do not represent 'missing' nodes in the path.",
                "JsonNode reportNoArrayMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Array node.",
                "JsonNode reportNoObjectMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Object node.",
                "void writeTo(JsonGenerator jg)": "Method that can be called to serialize this node and all of its descendants using specified JSON generator."
            },
            "super class": [
                "org.codehaus.jackson.node.ContainerNode",
                "org.codehaus.jackson.node.BaseJsonNode",
                "org.codehaus.jackson.JsonNode"
            ]
        }
    },
    "org.bukkit.configuration.file.FileConfiguration": {
        "org.bukkit.configuration.file.FileConfiguration": {
            "class": "FileConfiguration",
            "category": "Class",
            "methods": {
                "String buildHeader()": "Builds a header for this FileConfiguration. Deprecated and only exists for backwards compatibility.",
                "void load(File file)": "Loads this FileConfiguration from the specified location.",
                "void load(Reader reader)": "Loads this FileConfiguration from the specified reader.",
                "void load(String file)": "Loads this FileConfiguration from the specified location.",
                "void loadFromString(String contents)": "Loads this FileConfiguration from the specified string, as opposed to from file.",
                "FileConfigurationOptions options()": "Gets the ConfigurationOptions for this Configuration.",
                "void save(File file)": "Saves this FileConfiguration to the specified location.",
                "void save(String file)": "Saves this FileConfiguration to the specified location.",
                "String saveToString()": "Saves this FileConfiguration to a string, and returns it.",
                "void addDefault(String path, Object value)": "Sets the default value in the root at the given path as provided.",
                "boolean contains(String path)": "Checks if this ConfigurationSection contains the given path.",
                "boolean contains(String path, boolean ignoreDefault)": "Checks if this ConfigurationSection contains the given path.",
                "String createPath(ConfigurationSection section, String key)": "Creates a full path to the given ConfigurationSection from its root Configuration.",
                "String createPath(ConfigurationSection section, String key, ConfigurationSection relativeTo)": "Creates a relative path to the given ConfigurationSection from the given relative section.",
                "ConfigurationSection createSection(String path)": "Creates an empty ConfigurationSection at the specified path.",
                "ConfigurationSection createSection(String path, Map<?,?> map)": "Creates a ConfigurationSection at the specified path, with specified values.",
                "Object get(String path)": "Gets the requested Object by path.",
                "Object get(String path, Object def)": "Gets the requested Object by path, returning a default value if not found.",
                "boolean getBoolean(String path)": "Gets the requested boolean by path.",
                "boolean getBoolean(String path, boolean def)": "Gets the requested boolean by path, returning a default value if not found.",
                "List<Boolean> getBooleanList(String path)": "Gets the requested List of Boolean by path.",
                "List<Byte> getByteList(String path)": "Gets the requested List of Byte by path.",
                "List<Character> getCharacterList(String path)": "Gets the requested List of Character by path.",
                "Color getColor(String path)": "Gets the requested Color by path.",
                "Color getColor(String path, Color def)": "Gets the requested Color by path, returning a default value if not found.",
                "List<String> getComments(String path)": "Gets the requested comment list by path.",
                "ConfigurationSection getConfigurationSection(String path)": "Gets the requested ConfigurationSection by path.",
                "String getCurrentPath()": "Gets the path of this ConfigurationSection from its root Configuration.",
                "Object getDefault(String path)": "",
                "ConfigurationSection getDefaultSection()": "Gets the equivalent ConfigurationSection from the default Configuration defined in ConfigurationSection.getRoot().",
                "double getDouble(String path)": "Gets the requested double by path.",
                "double getDouble(String path, double def)": "Gets the requested double by path, returning a default value if not found.",
                "List<Double> getDoubleList(String path)": "Gets the requested List of Double by path.",
                "List<Float> getFloatList(String path)": "Gets the requested List of Float by path.",
                "List<String> getInlineComments(String path)": "Gets the requested inline comment list by path.",
                "int getInt(String path)": "Gets the requested int by path.",
                "int getInt(String path, int def)": "Gets the requested int by path, returning a default value if not found.",
                "List<Integer> getIntegerList(String path)": "Gets the requested List of Integer by path.",
                "ItemStack getItemStack(String path)": "Gets the requested ItemStack by path.",
                "ItemStack getItemStack(String path, ItemStack def)": "Gets the requested ItemStack by path, returning a default value if not found.",
                "Set<String> getKeys(boolean deep)": "Gets a set containing all keys in this section.",
                "List<?> getList(String path)": "Gets the requested List by path.",
                "List<?> getList(String path, List<?> def)": "Gets the requested List by path, returning a default value if not found.",
                "Location getLocation(String path)": "Gets the requested Location by path.",
                "Location getLocation(String path, Location def)": "Gets the requested Location by path, returning a default value if not found.",
                "long getLong(String path)": "Gets the requested long by path.",
                "long getLong(String path, long def)": "Gets the requested long by path, returning a default value if not found.",
                "List<Long> getLongList(String path)": "Gets the requested List of Long by path.",
                "List<Map<?,?>> getMapList(String path)": "Gets the requested List of Maps by path.",
                "String getName()": "Gets the name of this individual ConfigurationSection, in the path.",
                "<T> T getObject(String path, Class<T> clazz)": "Gets the requested object at the given path.",
                "<T> T getObject(String path, Class<T> clazz, T def)": "Gets the requested object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "OfflinePlayer getOfflinePlayer(String path)": "Gets the requested OfflinePlayer by path.",
                "OfflinePlayer getOfflinePlayer(String path, OfflinePlayer def)": "Gets the requested OfflinePlayer by path, returning a default value if not found.",
                "ConfigurationSection getParent()": "Gets the parent ConfigurationSection that directly contains this ConfigurationSection.",
                "Configuration getRoot()": "Gets the root Configuration that contains this ConfigurationSection.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz)": "Gets the requested ConfigurationSerializable object at the given path.",
                "<T extends ConfigurationSerializable> T getSerializable(String path, Class<T> clazz, T def)": "Gets the requested ConfigurationSerializable object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
                "List<Short> getShortList(String path)": "Gets the requested List of Short by path.",
                "String getString(String path)": "Gets the requested String by path.",
                "String getString(String path, String def)": "Gets the requested String by path, returning a default value if not found.",
                "List<String> getStringList(String path)": "Gets the requested List of String by path.",
                "Map<String,Object> getValues(boolean deep)": "Gets a Map containing all keys and their values for this section.",
                "Vector getVector(String path)": "Gets the requested Vector by path.",
                "Vector getVector(String path, Vector def)": "Gets the requested Vector by path, returning a default value if not found.",
                "boolean isBoolean(String path)": "Checks if the specified path is a boolean.",
                "boolean isColor(String path)": "Checks if the specified path is a Color.",
                "boolean isConfigurationSection(String path)": "Checks if the specified path is a ConfigurationSection.",
                "boolean isDouble(String path)": "Checks if the specified path is a double.",
                "boolean isInt(String path)": "Checks if the specified path is an int.",
                "boolean isItemStack(String path)": "Checks if the specified path is an ItemStack.",
                "boolean isList(String path)": "Checks if the specified path is a List.",
                "boolean isLocation(String path)": "Checks if the specified path is a Location.",
                "boolean isLong(String path)": "Checks if the specified path is a long.",
                "boolean isOfflinePlayer(String path)": "Checks if the specified path is an OfflinePlayer.",
                "protected boolean isPrimitiveWrapper(Object input)": "Checks if the input object is a primitive wrapper class.",
                "boolean isSet(String path)": "Checks if this ConfigurationSection has a value set for the given path.",
                "boolean isString(String path)": "Checks if the specified path is a String.",
                "boolean isVector(String path)": "Checks if the specified path is a Vector.",
                "protected void mapChildrenKeys(Set<String> output, ConfigurationSection section, boolean deep)": "Maps all the keys of the children of this ConfigurationSection.",
                "protected void mapChildrenValues(Map<String,Object> output, ConfigurationSection section, boolean deep)": "Maps all the values of the children of this ConfigurationSection.",
                "void set(String path, Object value)": "Sets the specified path to the given value.",
                "void setComments(String path, List<String> comments)": "Sets the comment list at the specified path.",
                "void setInlineComments(String path, List<String> comments)": "Sets the inline comment list at the specified path.",
                "String toString()": "Returns a string representation of this ConfigurationSection and its children.",
                "void addDefaults(Map<String,Object> defaults)": "Sets the default values of the given paths as provided.",
                "void addDefaults(Configuration defaults)": "Sets the default values of the given paths as provided.",
                "Configuration getDefaults()": "Gets the source Configuration for this configuration.",
                "MemoryConfigurationOptions options()": "Gets the ConfigurationOptions for this Configuration.",
                "void setDefaults(Configuration defaults)": "Sets the source of all default values for this Configuration."
            },
            "super class": [
                "org.bukkit.configuration.MemorySection",
                "org.bukkit.configuration.MemoryConfiguration"
            ]
        }
    },
    "gnu.trove.TIntHash": {
        "gnu.trove.TIntHash": {
            "class": "TIntHash",
            "category": "Class",
            "methods": {
                "int computeHashCode(int val)": "Default implementation of TIntHashingStrategy: delegates hashing to HashFunctions.hash(int).",
                "boolean contains(int val)": "Searches the set for val.",
                "boolean forEach(TIntProcedure procedure)": "Executes procedure for each element in the set.",
                "protected int index(int val)": "Locates the index of val.",
                "protected int insertionIndex(int val)": "Locates the index at which val can be inserted.",
                "protected void removeAt(int index)": "Releases the element currently stored at index.",
                "protected int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1.",
                "int calculateGrownCapacity()": "",
                "abstract int capacity()": "",
                "void clear()": "Empties the collection.",
                "java.lang.Object clone()": "",
                "void compact()": "Compresses the hashtable to the minimum prime size (as defined by PrimeFinder) that will hold all of the elements currently in the table.",
                "void ensureCapacity(int desiredCapacity)": "Ensure that this hashtable has sufficient capacity to hold desiredCapacity additional elements without requiring a rehash.",
                "float getAutoCompactionFactor()": "",
                "boolean isEmpty()": "Tells whether this set is currently holding any elements.",
                "void postInsertHook(boolean usedFreeSlot)": "After an insert, this hook is called to adjust the size/free values of the set and to perform rehashing if necessary.",
                "void reenableAutoCompaction(boolean check_for_compaction)": "Re-enable auto-compaction after it was disabled via tempDisableAutoCompaction().",
                "abstract void rehash(int newCapacity)": "Rehashes the set.",
                "void removeAt(int index)": "Delete the record at index.",
                "void setAutoCompactionFactor(float factor)": "The auto-compaction factor controls whether and when a table performs a compact() automatically after a certain number of remove operations.",
                "int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1.",
                "int size()": "Returns the number of distinct elements in this collection.",
                "void tempDisableAutoCompaction()": "Temporarily disables auto-compaction.",
                "void trimToSize()": "This simply calls compact.",
                "int capacity()": "Returns the capacity of the hash table."
            },
            "super class": [
                "gnu.trove.THash",
                "gnu.trove.TPrimitiveHash"
            ]
        }
    },
    "java.security.KeyStore": {
        "java.security.KeyStore": {
            "class": "KeyStore",
            "category": "Class",
            "methods": {
                "Enumeration aliases()": "Lists all the alias names of this keystore.",
                "boolean containsAlias(String alias)": "Checks if the given alias exists in this keystore.",
                "void deleteEntry(String alias)": "Deletes the entry identified by the given alias from this keystore.",
                "boolean entryInstanceOf(String alias, Class entryClass)": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.",
                "Certificate getCertificate(String alias)": "Returns the certificate associated with the given alias.",
                "String getCertificateAlias(Certificate cert)": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.",
                "Certificate[] getCertificateChain(String alias)": "Returns the certificate chain associated with the given alias.",
                "Date getCreationDate(String alias)": "Returns the creation date of the entry identified by the given alias.",
                "String getDefaultType()": "Returns the default keystore type as specified by the keystore.type security property, or the string \"jks\" (acronym for \"Java keystore\") if no such property exists.",
                "KeyStore.Entry getEntry(String alias, KeyStore.ProtectionParameter protParam)": "Gets a keystore Entry for the specified alias with the specified protection parameter.",
                "KeyStore getInstance(String type)": "Returns a keystore object of the specified type.",
                "KeyStore getInstance(String type, Provider provider)": "Returns a keystore object of the specified type.",
                "KeyStore getInstance(String type, String provider)": "Returns a keystore object of the specified type.",
                "Key getKey(String alias, char[] password)": "Returns the key associated with the given alias, using the given password to recover it.",
                "Provider getProvider()": "Returns the provider of this keystore.",
                "String getType()": "Returns the type of this keystore.",
                "boolean isCertificateEntry(String alias)": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.",
                "boolean isKeyEntry(String alias)": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.",
                "void load(InputStream stream, char[] password)": "Loads this KeyStore from the given input stream.",
                "void load(KeyStore.LoadStoreParameter param)": "Loads this keystore using the given LoadStoreParameter.",
                "void setCertificateEntry(String alias, Certificate cert)": "Assigns the given trusted certificate to the given alias.",
                "void setEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)": "Saves a keystore Entry under the specified alias.",
                "void setKeyEntry(String alias, byte[] key, Certificate[] chain)": "Assigns the given key (that has already been protected) to the given alias.",
                "void setKeyEntry(String alias, Key key, char[] password, Certificate[] chain)": "Assigns the given key to the given alias, protecting it with the given password.",
                "int size()": "Retrieves the number of entries in this keystore.",
                "void store(KeyStore.LoadStoreParameter param)": "Stores this keystore using the given LoadStoreParameter.",
                "void store(OutputStream stream, char[] password)": "Stores this keystore to the given output stream, and protects its integrity with the given password."
            },
            "super class": []
        }
    },
    "org.json.simple.JSONObject": {
        "org.json.simple.JSONObject": {
            "class": "JSONObject",
            "category": "Class",
            "methods": {
                "java.lang.String escape(java.lang.String s)": "Escape quotes, \\, /, \\r, \\n, \\b, \\f, \\t and other control characters (U+0000 through U+001F).",
                "java.lang.String toJSONString()": "",
                "java.lang.String toJSONString(java.util.Map map)": "Convert a map to JSON text.",
                "java.lang.String toString()": "",
                "java.lang.String toString(java.lang.String key, java.lang.Object value)": "",
                "void writeJSONString(java.util.Map map, java.io.Writer out)": "Encode a map into JSON text and write it to out.",
                "void writeJSONString(java.io.Writer out)": "write JSON string to out.",
                "void clear()": "Removes all of the mappings from this map.",
                "Object clone()": "Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map.",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for the specified key from this map if present.",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map."
            },
            "super class": [
                "java.util.HashMap"
            ]
        }
    },
    "com.eclipsesource.json.JsonObject": {
        "com.eclipsesource.json.JsonObject": {
            "class": "JsonObject",
            "category": "Class",
            "methods": {
                "JsonObject add(String name, boolean value)": "Appends a new member to the end of this object, with the specified name and the JSON representation of the specified boolean value.",
                "JsonObject add(String name, double value)": "Appends a new member to the end of this object, with the specified name and the JSON representation of the specified double value.",
                "JsonObject add(String name, float value)": "Appends a new member to the end of this object, with the specified name and the JSON representation of the specified float value.",
                "JsonObject add(String name, int value)": "Appends a new member to the end of this object, with the specified name and the JSON representation of the specified int value.",
                "JsonObject add(String name, JsonValue value)": "Appends a new member to the end of this object, with the specified name and the specified JSON value.",
                "JsonObject add(String name, long value)": "Appends a new member to the end of this object, with the specified name and the JSON representation of the specified long value.",
                "JsonObject add(String name, String value)": "Appends a new member to the end of this object, with the specified name and the JSON representation of the specified string.",
                "JsonObject asObject()": "Returns this JSON value as JsonObject, assuming that this value represents a JSON object.",
                "boolean equals(Object obj)": "Indicates whether some other object is \"equal to\" this one according to the contract specified in Object.equals(Object).",
                "JsonValue get(String name)": "Returns the value of the member with the specified name in this object.",
                "boolean getBoolean(String name, boolean defaultValue)": "Returns the boolean value of the member with the specified name in this object.",
                "double getDouble(String name, double defaultValue)": "Returns the double value of the member with the specified name in this object.",
                "float getFloat(String name, float defaultValue)": "Returns the float value of the member with the specified name in this object.",
                "int getInt(String name, int defaultValue)": "Returns the int value of the member with the specified name in this object.",
                "long getLong(String name, long defaultValue)": "Returns the long value of the member with the specified name in this object.",
                "String getString(String name, String defaultValue)": "Returns the String value of the member with the specified name in this object.",
                "int hashCode()": "",
                "boolean isEmpty()": "Returns true if this object contains no members.",
                "boolean isObject()": "Detects whether this value represents a JSON object.",
                "Iterator iterator()": "Returns an iterator over the members of this object in document order.",
                "JsonObject merge(JsonObject object)": "Copies all members of the specified object into this object.",
                "List names()": "Returns a list of the names in this object in document order.",
                "JsonObject remove(String name)": "Removes a member with the specified name from this object.",
                "JsonObject set(String name, boolean value)": "Sets the value of the member with the specified name to the JSON representation of the specified boolean value.",
                "JsonObject set(String name, double value)": "Sets the value of the member with the specified name to the JSON representation of the specified double value.",
                "JsonObject set(String name, float value)": "Sets the value of the member with the specified name to the JSON representation of the specified float value.",
                "JsonObject set(String name, int value)": "Sets the value of the member with the specified name to the JSON representation of the specified int value.",
                "JsonObject set(String name, JsonValue value)": "Sets the value of the member with the specified name to the specified JSON value.",
                "JsonObject set(String name, long value)": "Sets the value of the member with the specified name to the JSON representation of the specified long value.",
                "JsonObject set(String name, String value)": "Sets the value of the member with the specified name to the JSON representation of the specified string.",
                "int size()": "Returns the number of members (name/value pairs) in this object.",
                "JsonObject unmodifiableObject(JsonObject object)": "Returns an unmodifiable JsonObject for the specified one.",
                "JsonArray asArray()": "Returns this JSON value as JsonArray, assuming that this value represents a JSON array.",
                "boolean asBoolean()": "Returns this JSON value as a boolean value, assuming that this value is either true or false.",
                "double asDouble()": "Returns this JSON value as a double value, assuming that this value represents a JSON number.",
                "float asFloat()": "Returns this JSON value as a float value, assuming that this value represents a JSON number.",
                "int asInt()": "Returns this JSON value as an int value, assuming that this value represents a JSON number that can be interpreted as Java int.",
                "long asLong()": "Returns this JSON value as a long value, assuming that this value represents a JSON number that can be interpreted as Java long.",
                "String asString()": "Returns this JSON value as String, assuming that this value represents a JSON string.",
                "boolean equals(Object object)": "Indicates whether some other object is \"equal to\" this one according to the contract specified in Object.equals(Object).",
                "boolean isArray()": "Detects whether this value represents a JSON array.",
                "boolean isBoolean()": "Detects whether this value represents a boolean value.",
                "boolean isFalse()": "Detects whether this value represents the JSON literal false.",
                "boolean isNull()": "Detects whether this value represents the JSON literal null.",
                "boolean isNumber()": "Detects whether this value represents a JSON number.",
                "boolean isString()": "Detects whether this value represents a JSON string.",
                "boolean isTrue()": "Detects whether this value represents the JSON literal true.",
                "String toString()": "Returns the JSON string for this value in its minimal form, without any additional whitespace.",
                "String toString(WriterConfig config)": "Returns the JSON string for this value using the given formatting.",
                "void writeTo(Writer writer)": "Writes the JSON representation of this value to the given writer in its minimal form, without any additional whitespace.",
                "void writeTo(Writer writer, WriterConfig config)": "Writes the JSON representation of this value to the given writer using the given formatting."
            },
            "super class": [
                "com.eclipsesource.json.JsonValue"
            ]
        }
    },
    "java.util.HashMap": {
        "java.util.HashMap": {
            "class": "HashMap",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "Object clone()": "Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "int hashCode()": "Returns the hash code value for this map.",
                "String toString()": "Returns a string representation of this map."
            },
            "super class": [
                "java.util.AbstractMap",
                "java.util.Map"
            ]
        }
    },
    "com.github.javaparser.ast.expr.ArrayAccessExpr": {
        "com.github.javaparser.ast.expr.ArrayAccessExpr": {
            "class": "ArrayAccessExpr",
            "category": "Class",
            "methods": {
                "R accept(GenericVisitor v, A arg)": "Accept method for visitor support.",
                "void accept(VoidVisitor v, A arg)": "Accept method for visitor support.",
                "ArrayAccessExpr asArrayAccessExpr()": "",
                "ArrayAccessExpr clone()": "",
                "Expression getIndex()": "",
                "ArrayAccessExprMetaModel getMetaModel()": "",
                "Expression getName()": "",
                "void ifArrayAccessExpr(Consumer action)": "",
                "boolean isArrayAccessExpr()": "",
                "boolean remove(Node node)": "",
                "boolean replace(Node node, Node replacementNode)": "",
                "ArrayAccessExpr setIndex(Expression index)": "",
                "ArrayAccessExpr setName(Expression name)": ""
            },
            "super class": []
        }
    },
    "org.apache.mahout.math.AbstractVector": {
        "org.apache.mahout.math.AbstractVector": {
            "class": "AbstractVector",
            "category": "Class",
            "methods": {
                "double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map)": "Aggregates a vector by applying a mapping function fm(x) to every component and aggregating the results with an aggregating function fa(x, y).",
                "double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner)": "Generalized inner product - take two vectors, iterate over them both, using the combiner to combine together (and possibly map in some way) each pair of values, which are then aggregated with the previous accumulated value in the combiner.",
                "Iterable all()": "",
                "String asFormatString()": "",
                "Vector assign(double value)": "Assign the value to all elements of the receiver",
                "Vector assign(double[] values)": "Assign the values to the receiver",
                "Vector assign(DoubleDoubleFunction f, double y)": "Apply the function to each element of the receiver, using the y value as the second argument of the DoubleDoubleFunction",
                "Vector assign(DoubleFunction f)": "Apply the function to each element of the receiver",
                "Vector assign(Vector other)": "Assign the other vector values to the receiver",
                "Vector assign(Vector other, DoubleDoubleFunction function)": "Apply the function to each element of the receiver and the corresponding element of the other argument",
                "Vector clone()": "Return a copy of the recipient",
                "Vector createOptimizedCopy()": "Copy the current vector in the most optimum fashion.",
                "Matrix cross(Vector other)": "Return the cross product of the receiver and the other vector",
                "Vector divide(double x)": "Return a new vector containing the values of the recipient divided by the argument",
                "double dot(Vector x)": "Return the dot product of the recipient and the argument",
                "double dotSelf()": "",
                "boolean equals(Object o)": "Determines whether this Vector represents the same logical vector as another object.",
                "double get(int index)": "Return the value at the given index",
                "double getDistanceSquared(Vector that)": "Get the square of the distance between this vector and the other vector.",
                "Vector.Element getElement(int index)": "Return an object of Vector.Element representing an element of this Vector.",
                "double getLengthSquared()": "Return the sum of squares of all elements in the vector.",
                "int getNumNonZeroElements()": "Return the number of non zero elements in the vector.",
                "int hashCode()": "",
                "void incrementQuick(int index, double increment)": "Increment the value at the given index by the given value.",
                "void invalidateCachedLength()": "Invalidates the length cache.",
                "Iterator iterateNonZero()": "Iterates over all non-zero elements.",
                "Iterator iterator()": "Iterates over all elements",
                "Vector logNormalize()": "Return a new vector containing the log(1 + entry)/ L_2 norm values of the recipient",
                "Vector logNormalize(double power)": "Return a new Vector with a normalized value calculated as log_power(1 + entry)/ L_power norm.",
                "Vector logNormalize(double power, double normLength)": "",
                "Matrix matrixLike(int rows, int columns)": "Subclasses must override to return an appropriately sparse or dense result",
                "double maxValue()": "",
                "int maxValueIndex()": "",
                "Vector minus(Vector that)": "Return a new vector containing the element by element difference of the recipient and the argument",
                "double minValue()": "",
                "int minValueIndex()": "",
                "Iterable nonZeroes()": "",
                "double norm(double power)": "Return the k-norm of the vector.",
                "Vector normalize()": "Return a new vector containing the normalized (L_2 norm) values of the recipient",
                "Vector normalize(double power)": "Return a new Vector containing the normalized (L_power norm) values of the recipient.",
                "Vector plus(double x)": "Return a new vector containing the sum of each value of the recipient and the argument",
                "Vector plus(Vector that)": "Return a new vector containing the element by element sum of the recipient and the argument",
                "void set(int index, double value)": "Set the value at the given index",
                "int size()": "Return the cardinality of the recipient (the maximum number of values)",
                "String sparseVectorToString()": "toString() implementation for sparse vectors via nonZeroes() method",
                "Vector times(double x)": "Return a new vector containing the product of each value of the recipient and the argument",
                "Vector times(Vector that)": "Return a new vector containing the element-wise product of the recipient and the argument",
                "String toString()": "",
                "String toString(String[] dictionary)": "",
                "Vector viewPart(int offset, int length)": "Return a new vector containing the subset of the recipient",
                "double zSum()": "Return the sum of all the elements of the receiver"
            },
            "super class": []
        }
    },
    "java.util.Stack": {
        "java.util.Stack": {
            "class": "Stack",
            "category": "Class",
            "methods": {
                "boolean empty()": "Tests if this stack is empty.",
                "E peek()": "Looks at the object at the top of this stack without removing it from the stack.",
                "E pop()": "Removes the object at the top of this stack and returns that object as the value of this function.",
                "E push(E item)": "Pushes an item onto the top of this stack.",
                "int search(Object o)": "Returns the 1-based position where an object is on this stack.",
                "boolean add(E e)": "Appends the specified element to the end of this list (optional operation).",
                "void add(int index, E element)": "Inserts the specified element at the specified position in this list (optional operation).",
                "boolean addAll(Collection c)": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).",
                "boolean addAll(int index, Collection c)": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).",
                "void addElement(E obj)": "Adds the specified component to the end of this vector, increasing its size by one.",
                "int capacity()": "Returns the current capacity of this vector.",
                "void clear()": "Removes all of the elements from this list (optional operation).",
                "Object clone()": "Returns a clone of this vector.",
                "boolean contains(Object o)": "Returns true if this list contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this list contains all of the elements of the specified collection.",
                "void copyInto(Object[] anArray)": "Copies the components of this vector into the specified array.",
                "E elementAt(int index)": "Returns the component at the specified index.",
                "Enumeration elements()": "Returns an enumeration of the components of this vector.",
                "void ensureCapacity(int minCapacity)": "Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.",
                "boolean equals(Object o)": "Compares the specified object with this list for equality.",
                "E firstElement()": "Returns the first component (the item at index 0) of this vector.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.",
                "E get(int index)": "Returns the element at the specified position in this list.",
                "int hashCode()": "Returns the hash code value for this list.",
                "int indexOf(Object o)": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "int indexOf(Object o, int index)": "Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found.",
                "void insertElementAt(E obj, int index)": "Inserts the specified object as a component in this vector at the specified index.",
                "boolean isEmpty()": "Returns true if this list contains no elements.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "E lastElement()": "Returns the last component of the vector.",
                "int lastIndexOf(Object o)": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "int lastIndexOf(Object o, int index)": "Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found.",
                "ListIterator listIterator()": "Returns a list iterator over the elements in this list (in proper sequence).",
                "ListIterator listIterator(int index)": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.",
                "E remove(int index)": "Removes the element at the specified position in this list (optional operation).",
                "boolean remove(Object o)": "Removes the first occurrence of the specified element from this list, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
                "void removeAllElements()": "Removes all components from this vector and sets its size to zero.",
                "boolean removeElement(Object obj)": "Removes the first (lowest-indexed) occurrence of the argument from this vector.",
                "void removeElementAt(int index)": "Deletes the component at the specified index.",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "void removeRange(int fromIndex, int toIndex)": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
                "void replaceAll(UnaryOperator operator)": "Replaces each element of this list with the result of applying the operator to that element.",
                "boolean retainAll(Collection c)": "Retains only the elements in this list that are contained in the specified collection (optional operation).",
                "E set(int index, E element)": "Replaces the element at the specified position in this list with the specified element (optional operation).",
                "void setElementAt(E obj, int index)": "Sets the component at the specified index of this vector to be the specified object.",
                "void setSize(int newSize)": "Sets the size of this vector.",
                "int size()": "Returns the number of elements in this list.",
                "void sort(Comparator c)": "Sorts this list according to the order induced by the specified Comparator.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "List subList(int fromIndex, int toIndex)": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
                "Object[] toArray()": "Returns an array containing all of the elements in this list in proper sequence (from first to last element).",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                "String toString()": "Returns a string representation of this collection.",
                "void trimToSize()": "Trims the capacity of this vector to be the vector's current size.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source."
            },
            "super class": [
                "java.util.Vector",
                "java.util.AbstractList",
                "java.util.AbstractCollection",
                "java.util.Collection",
                "java.util.List",
                "java.lang.Iterable"
            ]
        }
    },
    "net.minecraft.inventory.AnimalChest": {
        "net.minecraft.inventory.AnimalChest": {
            "class": "AnimalChest",
            "category": "Class",
            "methods": {
                "void addInventoryChangeListener(IInventoryChangedListener listener)": "",
                "ItemStack addItem(ItemStack stack)": "",
                "void clear()": "",
                "void closeInventory(EntityPlayer player)": "",
                "ItemStack decrStackSize(int index, int count)": "",
                "ITextComponent getDisplayName()": "",
                "int getField(int id)": "",
                "int getFieldCount()": "",
                "int getInventoryStackLimit()": "",
                "java.lang.String getName()": "",
                "int getSizeInventory()": "",
                "ItemStack getStackInSlot(int index)": "",
                "boolean hasCustomName()": "",
                "boolean isItemValidForSlot(int index, ItemStack stack)": "",
                "boolean isUseableByPlayer(EntityPlayer player)": "",
                "void markDirty()": "",
                "void openInventory(EntityPlayer player)": "",
                "void removeInventoryChangeListener(IInventoryChangedListener listener)": "",
                "ItemStack removeStackFromSlot(int index)": "",
                "void setCustomName(java.lang.String inventoryTitleIn)": "",
                "void setField(int id, int value)": "",
                "void setInventorySlotContents(int index, ItemStack stack)": ""
            },
            "super class": [
                "net.minecraft.inventory.InventoryBasic"
            ]
        }
    },
    "com.mongodb.BSONObject": {
        "com.mongodb.BSONObject": {
            "class": "BSONObject",
            "category": "Interface",
            "methods": {
                "boolean containsField(java.lang.String s)": "Checks if this object contains a field with the given name.",
                "java.lang.Object get(java.lang.String key)": "Gets a field from this object by a given name.",
                "java.util.Set keySet()": "Returns this object's fields' names",
                "java.lang.Object put(java.lang.String key, java.lang.Object v)": "Sets a name/value pair in this object.",
                "void putAll(BSONObject o)": "Sets all key/value pairs from an object into this object",
                "void putAll(java.util.Map m)": "Sets all key/value pairs from a map into this object",
                "java.lang.Object removeField(java.lang.String key)": "Removes a field with a given name from this object.",
                "java.util.Map toMap()": "Returns a map representing this BSONObject."
            },
            "super class": []
        }
    },
    "java.util.concurrent.atomic.AtomicLongArray": {
        "java.util.concurrent.atomic.AtomicLongArray": {
            "class": "AtomicLongArray",
            "category": "Class",
            "methods": {
                "long accumulateAndGet(int i, long x, LongBinaryOperator accumulatorFunction)": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value.",
                "long addAndGet(int i, long delta)": "Atomically adds the given value to the element at index i.",
                "boolean compareAndSet(int i, long expect, long update)": "Atomically sets the element at position i to the given updated value if the current value == the expected value.",
                "long decrementAndGet(int i)": "Atomically decrements by one the element at index i.",
                "long get(int i)": "Gets the current value at position i.",
                "long getAndAccumulate(int i, long x, LongBinaryOperator accumulatorFunction)": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value.",
                "long getAndAdd(int i, long delta)": "Atomically adds the given value to the element at index i.",
                "long getAndDecrement(int i)": "Atomically decrements by one the element at index i.",
                "long getAndIncrement(int i)": "Atomically increments by one the element at index i.",
                "long getAndSet(int i, long newValue)": "Atomically sets the element at position i to the given value and returns the old value.",
                "long getAndUpdate(int i, LongUnaryOperator updateFunction)": "Atomically updates the element at index i with the results of applying the given function, returning the previous value.",
                "long incrementAndGet(int i)": "Atomically increments by one the element at index i.",
                "void lazySet(int i, long newValue)": "Eventually sets the element at position i to the given value.",
                "int length()": "Returns the length of the array.",
                "void set(int i, long newValue)": "Sets the element at position i to the given value.",
                "String toString()": "Returns the String representation of the current values of array.",
                "long updateAndGet(int i, LongUnaryOperator updateFunction)": "Atomically updates the element at index i with the results of applying the given function, returning the updated value.",
                "boolean weakCompareAndSet(int i, long expect, long update)": "Atomically sets the element at position i to the given updated value if the current value == the expected value."
            },
            "super class": []
        }
    },
    "org.apache.http.client.methods.HttpDelete": {
        "org.apache.http.client.methods.HttpDelete": {
            "class": "HttpDelete",
            "category": "Class",
            "methods": {
                "String getMethod()": "Returns the HTTP method this request uses, such as GET, PUT, POST, or other.",
                "RequestConfig getConfig()": "Returns actual request configuration.",
                "ProtocolVersion getProtocolVersion()": "",
                "RequestLine getRequestLine()": "",
                "URI getURI()": "Returns the original request URI.",
                "void releaseConnection()": "A convenience method to simplify migration from HttpClient 3.1 API.",
                "void setConfig(RequestConfig config)": "",
                "void setProtocolVersion(ProtocolVersion version)": "",
                "void setURI(URI uri)": "",
                "void started()": "",
                "String toString()": "",
                "void abort()": "Aborts this http request.",
                "Object clone()": "",
                "void completed()": "",
                "boolean isAborted()": "",
                "void reset()": "Resets internal state of the request making it reusable.",
                "void setCancellable(Cancellable cancellable)": "Sets Cancellable for the ongoing operation.",
                "void addHeader(Header header)": "Adds a header to this message.",
                "void addHeader(String name, String value)": "Adds a header to this message.",
                "boolean containsHeader(String name)": "Checks if a certain header is present in this message.",
                "Header[] getAllHeaders()": "Returns all the headers of this message.",
                "Header getFirstHeader(String name)": "Returns the first header with a specified name of this message.",
                "Header[] getHeaders(String name)": "Returns all the headers with a specified name of this message.",
                "Header getLastHeader(String name)": "Returns the last header with a specified name of this message.",
                "HeaderIterator headerIterator()": "Returns an iterator of all the headers.",
                "HeaderIterator headerIterator(String name)": "Returns an iterator of the headers with a given name.",
                "void removeHeader(Header header)": "Removes a header from this message.",
                "void removeHeaders(String name)": "Removes all headers with a certain name from this message.",
                "void setHeader(Header header)": "Overwrites the first header with the same name.",
                "void setHeader(String name, String value)": "Overwrites the first header with the same name.",
                "void setHeaders(Header[] headers)": "Overwrites all the headers in the message."
            },
            "super class": [
                "org.apache.http.client.methods.HttpRequestBase",
                "org.apache.http.client.methods.AbstractExecutionAwareRequest",
                "org.apache.http.message.AbstractHttpMessage"
            ]
        }
    },
    "com.mongodb.DBObject": {
        "com.mongodb.DBObject": {
            "class": "DBObject",
            "category": "Interface",
            "methods": {
                "boolean isPartialObject()": "Whether markAsPartialObject() was ever called only matters if you are going to upsert and do not want to risk losing fields.",
                "void markAsPartialObject()": "If this object was retrieved with only some fields (using a field filter) this method will be called to mark it as such.",
                "boolean containsField(java.lang.String s)": "Checks if this object contains a field with the given name.",
                "java.lang.Object get(java.lang.String key)": " Gets a field from this object by a given name. ",
                "java.util.Set<java.lang.String> keySet()": " Returns this object's fields' names",
                "java.lang.Object put(java.lang.String key, java.lang.Object v)": " Sets a name/value pair in this object. ",
                "void putAll(BSONObject o)": " Sets all key/value pairs from an object into this object ",
                "void putAll(java.util.Map m)": " Sets all key/value pairs from a map into this object ",
                "java.lang.Object removeField(java.lang.String key)": " Removes a field with a given name from this object. ",
                "java.util.Map toMap()": " Returns a map representing this BSONObject."
            },
            "super class": [
                "org.bson.BSONObject"
            ]
        }
    },
    "org.ofbiz.entity.GenericValue": {
        "org.ofbiz.entity.GenericValue": {
            "class": "GenericValue",
            "category": "Class",
            "methods": {
                "java.lang.Object clone()": "Clones this GenericEntity, this is a shallow clone and uses the default shallow HashMap clone",
                "GenericValue create()": "",
                "GenericValue create(Delegator delegator, ModelEntity modelEntity, java.lang.Object singlePkValue)": "Creates new GenericValue from existing Map",
                "GenericValue create(Delegator delegator, ModelEntity modelEntity, java.util.Map fields)": "Creates new GenericValue from existing Map",
                "GenericValue create(GenericPK primaryKey)": "Creates new GenericValue from existing GenericValue",
                "GenericValue create(GenericValue value)": "Creates new GenericValue from existing GenericValue",
                "GenericValue create(ModelEntity modelEntity)": "Creates new GenericValue",
                "boolean equals(java.lang.Object obj)": "Determines the equality of two GenericEntity objects, overrides the default equals",
                "java.util.List getRelated(java.lang.String relationName)": "Deprecated. use getRelated(String, Map, List, boolean)",
                "java.util.List getRelated(java.lang.String relationName, java.util.List orderBy)": "Deprecated. use getRelated(String, Map, List, boolean)",
                "java.util.List getRelated(java.lang.String relationName, java.util.Map byAndFields, java.util.List orderBy)": "Deprecated. use getRelated(String, Map, List, boolean)",
                "java.util.List getRelated(java.lang.String relationName, java.util.Map byAndFields, java.util.List orderBy, boolean useCache)": "Get the named Related Entity for the GenericValue from the persistent store",
                "GenericPK getRelatedDummyPK(java.lang.String relationName)": "Get a dummy primary key for the named Related Entity for the GenericValue",
                "GenericPK getRelatedDummyPK(java.lang.String relationName, java.util.Map byAndFields)": "Get a dummy primary key for the named Related Entity for the GenericValue",
                "java.util.List getRelatedMulti(java.lang.String relationNameOne, java.lang.String relationNameTwo)": "Get the named Related Entity for the GenericValue from the persistent store across another Relation.",
                "java.util.List getRelatedMulti(java.lang.String relationNameOne, java.lang.String relationNameTwo, java.util.List orderBy)": "Get the named Related Entity for the GenericValue from the persistent store across another Relation.",
                "GenericValue getRelatedOne(java.lang.String relationName)": "Deprecated. use getRelatedOne(String, boolean)",
                "GenericValue getRelatedOne(java.lang.String relationName, boolean useCache)": "Get the named Related Entity for the GenericValue from the persistent store",
                "java.lang.String getStackTraceAsString()": "",
                "int hashCode()": "Creates a hashCode for the entity, using the default String hashCode and Map hashCode, overrides the default hashCode",
                "void refresh()": "",
                "void refreshFromCache()": "",
                "void remove()": "",
                "void removeRelated(java.lang.String relationName)": "Remove the named Related Entity for the GenericValue from the persistent store",
                "void store()": "",
                "void addObserver(Observer observer)": "",
                "int addToXmlDocument(java.util.Collection values, org.w3c.dom.Document document)": "",
                "int addToXmlElement(java.util.Collection values, org.w3c.dom.Document document, org.w3c.dom.Element element)": "",
                "void assertIsMutable()": "",
                "boolean checkFks(boolean insertDummy)": "Checks to see if all foreign key records exist in the database.",
                "void clear()": "",
                "void clearChanged()": "",
                "int compareTo(GenericEntity that)": "Compares this GenericEntity to the passed object",
                "int compareToFields(GenericEntity that, java.lang.String name)": "",
                "boolean containsKey(java.lang.Object key)": "",
                "boolean containsPrimaryKey()": "Returns true if the entity contains all of the primary key fields.",
                "boolean containsPrimaryKey(boolean requireValue)": "",
                "boolean containsValue(java.lang.Object value)": "",
                "GenericEntity createGenericEntity(Delegator delegator, ModelEntity modelEntity, java.util.Map fields)": "Creates new GenericEntity from existing Map",
                "GenericEntity createGenericEntity(GenericEntity value)": "Copy Factory Method: Creates new GenericEntity from existing GenericEntity",
                "GenericEntity createGenericEntity(ModelEntity modelEntity)": "Creates new GenericEntity",
                "java.lang.Object dangerousGetNoCheckButFast(ModelField modelField)": "",
                "void dangerousSetNoCheckButFast(ModelField modelField, java.lang.Object value)": "",
                "void deleteObserver(Observer observer)": "",
                "void deleteObservers()": "",
                "java.util.Set entrySet()": "",
                "java.lang.Object get(java.lang.Object key)": "",
                "java.lang.Object get(java.lang.String name)": "",
                "java.lang.Object get(java.lang.String name, java.lang.String resource, java.util.Locale locale)": "Same as the getResource method that does not take resource name, but instead allows manually specifying the resource name.",
                "java.lang.Object get(java.lang.String name, java.util.Locale locale)": "Checks a resource bundle for a value for this field using the entity name, the field name and a composite of the Primary Key field values as a key.",
                "java.util.Map getAllFields()": "Returns key/value pairs of entity fields",
                "java.util.Collection getAllKeys()": "Returns keys of entity fields",
                "java.math.BigDecimal getBigDecimal(java.lang.String name)": "",
                "java.lang.Boolean getBoolean(java.lang.String name)": "",
                "byte[] getBytes(java.lang.String name)": "",
                "java.sql.Date getDate(java.lang.String name)": "",
                "Delegator getDelegator()": "Get the GenericDelegator instance that created this value object and that is responsible for it.",
                "java.lang.Double getDouble(java.lang.String name)": "",
                "TimeDuration getDuration(java.lang.String name)": "Returns the specified field as a TimeDuration instance.",
                "java.lang.String getEntityName()": "",
                "java.util.Map getFields(java.util.Collection keysofFields)": "Used by clients to specify exactly the fields they are interested in",
                "java.lang.Float getFloat(java.lang.String name)": "",
                "java.lang.Integer getInteger(java.lang.String name)": "",
                "boolean getIsFromEntitySync()": "",
                "java.lang.Long getLong(java.lang.String name)": "",
                "ModelEntity getModelEntity()": "",
                "java.lang.Object getOriginalDbValue(java.lang.String name)": "",
                "java.lang.String getPkShortValueString()": "",
                "GenericPK getPrimaryKey()": "",
                "java.lang.String getString(java.lang.String name)": "",
                "java.sql.Time getTime(java.lang.String name)": "",
                "java.sql.Timestamp getTimestamp(java.lang.String name)": "",
                "boolean hasChanged()": "",
                "void init(Delegator delegator, ModelEntity modelEntity, java.lang.Object singlePkValue)": "Creates new GenericEntity from existing Map",
                "void init(Delegator delegator, ModelEntity modelEntity, java.util.Map fields)": "Creates new GenericEntity from existing Map",
                "void init(GenericEntity value)": "Copy Constructor: Creates new GenericEntity from existing GenericEntity",
                "void init(ModelEntity modelEntity)": "Creates new GenericEntity",
                "boolean isEmpty()": "",
                "boolean isModified()": "Deprecated. Use hasChanged()",
                "boolean isMutable()": "",
                "boolean isPrimaryKey()": "Returns true if the entity contains all of the primary key fields, but NO others.",
                "boolean isPrimaryKey(boolean requireValue)": "",
                "java.util.Set keySet()": "",
                "boolean lockEnabled()": "Used to indicate if locking is enabled for this entity",
                "org.w3c.dom.Document makeXmlDocument(java.util.Collection values)": "",
                "org.w3c.dom.Element makeXmlElement(org.w3c.dom.Document document)": "Makes an XML Element object with an attribute for each field of the entity",
                "org.w3c.dom.Element makeXmlElement(org.w3c.dom.Document document, java.lang.String prefix)": "Makes an XML Element object with an attribute for each field of the entity",
                "boolean matches(EntityCondition condition)": "",
                "boolean matchesFields(java.util.Map keyValuePairs)": "",
                "void notifyObservers()": "",
                "void notifyObservers(java.lang.Object arg)": "",
                "boolean originalDbValuesAvailable()": "",
                "java.lang.Object put(java.lang.String key, java.lang.Object value)": "",
                "void putAll(java.util.Map map)": "",
                "void refreshFromValue(GenericEntity newValue)": "",
                "java.lang.Object remove(java.lang.Object key)": "",
                "void removedFromDatasource()": "Flags this object as being removed from the data source.",
                "void reset()": "",
                "void set(java.lang.String name, java.lang.Object value)": "Sets the named field to the passed value, even if the value is null",
                "java.lang.Object set(java.lang.String name, java.lang.Object value, boolean setIfNull)": "Sets the named field to the passed value.",
                "void setAllFields(java.util.Map fields, boolean setIfEmpty, java.lang.String namePrefix, java.lang.Boolean pks)": "Intelligently sets fields on this entity from the Map of fields passed in",
                "void setBytes(java.lang.String name, byte[] bytes)": "Sets a field with an array of bytes, wrapping them automatically for easy use.",
                "void setChanged()": "",
                "void setDelegator(Delegator internalDelegator)": "Set the GenericDelegator instance that created this value object and that is responsible for it.",
                "void setFields(java.util.Map keyValuePairs)": "Used by clients to update particular fields in the entity",
                "void setImmutable()": "",
                "void setIsFromEntitySync(boolean isFromEntitySync)": "",
                "void setNextSeqId()": "",
                "void setNonPKFields(java.util.Map fields)": "go through the non-pks and for each one see if there is an entry in fields to set",
                "void setNonPKFields(java.util.Map fields, boolean setIfEmpty)": "go through the non-pks and for each one see if there is an entry in fields to set",
                "void setPKFields(java.util.Map fields)": "go through the pks and for each one see if there is an entry in fields to set",
                "void setPKFields(java.util.Map fields, boolean setIfEmpty)": "go through the pks and for each one see if there is an entry in fields to set",
                "void setString(java.lang.String name, java.lang.String value)": "Sets the named field to the passed value, converting the value from a String to the corrent type using Type.valueOf()",
                "int size()": "",
                "void synchronizedWithDatasource()": "Flags this object as being synchronized with the data source.",
                "java.lang.String toString()": "Creates a String for the entity, overrides the default toString This method is secure, it will not display encrypted fields",
                "java.lang.String toStringInsecure()": "Creates a String for the entity, overrides the default toString This method is NOT secure, it WILL display encrypted fields",
                "java.util.Collection values()": "",
                "void writeXmlText(java.io.PrintWriter writer, java.lang.String prefix)": "Writes XML text with an attribute or CDATA element for each field of the entity"
            },
            "super class": [
                "org.apache.ofbiz.entity.GenericEntity"
            ]
        }
    },
    "javax.servlet.http.HttpSession": {
        "javax.servlet.http.HttpSession": {
            "class": "HttpSession",
            "category": "Interface",
            "methods": {
                "Object getAttribute(String name)": "Returns the object bound with the specified name in this session, or null if no object is bound under the name.",
                "Enumeration getAttributeNames()": "Returns an Enumeration of String objects containing the names of all the objects bound to this session.",
                "long getCreationTime()": "Returns the time when this session was created, measured in milliseconds since midnight January 1, 1970 GMT.",
                "String getId()": "Returns a string containing the unique identifier assigned to this session.",
                "long getLastAccessedTime()": "Returns the last time the client sent a request associated with this session, as the number of milliseconds since midnight January 1, 1970 GMT, and marked by the time the container received the request.",
                "int getMaxInactiveInterval()": "Returns the maximum time interval, in seconds, that the servlet container will keep this session open between client accesses.",
                "ServletContext getServletContext()": "Returns the ServletContext to which this session belongs.",
                "void invalidate()": "Invalidates this session then unbinds any objects bound to it.",
                "boolean isNew()": "Returns true if the client does not yet know about the session or if the client chooses not to join the session.",
                "void removeAttribute(String name)": "Removes the object bound with the specified name from this session.",
                "void setAttribute(String name, Object value)": "Binds an object to this session, using the name specified.",
                "void setMaxInactiveInterval(int interval)": "Specifies the time, in seconds, between client requests before the servlet container will invalidate this session."
            },
            "super class": []
        }
    },
    "android.os.Message": {
        "android.os.Message": {
            "class": "Message",
            "category": "class",
            "methods": {
                "void copyFrom(Message o)": "Make this message like o.",
                "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
                "Runnable getCallback()": "Retrieve callback object that will execute when this message is handled.",
                "Bundle getData()": "Obtains a Bundle of arbitrary data associated with this event, lazily creating it if necessary.",
                "Handler getTarget()": "Retrieve the Handler implementation that will receive this message.",
                "long getWhen()": "Return the targeted delivery time of this message, in milliseconds.",
                "boolean isAsynchronous()": "Returns true if the message is asynchronous, meaning that it is not subject to Looper synchronization barriers.",
                "Message obtain(Handler h)": "Same as obtain(), but sets the value for the target member on the Message returned.",
                "Message obtain(Handler h, int what)": "Same as obtain(), but sets the values for both target and what members on the Message.",
                "Message obtain(Handler h, Runnable callback)": "Same as obtain(android.os.Handler), but assigns a callback Runnable on the Message that is returned.",
                "Message obtain(Message orig)": "Same as obtain(), but copies the values of an existing message (including its target) into the new one.",
                "Message obtain(Handler h, int what, int arg1, int arg2, Object obj)": "Same as obtain(), but sets the values of the target, what, arg1, arg2, and obj members.",
                "Message obtain(Handler h, int what, int arg1, int arg2)": "Same as obtain(), but sets the values of the target, what, arg1, and arg2 members.",
                "Message obtain(Handler h, int what, Object obj)": "Same as obtain(), but sets the values of the target, what, and obj members.",
                "Message obtain()": "Return a new Message instance from the global pool.",
                "Bundle peekData()": "Like getData(), but does not lazily create the Bundle.",
                "void recycle()": "Return a Message instance to the global pool.",
                "void sendToTarget()": "Sends this Message to the Handler specified by getTarget().",
                "void setAsynchronous(boolean async)": "Sets whether the message is asynchronous, meaning that it is not subject to Looper synchronization barriers.",
                "void setData(Bundle data)": "Sets a Bundle of arbitrary data values.",
                "void setTarget(Handler target)": "void setTarget(Handler target)",
                "String toString()": "Returns a string representation of the object.",
                "void writeToParcel(Parcel dest, int flags)": "Flatten this object in to a Parcel."
            },
            "super class": []
        }
    },
    "java.lang.AutoCloseable": {
        "java.lang.AutoCloseable": {
            "class": "AutoCloseable",
            "category": "Interface",
            "methods": {
                "void close()": "Closes this resource, relinquishing any underlying resources."
            },
            "super class": []
        }
    },
    "java.nio.Buffer": {
        "java.nio.Buffer": {
            "class": "Buffer",
            "category": "Class",
            "methods": {
                "Object array()": "Returns the array that backs this buffer (optional operation).",
                "int arrayOffset()": "Returns the offset within this buffer's backing array of the first element of the buffer (optional operation).",
                "int capacity()": "Returns this buffer's capacity.",
                "Buffer clear()": "Clears this buffer.",
                "Buffer flip()": "Flips this buffer.",
                "boolean hasArray()": "Tells whether or not this buffer is backed by an accessible array.",
                "boolean hasRemaining()": "Tells whether there are any elements between the current position and the limit.",
                "boolean isDirect()": "Tells whether or not this buffer is direct.",
                "boolean isReadOnly()": "Tells whether or not this buffer is read-only.",
                "int limit()": "Returns this buffer's limit.",
                "Buffer limit(int newLimit)": "Sets this buffer's limit.",
                "Buffer mark()": "Sets this buffer's mark at its position.",
                "int position()": "Returns this buffer's position.",
                "Buffer position(int newPosition)": "Sets this buffer's position.",
                "int remaining()": "Returns the number of elements between the current position and the limit.",
                "Buffer reset()": "Resets this buffer's position to the previously-marked position.",
                "Buffer rewind()": "Rewinds this buffer."
            },
            "super class": []
        }
    },
    "java.net.URLConnection": {
        "java.net.URLConnection": {
            "class": "URLConnection",
            "category": "Class",
            "methods": {
                "void addRequestProperty(String key, String value)": "Adds a general request property specified by a key-value pair.",
                "void connect()": "Opens a communications link to the resource referenced by this URL, if such a connection has not already been established.",
                "boolean getAllowUserInteraction()": "Returns the value of the allowUserInteraction field for this object.",
                "int getConnectTimeout()": "Returns setting for connect timeout.",
                "Object getContent()": "Retrieves the contents of this URL connection.",
                "Object getContent(Class[] classes)": "Retrieves the contents of this URL connection.",
                "String getContentEncoding()": "Returns the value of the content-encoding header field.",
                "int getContentLength()": "Returns the value of the content-length header field.",
                "long getContentLengthLong()": "Returns the value of the content-length header field as a long.",
                "String getContentType()": "Returns the value of the content-type header field.",
                "long getDate()": "Returns the value of the date header field.",
                "boolean getDefaultAllowUserInteraction()": "Returns the default value of the allowUserInteraction field.",
                "boolean getDefaultUseCaches()": "Returns the default value of a URLConnection's useCaches flag.",
                "boolean getDoInput()": "Returns the value of this URLConnection's doInput flag.",
                "boolean getDoOutput()": "Returns the value of this URLConnection's doOutput flag.",
                "long getExpiration()": "Returns the value of the expires header field.",
                "FileNameMap getFileNameMap()": "Loads filename map (a mimetable) from a data file.",
                "String getHeaderField(int n)": "Returns the value for the nth header field.",
                "String getHeaderField(String name)": "Returns the value of the named header field.",
                "long getHeaderFieldDate(String name, long Default)": "Returns the value of the named field parsed as date.",
                "int getHeaderFieldInt(String name, int Default)": "Returns the value of the named field parsed as a number.",
                "String getHeaderFieldKey(int n)": "Returns the key for the nth header field.",
                "long getHeaderFieldLong(String name, long Default)": "Returns the value of the named field parsed as a number.",
                "Map getHeaderFields()": "Returns an unmodifiable Map of the header fields.",
                "long getIfModifiedSince()": "Returns the value of this object's ifModifiedSince field.",
                "InputStream getInputStream()": "Returns an input stream that reads from this open connection.",
                "long getLastModified()": "Returns the value of the last-modified header field.",
                "OutputStream getOutputStream()": "Returns an output stream that writes to this connection.",
                "Permission getPermission()": "Returns a permission object representing the permission necessary to make the connection represented by this object.",
                "int getReadTimeout()": "Returns setting for read timeout.",
                "Map getRequestProperties()": "Returns an unmodifiable Map of general request properties for this connection.",
                "String getRequestProperty(String key)": "Returns the value of the named general request property for this connection.",
                "URL getURL()": "Returns the value of this URLConnection's URL field.",
                "boolean getUseCaches()": "Returns the value of this URLConnection's useCaches field.",
                "String guessContentTypeFromName(String fname)": "Tries to determine the content type of an object, based on the specified \"file\" component of a URL.",
                "String guessContentTypeFromStream(InputStream is)": "Tries to determine the type of an input stream based on the characters at the beginning of the input stream.",
                "void setAllowUserInteraction(boolean allowuserinteraction)": "Set the value of the allowUserInteraction field of this URLConnection.",
                "void setConnectTimeout(int timeout)": "Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection.",
                "void setContentHandlerFactory(ContentHandlerFactory fac)": "Sets the ContentHandlerFactory of an application.",
                "void setDefaultAllowUserInteraction(boolean defaultallowuserinteraction)": "Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.",
                "void setDefaultUseCaches(boolean defaultusecaches)": "Sets the default value of the useCaches field to the specified value.",
                "void setDoInput(boolean doinput)": "Sets the value of the doInput field for this URLConnection to the specified value.",
                "void setDoOutput(boolean dooutput)": "Sets the value of the doOutput field for this URLConnection to the specified value.",
                "void setFileNameMap(FileNameMap map)": "Sets the FileNameMap.",
                "void setIfModifiedSince(long ifmodifiedsince)": "Sets the value of the ifModifiedSince field of this URLConnection to the specified value.",
                "void setReadTimeout(int timeout)": "Sets the read timeout to a specified timeout, in milliseconds.",
                "void setRequestProperty(String key, String value)": "Sets the general request property.",
                "void setUseCaches(boolean usecaches)": "Sets the value of the useCaches field of this URLConnection to the specified value.",
                "String toString()": "Returns a String representation of this URL connection."
            },
            "super class": []
        }
    },
    "com.fasterxml.jackson.databind.node.ObjectNode": {
        "com.fasterxml.jackson.databind.node.ObjectNode": {
            "class": "ObjectNode",
            "category": "Class",
            "methods": {
                "JsonNode _at(com.fasterxml.jackson.core.JsonPointer ptr)": "",
                "boolean _childrenEqual(ObjectNode other)": "",
                "ObjectNode _put(String fieldName, JsonNode value)": "",
                "com.fasterxml.jackson.core.JsonToken asToken()": "Method that can be used for efficient type detection when using stream abstraction for traversing nodes.",
                "ObjectNode deepCopy()": "Method that can be called to get a node that is guaranteed not to allow changing of this node through mutators on this node or any of its children.",
                "Iterator elements()": "Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node.",
                "boolean equals(Comparator comparator, JsonNode o)": "Entry method for invoking customizable comparison, using passed-in Comparator object.",
                "boolean equals(Object o)": "Equality for node objects is defined as full (deep) value equality.",
                "Iterator fieldNames()": "",
                "Iterator fields()": "",
                "ObjectNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName, List foundSoFar)": "",
                "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
                "List findValues(String fieldName, List foundSoFar)": "",
                "List findValuesAsText(String fieldName, List foundSoFar)": "",
                "JsonNode get(int index)": "Method for accessing value of the specified element of an array node.",
                "JsonNode get(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "JsonNodeType getNodeType()": "Return the type of this node",
                "int hashCode()": "",
                "boolean isEmpty(SerializerProvider serializers)": "Method that may be called on instance to determine if it is considered \"empty\" for purposes of serialization filtering or not.",
                "JsonNode path(int index)": "This method is similar to get(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "JsonNode path(String fieldName)": "This method is similar to get(String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
                "ObjectNode put(String fieldName, BigDecimal v)": "Method for setting value of a field to specified numeric value.",
                "ObjectNode put(String fieldName, boolean v)": "Method for setting value of a field to specified String value.",
                "ObjectNode put(String fieldName, Boolean v)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "ObjectNode put(String fieldName, byte[] v)": "Method for setting value of a field to specified binary value",
                "ObjectNode put(String fieldName, double v)": "Method for setting value of a field to specified numeric value.",
                "ObjectNode put(String fieldName, Double v)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "ObjectNode put(String fieldName, float v)": "Method for setting value of a field to specified numeric value.",
                "ObjectNode put(String fieldName, Float v)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "ObjectNode put(String fieldName, int v)": "Method for setting value of a field to specified numeric value.",
                "ObjectNode put(String fieldName, Integer v)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "ObjectNode put(String fieldName, long v)": "Method for setting value of a field to specified numeric value.",
                "ObjectNode put(String fieldName, Long v)": "Method for setting value of a field to specified numeric value.",
                "ObjectNode put(String fieldName, short v)": "Method for setting value of a field to specified numeric value.",
                "ObjectNode put(String fieldName, Short v)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
                "ObjectNode put(String fieldName, String v)": "Method for setting value of a field to specified String value.",
                "ArrayNode putArray(String fieldName)": "Method that will construct an ArrayNode and add it as a field of this ObjectNode, replacing old value, if any.",
                "ObjectNode putNull(String fieldName)": "",
                "ObjectNode putObject(String fieldName)": "Method that will construct an ObjectNode and add it as a field of this ObjectNode, replacing old value, if any.",
                "ObjectNode putPOJO(String fieldName, Object pojo)": "",
                "ObjectNode putRawValue(String fieldName, RawValue raw)": "",
                "ObjectNode remove(Collection fieldNames)": "Method for removing specified field properties out of this ObjectNode.",
                "JsonNode remove(String fieldName)": "Method for removing field entry from this ObjectNode.",
                "ObjectNode removeAll()": "Method for removing all field properties, such that this ObjectNode will contain no properties after call.",
                "JsonNode replace(String fieldName, JsonNode value)": "Method for replacing value of specific property with passed value, and returning value (or null if none).",
                "ObjectNode retain(Collection fieldNames)": "Method for removing all field properties out of this ObjectNode except for ones specified in argument.",
                "ObjectNode retain(String... fieldNames)": "Method for removing all field properties out of this ObjectNode except for ones specified in argument.",
                "void serialize(com.fasterxml.jackson.core.JsonGenerator jg, SerializerProvider provider)": "Method that can be called to serialize this node and all of its descendants using specified JSON generator.",
                "void serializeWithType(com.fasterxml.jackson.core.JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
                "JsonNode set(String fieldName, JsonNode value)": "Method that will set specified field, replacing old value, if any.",
                "JsonNode setAll(Map properties)": "Method for adding given properties to this object node, overriding any existing values for those properties.",
                "JsonNode setAll(ObjectNode other)": "Method for adding all properties of the given Object, overriding any existing values for those properties.",
                "int size()": "",
                "String toString()": "Note: marked as abstract to ensure all implementation classes define it properly.",
                "ObjectNode with(String propertyName)": "Method that can be called on Object nodes, to access a property that has Object value; or if no such property exists, to create, add and return such Object node.",
                "ArrayNode withArray(String propertyName)": "Method that can be called on Object nodes, to access a property that has Array value; or if no such property exists, to create, add and return such Array node.",
                "ObjectNode without(Collection fieldNames)": "Method for removing specified field properties out of this ObjectNode.",
                "JsonNode without(String fieldName)": "Method for removing field entry from this ObjectNode, and returning instance after removal.",
                "ArrayNode arrayNode()": "Factory method that constructs and returns an empty ArrayNode Construction is done using registered JsonNodeFactory.",
                "String asText()": "Method that will return a valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise empty String.",
                "BinaryNode binaryNode(byte[] data)": "",
                "BinaryNode binaryNode(byte[] data, int offset, int length)": "",
                "BooleanNode booleanNode(boolean v)": "",
                "NullNode nullNode()": "",
                "NumericNode numberNode(BigDecimal v)": "",
                "NumericNode numberNode(BigInteger v)": "",
                "NumericNode numberNode(byte v)": "",
                "ValueNode numberNode(Byte v)": "",
                "NumericNode numberNode(double v)": "",
                "ValueNode numberNode(Double v)": "",
                "NumericNode numberNode(float v)": "",
                "ValueNode numberNode(Float v)": "",
                "NumericNode numberNode(int v)": "",
                "ValueNode numberNode(Integer v)": "",
                "NumericNode numberNode(long v)": "",
                "ValueNode numberNode(Long v)": "",
                "NumericNode numberNode(short v)": "",
                "ValueNode numberNode(Short v)": "",
                "ObjectNode objectNode()": "Factory method that constructs and returns an empty ObjectNode Construction is done using registered JsonNodeFactory.",
                "ValueNode pojoNode(Object pojo)": "",
                "ValueNode rawValueNode(RawValue value)": "Factory method to use for adding \"raw values\"; pre-encoded values that are included exactly as-is when node is serialized.",
                "T removeAll()": "Method for removing all children container has (if any)",
                "TextNode textNode(String text)": "",
                "JsonNode findPath(String fieldName)": "Method similar to findValue(java.lang.String), but that will return a \"missing node\" instead of null if no field is found.",
                "com.fasterxml.jackson.core.JsonParser.NumberType numberType()": "Returns code that identifies type of underlying numeric value, if (and only if) node is a number node.",
                "void serialize(com.fasterxml.jackson.core.JsonGenerator jgen, SerializerProvider provider)": "Method called to serialize node instances using given generator.",
                "void serializeWithType(com.fasterxml.jackson.core.JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
                "com.fasterxml.jackson.core.JsonParser traverse()": "",
                "com.fasterxml.jackson.core.JsonParser traverse(com.fasterxml.jackson.core.ObjectCodec codec)": "",
                "boolean asBoolean()": "Method that will try to convert value of this node to a Java boolean.",
                "boolean asBoolean(boolean defaultValue)": "Method that will try to convert value of this node to a Java boolean.",
                "double asDouble()": "Method that will try to convert value of this node to a Java double.",
                "double asDouble(double defaultValue)": "Method that will try to convert value of this node to a Java double.",
                "int asInt()": "Method that will try to convert value of this node to a Java int.",
                "int asInt(int defaultValue)": "Method that will try to convert value of this node to a Java int.",
                "long asLong()": "Method that will try to convert value of this node to a Java long.",
                "long asLong(long defaultValue)": "Method that will try to convert value of this node to a Java long.",
                "String asText(String defaultValue)": "Method similar to asText(), except that it will return defaultValue in cases where null value would be returned; either for missing nodes (trying to access missing property, or element at invalid item for array) or explicit nulls.",
                "JsonNode at(com.fasterxml.jackson.core.JsonPointer ptr)": "Method for locating node specified by given JSON pointer instances.",
                "JsonNode at(String jsonPtrExpr)": "Convenience method that is functionally equivalent to:",
                "BigInteger bigIntegerValue()": "",
                "byte[] binaryValue()": "Method to use for accessing binary content of binary nodes (nodes for which isBinary() returns true); or for Text Nodes (ones for which textValue() returns non-null value), to read decoded base64 data.",
                "boolean booleanValue()": "Method to use for accessing JSON boolean values (value literals 'true' and 'false').",
                "boolean canConvertToInt()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 32-bit signed integer type, int.",
                "boolean canConvertToLong()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 64-bit signed integer type, long.",
                "BigDecimal decimalValue()": "",
                "T deepCopy()": "Method that can be called to get a node that is guaranteed not to allow changing of this node through mutators on this node or any of its children.",
                "double doubleValue()": "Returns 64-bit floating point (double) value for this node, if and only if this node is numeric (isNumber() returns true).",
                "boolean equals(Comparator comparator, JsonNode other)": "Entry method for invoking customizable comparison, using passed-in Comparator object.",
                "JsonNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findParents(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
                "List findValues(String fieldName)": "Method for finding JSON Object fields with specified name, and returning found ones as a List.",
                "List findValuesAsText(String fieldName)": "Similar to findValues(java.lang.String), but will additionally convert values into Strings, calling asText().",
                "float floatValue()": "Returns 32-bit floating value for this node, if and only if this node is numeric (isNumber() returns true).",
                "boolean has(int index)": "Method that allows checking whether this node is JSON Array node and contains a value for specified index If this is the case (including case of specified indexing having null as value), returns true; otherwise returns false.",
                "boolean has(String fieldName)": "Method that allows checking whether this node is JSON Object node and contains value for specified property.",
                "boolean hasNonNull(int index)": "Method that is similar to has(int), but that will return false for explicitly added nulls.",
                "boolean hasNonNull(String fieldName)": "Method that is similar to has(String), but that will return false for explicitly added nulls.",
                "int intValue()": "Returns integer value for this node, if and only if this node is numeric (isNumber() returns true).",
                "boolean isArray()": "",
                "boolean isBigDecimal()": "",
                "boolean isBigInteger()": "",
                "boolean isBinary()": "Method that can be used to check if this node represents binary data (Base64 encoded).",
                "boolean isBoolean()": "Method that can be used to check if this node was created from JSON boolean value (literals \"true\" and \"false\").",
                "boolean isContainerNode()": "",
                "boolean isDouble()": "",
                "boolean isFloat()": "",
                "boolean isFloatingPointNumber()": "",
                "boolean isInt()": "Method that can be used to check whether contained value is a number represented as Java int.",
                "boolean isIntegralNumber()": "",
                "boolean isLong()": "Method that can be used to check whether contained value is a number represented as Java long.",
                "boolean isMissingNode()": "",
                "boolean isNull()": "Method that can be used to check if this node was created from JSON literal null value.",
                "boolean isNumber()": "",
                "boolean isObject()": "",
                "boolean isPojo()": "Method that can be used to check if the node is a wrapper for a POJO (\"Plain Old Java Object\" aka \"bean\".",
                "boolean isShort()": "Method that can be used to check whether contained value is a number represented as Java short.",
                "boolean isTextual()": "Method that checks whether this node represents basic JSON String value.",
                "boolean isValueNode()": "",
                "Iterator iterator()": "Same as calling elements(); implemented so that convenience \"for-each\" loop can be used for looping over elements of JSON Array constructs.",
                "long longValue()": "Returns 64-bit long value for this node, if and only if this node is numeric (isNumber() returns true).",
                "Number numberValue()": "Returns numeric value for this node, if and only if this node is numeric (isNumber() returns true); otherwise returns null",
                "short shortValue()": "Returns 16-bit short value for this node, if and only if this node is numeric (isNumber() returns true).",
                "String textValue()": "Method to use for accessing String values.",
                "JsonNode with(String propertyName)": "Method that can be called on Object nodes, to access a property that has Object value; or if no such property exists, to create, add and return such Object node.",
                "JsonNode withArray(String propertyName)": "Method that can be called on Object nodes, to access a property that has Array value; or if no such property exists, to create, add and return such Array node."
            },
            "super class": [
                "com.fasterxml.jackson.databind.node.ContainerNode",
                "com.fasterxml.jackson.databind.node.BaseJsonNode",
                "com.fasterxml.jackson.databind.JsonNode",
                "com.fasterxml.jackson.databind.JsonSerializable.Base"
            ]
        }
    },
    "org.ejml.data.RowD1Matrix64F": {
        "org.ejml.data.RowD1Matrix64F": {
            "class": "RowD1Matrix64F",
            "category": "Class",
            "methods": {
                "int getNumCols()": "Returns the number of columns in this matrix.",
                "int getNumRows()": "Returns the number of rows in this matrix.",
                "MatrixIterator iterator(boolean rowMajor, int minRow, int minCol, int maxRow, int maxCol)": "Creates a new iterator for traversing through a submatrix inside this matrix.",
                "void reshape(int numRows, int numCols)": "Equivalent to invoking reshape(numRows, numCols, false);",
                "void reshape(int numRows, int numCols, boolean saveValues)": "Changes the number of rows and columns in the matrix, allowing its size to grow or shrink.",
                "void set(ReshapeMatrix64F A)": "Assigns the value of 'this' matrix to be the same as 'A'.",
                "void setNumCols(int numCols)": "Sets the number of columns.",
                "void setNumRows(int numRows)": "Sets the number of rows.",
                "double div(int index, double val)": "Divides the specified value to the internal data array at the specified index. Equivalent to: this.data[index] /= val;",
                "double get(int index)": "Returns the value of the matrix at the specified internal array index.",
                "double[] getData()": "Used to get a reference to the internal data.",
                "int getIndex(int row, int col)": "Returns the internal array index for the specified row and column.",
                "double minus(int index, double val)": "Subtracts the specified value to the internal data array at the specified index. Equivalent to: this.data[index] -= val;",
                "double plus(int index, double val)": "Adds the specified value to the internal data array at the specified index. Equivalent to: this.data[index] += val;",
                "void set(D1Matrix64F b)": "Sets the value of this matrix to be the same as the value of the provided matrix.",
                "double set(int index, double val)": "Sets the element's value at the specified index.",
                "void setData(double[] data)": "Changes the internal array reference.",
                "double times(int index, double val)": "Multiplies the specified value to the internal data array at the specified index. Equivalent to: this.data[index] *= val;"
            },
            "super class": [
                "org.ejml.data.ReshapeMatrix64F",
                "org.ejml.data.D1Matrix64F"
            ]
        }
    },
    "org.eclipse.swt.widgets.Item": {
        "org.eclipse.swt.widgets.Item": {
            "class": "Item",
            "category": "Class",
            "methods": {
                "Image getImage()": "Returns the receiver's image if it has one, or null if it does not",
                "String getText()": "Returns the receiver's text, which will be an empty string if it has never been set",
                "void setImage(Image image)": "Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.",
                "void setText(String string)": "Sets the receiver's text.",
                "void addListener(int eventType, Listener listener)": "Adds the listener to the collection of listeners who will be notified when an event of the given type occurs.",
                "void checkSubclass()": "Checks that this class can be subclassed.",
                "void checkWidget()": "Throws an SWTException if the receiver cannot be accessed by the caller.",
                "void dispose()": "Disposes of the operating system resources associated with the receiver and all its descendants.",
                "Object getData()": "Returns the application-defined widget data associated with the receiver, or null if it has not been set.",
                "Object getData(String key)": "Returns the application-defined property of the receiver with the specified name, or null if it has not been set.",
                "abstract Display getDisplay()": "Returns the Display that is associated with the receiver.",
                "int getStyle()": "Returns the receiver's style information.",
                "boolean isDisposed()": "Returns true if the widget has been disposed, and false otherwise.",
                "boolean isListening(int eventType)": "Returns true if there are any listeners for the specified event type associated with the receiver, and false otherwise.",
                "void notifyListeners(int eventType, Event event)": "Notifies all of the receiver's listeners for events of the given type that one such event has occurred by invoking their handleEvent() method.",
                "void removeDisposeListener(DisposeListener listener)": "Removes the listener from the collection of listeners who will be notified when the widget is disposed.",
                "void removeListener(int eventType, Listener listener)": "Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.",
                "void removeListener(int eventType, org.eclipse.swt.internal.SWTEventListener listener)": "Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.",
                "void setData(Object data)": "Sets the application-defined widget data associated with the receiver to be the argument.",
                "void setData(String key, Object value)": "Sets the application-defined property of the receiver with the specified name to the given value.",
                "String toString()": "Returns a string containing a concise, human-readable description of the receiver."
            },
            "super class": [
                "org.eclipse.swt.widgets.Widget"
            ]
        }
    },
    "java.util.BitSet": {
        "java.util.BitSet": {
            "class": "BitSet",
            "category": "Class",
            "methods": {
                "void and(BitSet set)": "Performs a logical AND of this target bit set with the argument bit set.",
                "void andNot(BitSet set)": "Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.",
                "int cardinality()": "Returns the number of bits set to true in this BitSet.",
                "void clear()": "Sets all of the bits in this BitSet to false.",
                "void clear(int bitIndex)": "Sets the bit specified by the index to false.",
                "void clear(int fromIndex, int toIndex)": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.",
                "Object clone()": "Cloning this BitSet produces a new BitSet that is equal to it.",
                "boolean equals(Object obj)": "Compares this object against the specified object.",
                "void flip(int bitIndex)": "Sets the bit at the specified index to the complement of its current value.",
                "void flip(int fromIndex, int toIndex)": "Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.",
                "boolean get(int bitIndex)": "Returns the value of the bit with the specified index.",
                "BitSet get(int fromIndex, int toIndex)": "Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).",
                "int hashCode()": "Returns the hash code value for this bit set.",
                "boolean intersects(BitSet set)": "Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.",
                "boolean isEmpty()": "Returns true if this BitSet contains no bits that are set to true.",
                "int length()": "Returns the \"logical size\" of this BitSet: the index of the highest set bit in the BitSet plus one.",
                "int nextClearBit(int fromIndex)": "Returns the index of the first bit that is set to false that occurs on or after the specified starting index.",
                "int nextSetBit(int fromIndex)": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index.",
                "void or(BitSet set)": "Performs a logical OR of this bit set with the bit set argument.",
                "int previousClearBit(int fromIndex)": "Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index.",
                "int previousSetBit(int fromIndex)": "Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index.",
                "void set(int bitIndex)": "Sets the bit at the specified index to true.",
                "void set(int bitIndex, boolean value)": "Sets the bit at the specified index to the specified value.",
                "void set(int fromIndex, int toIndex)": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.",
                "void set(int fromIndex, int toIndex, boolean value)": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.",
                "int size()": "Returns the number of bits of space actually in use by this BitSet to represent bit values.",
                "IntStream stream()": "Returns a stream of indices for which this BitSet contains a bit in the set state.",
                "byte[] toByteArray()": "Returns a new byte array containing all the bits in this bit set.",
                "long[] toLongArray()": "Returns a new long array containing all the bits in this bit set.",
                "String toString()": "Returns a string representation of this bit set.",
                "BitSet valueOf(byte[] bytes)": "Returns a new bit set containing all the bits in the given byte array.",
                "BitSet valueOf(ByteBuffer bb)": "Returns a new bit set containing all the bits in the given byte buffer between its position and limit.",
                "BitSet valueOf(long[] longs)": "Returns a new bit set containing all the bits in the given long array.",
                "BitSet valueOf(LongBuffer lb)": "Returns a new bit set containing all the bits in the given long buffer between its position and limit.",
                "void xor(BitSet set)": "Performs a logical XOR of this bit set with the bit set argument."
            },
            "super class": []
        }
    },
    "java.lang.StringBuilder": {
        "java.lang.StringBuilder": {
            "class": "StringBuilder",
            "category": "Class",
            "methods": {
                "StringBuilder append(boolean b)": "Appends the string representation of the boolean argument to the sequence.",
                "StringBuilder append(char c)": "Appends the string representation of the char argument to this sequence.",
                "StringBuilder append(char[] str)": "Appends the string representation of the char array argument to this sequence.",
                "StringBuilder append(char[] str, int offset, int len)": "Appends the string representation of a subarray of the char array argument to this sequence.",
                "StringBuilder append(CharSequence s)": "Appends the specified character sequence to this Appendable.",
                "StringBuilder append(CharSequence s, int start, int end)": "Appends a subsequence of the specified CharSequence to this sequence.",
                "StringBuilder append(double d)": "Appends the string representation of the double argument to this sequence.",
                "StringBuilder append(float f)": "Appends the string representation of the float argument to this sequence.",
                "StringBuilder append(int i)": "Appends the string representation of the int argument to this sequence.",
                "StringBuilder append(long lng)": "Appends the string representation of the long argument to this sequence.",
                "StringBuilder append(Object obj)": "Appends the string representation of the Object argument.",
                "StringBuilder append(String str)": "Appends the specified string to this character sequence.",
                "StringBuilder append(StringBuffer sb)": "Appends the specified StringBuffer to this sequence.",
                "StringBuilder appendCodePoint(int codePoint)": "Appends the string representation of the codePoint argument to this sequence.",
                "int capacity()": "Returns the current capacity.",
                "char charAt(int index)": "Returns the char value in this sequence at the specified index.",
                "int codePointAt(int index)": "Returns the character (Unicode code point) at the specified index.",
                "int codePointBefore(int index)": "Returns the character (Unicode code point) before the specified index.",
                "int codePointCount(int beginIndex, int endIndex)": "Returns the number of Unicode code points in the specified text range of this sequence.",
                "StringBuilder delete(int start, int end)": "Removes the characters in a substring of this sequence.",
                "StringBuilder deleteCharAt(int index)": "Removes the char at the specified position in this sequence.",
                "void ensureCapacity(int minimumCapacity)": "Ensures that the capacity is at least equal to the specified minimum.",
                "void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)": "Characters are copied from this sequence into the destination character array dst.",
                "int indexOf(String str)": "Returns the index within this string of the first occurrence of the specified substring.",
                "int indexOf(String str, int fromIndex)": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.",
                "StringBuilder insert(int offset, boolean b)": "Inserts the string representation of the boolean argument into this sequence.",
                "StringBuilder insert(int offset, char c)": "Inserts the string representation of the char argument into this sequence.",
                "StringBuilder insert(int offset, char[] str)": "Inserts the string representation of the char array argument into this sequence.",
                "StringBuilder insert(int index, char[] str, int offset, int len)": "Inserts the string representation of a subarray of the str array argument into this sequence.",
                "StringBuilder insert(int dstOffset, CharSequence s)": "Inserts the specified CharSequence into this sequence.",
                "StringBuilder insert(int dstOffset, CharSequence s, int start, int end)": "Inserts a subsequence of the specified CharSequence into this sequence.",
                "StringBuilder insert(int offset, double d)": "Inserts the string representation of the double argument into this sequence.",
                "StringBuilder insert(int offset, float f)": "Inserts the string representation of the float argument into this sequence.",
                "StringBuilder insert(int offset, int i)": "Inserts the string representation of the second int argument into this sequence.",
                "StringBuilder insert(int offset, long l)": "Inserts the string representation of the long argument into this sequence.",
                "StringBuilder insert(int offset, Object obj)": "Inserts the string representation of the Object argument into this character sequence.",
                "StringBuilder insert(int offset, String str)": "Inserts the string into this character sequence.",
                "int lastIndexOf(String str)": "Returns the index within this string of the rightmost occurrence of the specified substring.",
                "int lastIndexOf(String str, int fromIndex)": "Returns the index within this string of the last occurrence of the specified substring.",
                "int length()": "Returns the length (character count).",
                "int offsetByCodePoints(int index, int codePointOffset)": "Returns the index within this sequence that is offset from the given index by codePointOffset code points.",
                "StringBuilder replace(int start, int end, String str)": "Replaces the characters in a substring of this sequence with characters in the specified String.",
                "StringBuilder reverse()": "Causes this character sequence to be replaced by the reverse of the sequence.",
                "void setCharAt(int index, char ch)": "The character at the specified index is set to ch.",
                "void setLength(int newLength)": "Sets the length of the character sequence.",
                "CharSequence subSequence(int start, int end)": "Returns a new character sequence that is a subsequence of this sequence.",
                "String substring(int start)": "Returns a new String that contains a subsequence of characters currently contained in this character sequence.",
                "String substring(int start, int end)": "Returns a new String that contains a subsequence of characters currently contained in this sequence.",
                "String toString()": "Returns a string representing the data in this sequence.",
                "void trimToSize()": "Attempts to reduce storage used for the character sequence."
            },
            "super class": []
        }
    },
    "java.util.Hashtable": {
        "java.util.Hashtable": {
            "class": "Hashtable",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "Object clone()": "Creates a shallow copy of this hashtable.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean contains(Object value)": "Tests if some key maps into the specified value in this hashtable.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Enumeration elements()": "Returns an enumeration of the values in this dictionary.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Enumeration keys()": "Returns an enumeration of the keys in this dictionary.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map t)": "Copies all of the mappings from the specified map to this hashtable.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "void rehash()": "Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "String toString()": "Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters \", \" (comma and space).",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation)."
            },
            "super class": [
                "java.util.Dictionary",
                "java.util.Map"
            ]
        }
    },
    "com.github.javaparser.ast.expr.Expression": {
        "com.github.javaparser.ast.expr.Expression": {
            "class": "Expression",
            "category": "Class",
            "methods": {
                "AnnotationExpr asAnnotationExpr()": "",
                "ArrayAccessExpr asArrayAccessExpr()": "",
                "ArrayCreationExpr asArrayCreationExpr()": "",
                "ArrayInitializerExpr asArrayInitializerExpr()": "",
                "AssignExpr asAssignExpr()": "",
                "BinaryExpr asBinaryExpr()": "",
                "BooleanLiteralExpr asBooleanLiteralExpr()": "",
                "CastExpr asCastExpr()": "",
                "CharLiteralExpr asCharLiteralExpr()": "",
                "ClassExpr asClassExpr()": "",
                "ConditionalExpr asConditionalExpr()": "",
                "DoubleLiteralExpr asDoubleLiteralExpr()": "",
                "EnclosedExpr asEnclosedExpr()": "",
                "FieldAccessExpr asFieldAccessExpr()": "",
                "InstanceOfExpr asInstanceOfExpr()": "",
                "IntegerLiteralExpr asIntegerLiteralExpr()": "",
                "LambdaExpr asLambdaExpr()": "",
                "LiteralExpr asLiteralExpr()": "",
                "LiteralStringValueExpr asLiteralStringValueExpr()": "",
                "LongLiteralExpr asLongLiteralExpr()": "",
                "MarkerAnnotationExpr asMarkerAnnotationExpr()": "",
                "MethodCallExpr asMethodCallExpr()": "",
                "MethodReferenceExpr asMethodReferenceExpr()": "",
                "NameExpr asNameExpr()": "",
                "NormalAnnotationExpr asNormalAnnotationExpr()": "",
                "NullLiteralExpr asNullLiteralExpr()": "",
                "ObjectCreationExpr asObjectCreationExpr()": "",
                "SingleMemberAnnotationExpr asSingleMemberAnnotationExpr()": "",
                "StringLiteralExpr asStringLiteralExpr()": "",
                "SuperExpr asSuperExpr()": "",
                "ThisExpr asThisExpr()": "",
                "TypeExpr asTypeExpr()": "",
                "UnaryExpr asUnaryExpr()": "",
                "VariableDeclarationExpr asVariableDeclarationExpr()": "",
                "Expression clone()": "",
                "ExpressionMetaModel getMetaModel()": "",
                "void ifAnnotationExpr(Consumer action)": "",
                "void ifArrayAccessExpr(Consumer action)": "",
                "void ifArrayCreationExpr(Consumer action)": "",
                "void ifArrayInitializerExpr(Consumer action)": "",
                "void ifAssignExpr(Consumer action)": "",
                "void ifBinaryExpr(Consumer action)": "",
                "void ifBooleanLiteralExpr(Consumer action)": "",
                "void ifCastExpr(Consumer action)": "",
                "void ifCharLiteralExpr(Consumer action)": "",
                "void ifClassExpr(Consumer action)": "",
                "void ifConditionalExpr(Consumer action)": "",
                "void ifDoubleLiteralExpr(Consumer action)": "",
                "void ifEnclosedExpr(Consumer action)": "",
                "void ifFieldAccessExpr(Consumer action)": "",
                "void ifInstanceOfExpr(Consumer action)": "",
                "void ifIntegerLiteralExpr(Consumer action)": "",
                "void ifLambdaExpr(Consumer action)": "",
                "void ifLiteralExpr(Consumer action)": "",
                "void ifLiteralStringValueExpr(Consumer action)": "",
                "void ifLongLiteralExpr(Consumer action)": "",
                "void ifMarkerAnnotationExpr(Consumer action)": "",
                "void ifMethodCallExpr(Consumer action)": "",
                "void ifMethodReferenceExpr(Consumer action)": "",
                "void ifNameExpr(Consumer action)": "",
                "void ifNormalAnnotationExpr(Consumer action)": "",
                "void ifNullLiteralExpr(Consumer action)": "",
                "void ifObjectCreationExpr(Consumer action)": "",
                "void ifSingleMemberAnnotationExpr(Consumer action)": "",
                "void ifStringLiteralExpr(Consumer action)": "",
                "void ifSuperExpr(Consumer action)": "",
                "void ifThisExpr(Consumer action)": "",
                "void ifTypeExpr(Consumer action)": "",
                "void ifUnaryExpr(Consumer action)": "",
                "void ifVariableDeclarationExpr(Consumer action)": "",
                "boolean isAnnotationExpr()": "",
                "boolean isArrayAccessExpr()": "",
                "boolean isArrayCreationExpr()": "",
                "boolean isArrayInitializerExpr()": "",
                "boolean isAssignExpr()": "",
                "boolean isBinaryExpr()": "",
                "boolean isBooleanLiteralExpr()": "",
                "boolean isCastExpr()": "",
                "boolean isCharLiteralExpr()": "",
                "boolean isClassExpr()": "",
                "boolean isConditionalExpr()": "",
                "boolean isDoubleLiteralExpr()": "",
                "boolean isEnclosedExpr()": "",
                "boolean isFieldAccessExpr()": "",
                "boolean isInstanceOfExpr()": "",
                "boolean isIntegerLiteralExpr()": "",
                "boolean isLambdaExpr()": "",
                "boolean isLiteralExpr()": "",
                "boolean isLiteralStringValueExpr()": "",
                "boolean isLongLiteralExpr()": "",
                "boolean isMarkerAnnotationExpr()": "",
                "boolean isMethodCallExpr()": "",
                "boolean isMethodReferenceExpr()": "",
                "boolean isNameExpr()": "",
                "boolean isNormalAnnotationExpr()": "",
                "boolean isNullLiteralExpr()": "",
                "boolean isObjectCreationExpr()": "",
                "boolean isSingleMemberAnnotationExpr()": "",
                "boolean isStringLiteralExpr()": "",
                "boolean isSuperExpr()": "",
                "boolean isThisExpr()": "",
                "boolean isTypeExpr()": "",
                "boolean isUnaryExpr()": "",
                "boolean isVariableDeclarationExpr()": "",
                "boolean remove(Node node)": "",
                "boolean replace(Node node, Node replacementNode)": "",
                "void addOrphanComment(Comment comment)": "",
                "Node clone()": "",
                "boolean containsData(DataKey key)": "",
                "void customInitialization()": "Called in every constructor for node specific code.",
                "boolean equals(Object obj)": "",
                "Optional findCompilationUnit()": "",
                "Node findRootNode()": "Finds the root node of this AST by finding the topmost parent.",
                "List getAllContainedComments()": "This is the list of Comment which are contained in the Node either because they are properly associated to one of its children or because they are floating around inside the Node",
                "List getChildNodes()": "Contains all nodes that have this node set as their parent.",
                "List getChildNodesByType(Class clazz)": "Recursively finds all nodes of a certain type.",
                "Optional getComment()": "This is a comment associated with this node.",
                "M getData(DataKey key)": "Gets data for this node using the given key.",
                "NodeMetaModel getMetaModel()": "",
                "List getOrphanComments()": "This is a list of Comment which are inside the node and are not associated with any meaningful AST Node.",
                "Optional getParentNode()": "Return the parent node or null, if no parent is set.",
                "Node getParentNodeForChildren()": "this for everything except NodeLists.",
                "Node.Parsedness getParsed()": "",
                "Optional getRange()": "",
                "SymbolResolver getSymbolResolver()": "",
                "Optional getTokenRange()": "",
                "int hashCode()": "",
                "boolean isRegistered(AstObserver observer)": "Was this observer registered? Note that equals is used to determine if the given observer was registered.",
                "void notifyPropertyChange(ObservableProperty property, P oldValue, P newValue)": "",
                "void register(AstObserver observer)": "Register an observer.",
                "void register(AstObserver observer, Node.ObserverRegistrationMode mode)": "Register a new observer for the given node.",
                "void registerForSubtree(AstObserver observer)": "Register the observer for the current node and all the contained node and nodelists, recursively.",
                "boolean remove()": "Try to remove this node from the parent",
                "Node removeComment()": "",
                "void removeForced()": "Forcibly removes this node from the AST.",
                "boolean removeOrphanComment(Comment comment)": "",
                "boolean replace(Node node)": "Try to replace this node in the parent with the supplied node.",
                "void setAsParentNodeOf(Node childNode)": "",
                "void setAsParentNodeOf(NodeList list)": "",
                "Node setBlockComment(String comment)": "Use this to store additional information to this node.",
                "Node setComment(Comment comment)": "Use this to store additional information to this node.",
                "void setData(DataKey key, M object)": "Sets data for this node using the given key.",
                "Node setLineComment(String comment)": "Use this to store additional information to this node.",
                "Node setParentNode(Node newParentNode)": "Assign a new parent to this node, removing it from the list of children of the previous parent, if any.",
                "Node setParsed(Node.Parsedness parsed)": "Used by the parser to flag unparsable nodes.",
                "Node setRange(Range range)": "",
                "Node setTokenRange(TokenRange tokenRange)": "",
                "String toString()": "Return the String representation of this node.",
                "String toString(PrettyPrinterConfiguration prettyPrinterConfiguration)": "",
                "void tryAddImportToParentCompilationUnit(Class clazz)": "",
                "void unregister(AstObserver observer)": "Unregister an observer."
            },
            "super class": [
                "com.github.javaparser.ast.Node"
            ]
        }
    },
    "org.eclipse.jface.text.AbstractDocument": {
        "org.eclipse.jface.text.AbstractDocument": {
            "class": "AbstractDocument",
            "category": "Class",
            "methods": {
                "void addDocumentListener(IDocumentListener listener)": "Registers a document listener with the document.",
                "void addDocumentPartitioningListener(IDocumentPartitioningListener listener)": "Registers a document partitioning listener with the document.",
                "void addPosition(Position position)": "Adds the position to the document's default position category.",
                "void addPosition(String category, Position position)": "Adds the position to the specified position category of the document.",
                "void addPositionCategory(String category)": "Adds a new position category to the document.",
                "void addPositionUpdater(IPositionUpdater updater)": "Appends a new position updater to the document's list of position updaters.",
                "void addPrenotifiedDocumentListener(IDocumentListener listener)": "Adds the given document listener as one which is notified before those document listeners added with addDocumentListener are notified.",
                "void completeInitialization()": "Initializes document listeners, positions, and position updaters.",
                "int computeIndexInCategory(String category, int offset)": "Computes the index at which a Position with the specified offset would be inserted into the given category.",
                "int computeIndexInPositionList(List positions, int offset)": "Computes the index in the list of positions at which a position with the given offset would be inserted.",
                "int computeNumberOfLines(String text)": "Computes the number of lines in the given text.",
                "ITypedRegion[] computePartitioning(int offset, int length)": "Computes the partitioning of the given document range using the document's partitioner.",
                "boolean containsPosition(String category, int offset, int length)": "Determines whether a position described by the parameters is managed by this document.",
                "boolean containsPositionCategory(String category)": "Checks the presence of the specified position category.",
                "void fireDocumentAboutToBeChanged(DocumentEvent event)": "Fires the given document event to all registers document listeners informing them about the forthcoming document manipulation.",
                "void fireDocumentChanged(DocumentEvent event)": "Updates the internal document structures and informs all document listeners.",
                "void fireDocumentPartitioningChanged()": "Deprecated. use fireDocumentPartitioningChanged(IRegion) instead",
                "void fireDocumentPartitioningChanged(IRegion region)": "Fires the document partitioning changed notification to all registered document partitioning listeners.",
                "String get()": "Returns this document's complete text.",
                "String get(int pos, int length)": "Returns this document's text for the specified range.",
                "char getChar(int pos)": "Returns the character at the given document offset in this document.",
                "String getContentType(int offset)": "Returns the type of the document partition containing the given offset.",
                "List getDocumentListeners()": "Returns the document's document listeners.",
                "Map getDocumentManagedPositions()": "Returns all positions managed by the document grouped by category.",
                "IDocumentPartitioner getDocumentPartitioner()": "Returns this document's partitioner.",
                "List getDocumentPartitioningListeners()": "Returns the document's partitioning listeners.",
                "String[] getLegalContentTypes()": "Returns the set of legal content types of document partitions.",
                "String[] getLegalLineDelimiters()": "Returns the document's legal line delimiters.",
                "int getLength()": "Returns the number of characters in this document.",
                "String getLineDelimiter(int line)": "Returns the line delimiter of that line.",
                "IRegion getLineInformation(int line)": "Returns a description of the specified line.",
                "IRegion getLineInformationOfOffset(int offset)": "Returns a description of the line at the given offset.",
                "int getLineLength(int line)": "Returns the length of the given line including the line's delimiter.",
                "int getLineOffset(int line)": "Determines the offset of the first character of the given line.",
                "int getLineOfOffset(int pos)": "Returns the number of the line at which the character of the specified position is located.",
                "int getNumberOfLines()": "Returns the number of lines in this document.",
                "int getNumberOfLines(int offset, int length)": "Returns the number of lines which are occupied by a given text range.",
                "ITypedRegion getPartition(int offset)": "Returns the document partition in which the position is located.",
                "String[] getPositionCategories()": "Returns all position categories of this document.",
                "Position[] getPositions(String category)": "Returns all positions of the given position category.",
                "IPositionUpdater[] getPositionUpdaters()": "Returns the list of position updaters attached to the document.",
                "ITextStore getStore()": "Returns the document's text store.",
                "ILineTracker getTracker()": "Returns the document's line tracker.",
                "void insertPositionUpdater(IPositionUpdater updater, int index)": "Inserts the position updater at the specified index in the document's list of position updaters.",
                "void registerPostNotificationReplace(IDocumentListener owner, IDocumentExtension.IReplace replace)": "Callback for document listeners to be used inside documentChanged to register a post notification replace operation on the document notifying them.",
                "void removeDocumentListener(IDocumentListener listener)": "Removes the listener from the document's list of document listeners.",
                "void removeDocumentPartitioningListener(IDocumentPartitioningListener listener)": "Removes the listener from this document's list of document partitioning listeners.",
                "void removePosition(Position position)": "Removes the given position from the document's default position category.",
                "void removePosition(String category, Position position)": "Removes the given position from the specified position category.",
                "void removePositionCategory(String category)": "Deletes the position category from the document.",
                "void removePositionUpdater(IPositionUpdater updater)": "Removes the position updater from the document's list of position updaters.",
                "void removePrenotifiedDocumentListener(IDocumentListener listener)": "Removes the given document listener from the document's list of prenotified document listeners.",
                "void replace(int pos, int length, String text)": "Substitutes the given text for the specified document range.",
                "void resumePostNotificationProcessing()": "Resumes the processing of post notification replace operations.",
                "int search(int startPosition, String findString, boolean forwardSearch, boolean caseSensitive, boolean wholeWord)": "Returns the offset of a given search string in the document based on a set of search criteria.",
                "void set(String text)": "Replaces the content of the document with the given text.",
                "void setDocumentPartitioner(IDocumentPartitioner partitioner)": "Sets this document's partitioner.",
                "void setLineTracker(ILineTracker tracker)": "Sets the document's line tracker.",
                "void setTextStore(ITextStore store)": "Sets the document's text store.",
                "void startSequentialRewrite(boolean normalized)": "Tells the document that it is about to be sequentially rewritten.",
                "void stopPostNotificationProcessing()": "Stops the processing of registered post notification replace operations until resumePostNotificationProcessing is called.",
                "void stopSequentialRewrite()": "Tells the document that the sequential rewrite has been finished.",
                "void updateDocumentStructures(DocumentEvent event)": "Updates document partitioning and document positions according to the specification given by the document event.",
                "void updatePositions(DocumentEvent event)": "Updates all positions of all categories to the change described by the document event."
            },
            "super class": []
        }
    },
    "android.graphics.Bitmap": {
        "android.graphics.Bitmap": {
            "class": "Bitmap",
            "category": "class",
            "methods": {
                "Bitmap asShared()": "Return an immutable bitmap backed by shared memory which can be efficiently passed between processes via Parcelable.",
                "boolean compress(Bitmap.CompressFormat format, int quality, OutputStream stream)": "Write a compressed version of the bitmap to the specified outputstream.",
                "Bitmap copy(Bitmap.Config config, boolean isMutable)": "Tries to make a new bitmap based on the dimensions of this bitmap, setting the new bitmap's config to the one specified, and then copying this bitmap's pixels into the new bitmap.",
                "void copyPixelsFromBuffer(Buffer src)": "Copy the pixels from the buffer, beginning at the current position, overwriting the bitmap's pixels.",
                "void copyPixelsToBuffer(Buffer dst)": "Copy the bitmap's pixels into the specified buffer (allocated by the caller).",
                "Bitmap createBitmap(Bitmap source, int x, int y, int width, int height)": "Returns a bitmap from the specified subset of the source bitmap.",
                "Bitmap createBitmap(int[] colors, int width, int height, Bitmap.Config config)": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
                "Bitmap createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)": "Returns a bitmap from subset of the source bitmap, transformed by the optional matrix.",
                "Bitmap createBitmap(DisplayMetrics display, int width, int height, Bitmap.Config config, boolean hasAlpha, ColorSpace colorSpace)": "Returns a mutable bitmap with the specified width and height.",
                "Bitmap createBitmap(Bitmap src)": "Returns a bitmap from the source bitmap.",
                "Bitmap createBitmap(Picture source)": "Creates a Bitmap from the given Picture source of recorded drawing commands.",
                "Bitmap createBitmap(DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config)": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
                "Bitmap createBitmap(DisplayMetrics display, int[] colors, int width, int height, Bitmap.Config config)": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
                "Bitmap createBitmap(DisplayMetrics display, int width, int height, Bitmap.Config config)": "Returns a mutable bitmap with the specified width and height.",
                "Bitmap createBitmap(int[] colors, int offset, int stride, int width, int height, Bitmap.Config config)": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
                "Bitmap createBitmap(Picture source, int width, int height, Bitmap.Config config)": "Creates a Bitmap from the given Picture source of recorded drawing commands.",
                "Bitmap createBitmap(int width, int height, Bitmap.Config config, boolean hasAlpha, ColorSpace colorSpace)": "Returns a mutable bitmap with the specified width and height.",
                "Bitmap createBitmap(DisplayMetrics display, int width, int height, Bitmap.Config config, boolean hasAlpha)": "Returns a mutable bitmap with the specified width and height.",
                "Bitmap createBitmap(int width, int height, Bitmap.Config config)": "Returns a mutable bitmap with the specified width and height.",
                "Bitmap createBitmap(int width, int height, Bitmap.Config config, boolean hasAlpha)": "Returns a mutable bitmap with the specified width and height.",
                "Bitmap createScaledBitmap(Bitmap src, int dstWidth, int dstHeight, boolean filter)": "Creates a new bitmap, scaled from an existing bitmap, when possible.",
                "int describeContents()": "No special parcel contents.",
                "void eraseColor(int c)": "Fills the bitmap's pixels with the specified Color.",
                "void eraseColor(long color)": "Fills the bitmap's pixels with the specified ColorLong.",
                "Bitmap extractAlpha()": "Returns a new bitmap that captures the alpha values of the original.",
                "Bitmap extractAlpha(Paint paint, int[] offsetXY)": "Returns a new bitmap that captures the alpha values of the original.",
                "int getAllocationByteCount()": "Returns the size of the allocated memory used to store this bitmap's pixels.",
                "int getByteCount()": "Returns the minimum number of bytes that can be used to store this bitmap's pixels.",
                "Color getColor(int x, int y)": "Returns the Color at the specified location.",
                "ColorSpace getColorSpace()": "Returns the color space associated with this bitmap.",
                "Bitmap.Config getConfig()": "If the bitmap's internal config is in one of the public formats, return that config, otherwise return null.",
                "int getDensity()": "Returns the density for this bitmap.",
                "Gainmap getGainmap()": "Returns the gainmap or null if the bitmap doesn't contain a gainmap",
                "int getGenerationId()": "Returns the generation ID of this bitmap.",
                "HardwareBuffer getHardwareBuffer()": "HardwareBuffer getHardwareBuffer()",
                "int getHeight()": "Returns the bitmap's height",
                "byte[] getNinePatchChunk()": "Returns an optional array of private data, used by the UI system for some bitmaps.",
                "int getPixel(int x, int y)": "Returns the Color at the specified location.",
                "void getPixels(int[] pixels, int offset, int stride, int x, int y, int width, int height)": "Returns in pixels[] a copy of the data in the bitmap.",
                "int getRowBytes()": "Return the number of bytes between rows in the bitmap's pixels.",
                "int getScaledHeight(int targetDensity)": "Convenience method that returns the height of this bitmap divided by the density scale factor.",
                "int getScaledHeight(Canvas canvas)": "Convenience for calling getScaledHeight(int) with the target density of the given Canvas.",
                "int getScaledHeight(DisplayMetrics metrics)": "Convenience for calling getScaledHeight(int) with the target density of the given DisplayMetrics.",
                "int getScaledWidth(int targetDensity)": "Convenience method that returns the width of this bitmap divided by the density scale factor.",
                "int getScaledWidth(DisplayMetrics metrics)": "Convenience for calling getScaledWidth(int) with the target density of the given DisplayMetrics.",
                "int getScaledWidth(Canvas canvas)": "Convenience for calling getScaledWidth(int) with the target density of the given Canvas.",
                "int getWidth()": "Returns the bitmap's width",
                "boolean hasAlpha()": "Returns true if the bitmap's config supports per-pixel alpha, and if the pixels may contain non-opaque alpha values.",
                "boolean hasGainmap()": "Returns whether or not this Bitmap contains a Gainmap.",
                "boolean hasMipMap()": "Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down.",
                "boolean isMutable()": "Returns true if the bitmap is marked as mutable (i.e. can be drawn into)",
                "boolean isPremultiplied()": "Indicates whether pixels stored in this bitmaps are stored pre-multiplied.",
                "boolean isRecycled()": "Returns true if this bitmap has been recycled.",
                "void prepareToDraw()": "Builds caches associated with the bitmap that are used for drawing it.",
                "void reconfigure(int width, int height, Bitmap.Config config)": "Modifies the bitmap to have a specified width, height, and Config, without affecting the underlying allocation backing the bitmap.",
                "void recycle()": "Free the native object associated with this bitmap, and clear the reference to the pixel data.",
                "boolean sameAs(Bitmap other)": "Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap.",
                "void setColorSpace(ColorSpace colorSpace)": "Modifies the bitmap to have the specified ColorSpace, without affecting the underlying allocation backing the bitmap.",
                "void setConfig(Bitmap.Config config)": "Convenience method for calling reconfigure(int, int, android.graphics.Bitmap.Config) with the current height and width.",
                "void setDensity(int density)": "Specifies the density for this bitmap.",
                "void setGainmap(Gainmap gainmap)": "Sets a gainmap on this bitmap, or removes the gainmap if null",
                "void setHasAlpha(boolean hasAlpha)": "Tell the bitmap if all of the pixels are known to be opaque (false) or if some of the pixels may contain non-opaque alpha values (true).",
                "void setHasMipMap(boolean hasMipMap)": "Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down.",
                "void setHeight(int height)": "Convenience method for calling reconfigure(int, int, android.graphics.Bitmap.Config) with the current width and config.",
                "void setPixel(int x, int y, int color)": "Write the specified Color into the bitmap (assuming it is mutable) at the x, y coordinate.",
                "void setPixels(int[] pixels, int offset, int stride, int x, int y, int width, int height)": "Replace pixels in the bitmap with the colors in the array.",
                "void setPremultiplied(boolean premultiplied)": "Sets whether the bitmap should treat its data as pre-multiplied.",
                "void setWidth(int width)": "Convenience method for calling reconfigure(int, int, android.graphics.Bitmap.Config) with the current height and config.",
                "Bitmap wrapHardwareBuffer(HardwareBuffer hardwareBuffer, ColorSpace colorSpace)": "Create a hardware bitmap backed by a HardwareBuffer.",
                "void writeToParcel(Parcel p, int flags)": "Write the bitmap and its pixels to the parcel."
            },
            "super class": []
        }
    },
    "java.util.Properties": {
        "java.util.Properties": {
            "class": "Properties",
            "category": "Class",
            "methods": {
                "String getProperty(String key)": "Searches for the property with the specified key in this property list.",
                "String getProperty(String key, String defaultValue)": "Searches for the property with the specified key in this property list.",
                "void list(PrintStream out)": "Prints this property list out to the specified output stream.",
                "void list(PrintWriter out)": "Prints this property list out to the specified output stream.",
                "void load(InputStream inStream)": "Reads a property list (key and element pairs) from the input byte stream.",
                "void load(Reader reader)": "Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format.",
                "void loadFromXML(InputStream in)": "Loads all of the properties represented by the XML document on the specified input stream into this properties table.",
                "Enumeration propertyNames()": "Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.",
                "Object setProperty(String key, String value)": "Calls the Hashtable method put.",
                "void store(OutputStream out, String comments)": "Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the load(InputStream) method.",
                "void store(Writer writer, String comments)": "Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the load(Reader) method.",
                "void storeToXML(OutputStream os, String comment)": "Emits an XML document representing all of the properties contained in this table.",
                "void storeToXML(OutputStream os, String comment, String encoding)": "Emits an XML document representing all of the properties contained in this table, using the specified encoding.",
                "Set stringPropertyNames()": "Returns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.",
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "Object clone()": "Creates a shallow copy of this hashtable.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean contains(Object value)": "Tests if some key maps into the specified value in this hashtable.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Enumeration elements()": "Returns an enumeration of the values in this dictionary.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Enumeration keys()": "Returns an enumeration of the keys in this dictionary.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map t)": "Copies all of the mappings from the specified map to this hashtable.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "void rehash()": "Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "String toString()": "Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters \", \" (comma and space).",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation)."
            },
            "super class": [
                "java.util.Hashtable",
                "java.util.Dictionary",
                "java.util.Map"
            ]
        }
    },
    "android.location.Location": {
        "android.location.Location": {
            "class": "Location",
            "category": "class",
            "methods": {
                "float bearingTo(Location dest)": "Returns the approximate initial bearing in degrees east of true north when traveling along the shortest path between this location and the given location.",
                "String convert(double coordinate, int outputType)": "Converts a latitude/longitude coordinate to a String representation.",
                "double convert(String coordinate)": "Converts a String in one of the formats described by FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS into a double.",
                "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
                "void distanceBetween(double startLatitude, double startLongitude, double endLatitude, double endLongitude, float[] results)": "Computes the approximate distance in meters between two locations, and optionally the initial and final bearings of the shortest path between them.",
                "float distanceTo(Location dest)": "Returns the approximate distance in meters between this location and the given location.",
                "void dump(Printer pw, String prefix)": "This method was deprecated in API level 33. Prefer to use toString() along with whatever custom formatting is required instead of this method. It is not this class's job to manage print representations.",
                "boolean equals(Object o)": "Location equality is provided primarily for test purposes.",
                "float getAccuracy()": "Returns the estimated horizontal accuracy radius in meters of this location at the 68th percentile confidence level.",
                "double getAltitude()": "The altitude of this location in meters above the WGS84 reference ellipsoid.",
                "float getBearing()": "Returns the bearing at the time of this location in degrees.",
                "float getBearingAccuracyDegrees()": "Returns the estimated bearing accuracy in degrees of this location at the 68th percentile confidence level.",
                "long getElapsedRealtimeAgeMillis(long referenceRealtimeMs)": "A convenience method that returns the age of this location with respect to the given reference elapsed realtime.",
                "long getElapsedRealtimeAgeMillis()": "A convenience methods that returns the age of this location in milliseconds with respect to the current elapsed realtime.",
                "long getElapsedRealtimeMillis()": "Return the time of this fix in milliseconds of elapsed realtime since system boot.",
                "long getElapsedRealtimeNanos()": "Return the time of this fix in nanoseconds of elapsed realtime since system boot.",
                "double getElapsedRealtimeUncertaintyNanos()": "Get the uncertainty in nanoseconds of the precision of getElapsedRealtimeNanos() at the 68th percentile confidence level.",
                "Bundle getExtras()": "Returns an optional bundle of additional information associated with this location.",
                "double getLatitude()": "Get the latitude in degrees.",
                "double getLongitude()": "Get the longitude in degrees.",
                "float getMslAltitudeAccuracyMeters()": "Returns the estimated Mean Sea Level altitude accuracy in meters of this location at the 68th percentile confidence level.",
                "double getMslAltitudeMeters()": "Returns the Mean Sea Level altitude of this location in meters.",
                "String getProvider()": "Returns the name of the provider associated with this location.",
                "float getSpeed()": "Returns the speed at the time of this location in meters per second.",
                "float getSpeedAccuracyMetersPerSecond()": "Returns the estimated speed accuracy in meters per second of this location at the 68th percentile confidence level.",
                "long getTime()": "Returns the Unix epoch time of this location fix, in milliseconds since the start of the Unix epoch (00:00:00 January 1, 1970 UTC).",
                "float getVerticalAccuracyMeters()": "Returns the estimated altitude accuracy in meters of this location at the 68th percentile confidence level.",
                "boolean hasAccuracy()": "Returns true if this location has a horizontal accuracy, false otherwise.",
                "boolean hasAltitude()": "Returns true if this location has an altitude, false otherwise.",
                "boolean hasBearing()": "True if this location has a bearing, false otherwise.",
                "boolean hasBearingAccuracy()": "Returns true if this location has a bearing accuracy, false otherwise.",
                "boolean hasElapsedRealtimeUncertaintyNanos()": "True if this location has an elapsed realtime uncertainty, false otherwise.",
                "boolean hasMslAltitude()": "Returns true if this location has a Mean Sea Level altitude, false otherwise.",
                "boolean hasMslAltitudeAccuracy()": "Returns true if this location has a Mean Sea Level altitude accuracy, false otherwise.",
                "boolean hasSpeed()": "True if this location has a speed, false otherwise.",
                "boolean hasSpeedAccuracy()": "Returns true if this location has a speed accuracy, false otherwise.",
                "boolean hasVerticalAccuracy()": "Returns true if this location has a vertical accuracy, false otherwise.",
                "int hashCode()": "Returns a hash code value for the object.",
                "boolean isComplete()": "Return true if this location is considered complete.",
                "boolean isFromMockProvider()": "This method was deprecated in API level 31. Prefer isMock() instead.",
                "boolean isMock()": "Returns true if this location is marked as a mock location.",
                "void removeAccuracy()": "Remove the horizontal accuracy from this location.",
                "void removeAltitude()": "Removes the altitude from this location.",
                "void removeBearing()": "Remove the bearing from this location.",
                "void removeBearingAccuracy()": "Remove the bearing accuracy from this location.",
                "void removeElapsedRealtimeUncertaintyNanos()": "Removes the elapsed realtime uncertainty from this location.",
                "void removeMslAltitude()": "Removes the Mean Sea Level altitude from this location.",
                "void removeMslAltitudeAccuracy()": "Removes the Mean Sea Level altitude accuracy from this location.",
                "void removeSpeed()": "Remove the speed from this location.",
                "void removeSpeedAccuracy()": "Remove the speed accuracy from this location.",
                "void removeVerticalAccuracy()": "Remove the vertical accuracy from this location.",
                "void reset()": "Sets the provider to null, removes all optional fields, and sets the values of all other fields to zero.",
                "void set(Location location)": "Turns this location into a copy of the given location.",
                "void setAccuracy(float horizontalAccuracyMeters)": "Set the horizontal accuracy in meters of this location.",
                "void setAltitude(double altitudeMeters)": "Set the altitude of this location in meters above the WGS84 reference ellipsoid.",
                "void setBearing(float bearingDegrees)": "Set the bearing at the time of this location, in degrees.",
                "void setBearingAccuracyDegrees(float bearingAccuracyDegrees)": "Set the bearing accuracy in degrees of this location.",
                "void setElapsedRealtimeNanos(long elapsedRealtimeNs)": "Set the time of this location in nanoseconds of elapsed realtime since system boot.",
                "void setElapsedRealtimeUncertaintyNanos(double elapsedRealtimeUncertaintyNs)": "Sets the uncertainty in nanoseconds of the precision of the elapsed realtime timestamp at a 68% confidence level.",
                "void setExtras(Bundle extras)": "Sets the extra information associated with this fix to the given Bundle.",
                "void setLatitude(double latitudeDegrees)": "Set the latitude of this location.",
                "void setLongitude(double longitudeDegrees)": "Set the longitude of this location.",
                "void setMock(boolean mock)": "Sets whether this location is marked as a mock location.",
                "void setMslAltitudeAccuracyMeters(float mslAltitudeAccuracyMeters)": "Sets the Mean Sea Level altitude accuracy of this location in meters.",
                "void setMslAltitudeMeters(double mslAltitudeMeters)": "Sets the Mean Sea Level altitude of this location in meters.",
                "void setProvider(String provider)": "Sets the name of the provider associated with this location",
                "void setSpeed(float speedMetersPerSecond)": "Set the speed at the time of this location, in meters per second.",
                "void setSpeedAccuracyMetersPerSecond(float speedAccuracyMeterPerSecond)": "Set the speed accuracy of this location in meters per second.",
                "void setTime(long timeMs)": "Sets the Unix epoch time of this location fix, in milliseconds since the start of the Unix epoch (00:00:00 January 1 1970 UTC).",
                "void setVerticalAccuracyMeters(float altitudeAccuracyMeters)": "Set the altitude accuracy of this location in meters.",
                "String toString()": "Returns a string representation of the object.",
                "void writeToParcel(Parcel parcel, int flags)": "Flatten this object in to a Parcel."
            },
            "super class": []
        }
    },
    "java.util.concurrent.atomic.AtomicReferenceArray": {
        "java.util.concurrent.atomic.AtomicReferenceArray": {
            "class": "AtomicReferenceArray",
            "category": "Class",
            "methods": {
                "E accumulateAndGet(int i, E x, BinaryOperator accumulatorFunction)": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value.",
                "boolean compareAndSet(int i, E expect, E update)": "Atomically sets the element at position i to the given updated value if the current value == the expected value.",
                "E get(int i)": "Gets the current value at position i.",
                "E getAndAccumulate(int i, E x, BinaryOperator accumulatorFunction)": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value.",
                "E getAndSet(int i, E newValue)": "Atomically sets the element at position i to the given value and returns the old value.",
                "E getAndUpdate(int i, UnaryOperator updateFunction)": "Atomically updates the element at index i with the results of applying the given function, returning the previous value.",
                "void lazySet(int i, E newValue)": "Eventually sets the element at position i to the given value.",
                "int length()": "Returns the length of the array.",
                "void set(int i, E newValue)": "Sets the element at position i to the given value.",
                "String toString()": "Returns the String representation of the current values of array.",
                "E updateAndGet(int i, UnaryOperator updateFunction)": "Atomically updates the element at index i with the results of applying the given function, returning the updated value.",
                "boolean weakCompareAndSet(int i, E expect, E update)": "Atomically sets the element at position i to the given updated value if the current value == the expected value."
            },
            "super class": []
        }
    },
    "android.util.SparseIntArray": {
        "android.util.SparseIntArray": {
            "class": "SparseIntArray",
            "category": "class",
            "methods": {
                "void append(int key, int value)": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.",
                "void clear()": "Removes all key-value mappings from this SparseIntArray.",
                "SparseIntArray clone()": "Creates and returns a copy of this object.",
                "void delete(int key)": "Removes the mapping from the specified key, if there was any.",
                "int get(int key)": "Gets the int mapped from the specified key, or 0 if no such mapping has been made.",
                "int get(int key, int valueIfKeyNotFound)": "Gets the int mapped from the specified key, or the specified value if no such mapping has been made.",
                "int indexOfKey(int key)": "Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped.",
                "int indexOfValue(int value)": "Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value.",
                "int keyAt(int index)": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseIntArray stores.",
                "void put(int key, int value)": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.",
                "void removeAt(int index)": "Removes the mapping at the given index.",
                "void setValueAt(int index, int value)": "Directly set the value at a particular index.",
                "int size()": "Returns the number of key-value mappings that this SparseIntArray currently stores.",
                "String toString()": "Returns a string representation of the object. This implementation composes a string by iterating over its mappings.",
                "int valueAt(int index)": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseIntArray stores."
            },
            "super class": []
        }
    },
    "java.sql.Wrapper": {
        "java.sql.Wrapper": {
            "class": "Wrapper",
            "category": "Interface",
            "methods": {
                "boolean isWrapperFor(Class iface)": "Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does.",
                "T unwrap(Class iface)": "Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy."
            },
            "super class": []
        }
    },
    "java.net.HttpURLConnection": {
        "java.net.HttpURLConnection": {
            "class": "HttpURLConnection",
            "category": "Class",
            "methods": {
                "void disconnect()": "Indicates that other requests to the server are unlikely in the near future.",
                "InputStream getErrorStream()": "Returns the error stream if the connection failed but the server sent useful data nonetheless.",
                "boolean getFollowRedirects()": "Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed.",
                "String getHeaderField(int n)": "Returns the value for the nth header field.",
                "long getHeaderFieldDate(String name, long Default)": "Returns the value of the named field parsed as date.",
                "String getHeaderFieldKey(int n)": "Returns the key for the nth header field.",
                "boolean getInstanceFollowRedirects()": "Returns the value of this HttpURLConnection's instanceFollowRedirects field.",
                "Permission getPermission()": "Returns a permission object representing the permission necessary to make the connection represented by this object.",
                "String getRequestMethod()": "Get the request method.",
                "int getResponseCode()": "Gets the status code from an HTTP response message.",
                "String getResponseMessage()": "Gets the HTTP response message, if any, returned along with the response code from a server.",
                "void setChunkedStreamingMode(int chunklen)": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance.",
                "void setFixedLengthStreamingMode(int contentLength)": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance.",
                "void setFixedLengthStreamingMode(long contentLength)": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance.",
                "void setFollowRedirects(boolean set)": "Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this class.",
                "void setInstanceFollowRedirects(boolean followRedirects)": "Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance.",
                "void setRequestMethod(String method)": "Set the method for the URL request, one of: GET POST HEAD OPTIONS PUT DELETE TRACE are legal, subject to protocol restrictions.",
                "boolean usingProxy()": "Indicates if the connection is going through a proxy.",
                "void addRequestProperty(String key, String value)": "Adds a general request property specified by a key-value pair.",
                "void connect()": "Opens a communications link to the resource referenced by this URL, if such a connection has not already been established.",
                "boolean getAllowUserInteraction()": "Returns the value of the allowUserInteraction field for this object.",
                "int getConnectTimeout()": "Returns setting for connect timeout.",
                "Object getContent()": "Retrieves the contents of this URL connection.",
                "Object getContent(Class[] classes)": "Retrieves the contents of this URL connection.",
                "String getContentEncoding()": "Returns the value of the content-encoding header field.",
                "int getContentLength()": "Returns the value of the content-length header field.",
                "long getContentLengthLong()": "Returns the value of the content-length header field as a long.",
                "String getContentType()": "Returns the value of the content-type header field.",
                "long getDate()": "Returns the value of the date header field.",
                "boolean getDefaultAllowUserInteraction()": "Returns the default value of the allowUserInteraction field.",
                "boolean getDefaultUseCaches()": "Returns the default value of a URLConnection's useCaches flag.",
                "boolean getDoInput()": "Returns the value of this URLConnection's doInput flag.",
                "boolean getDoOutput()": "Returns the value of this URLConnection's doOutput flag.",
                "long getExpiration()": "Returns the value of the expires header field.",
                "FileNameMap getFileNameMap()": "Loads filename map (a mimetable) from a data file.",
                "String getHeaderField(String name)": "Returns the value of the named header field.",
                "int getHeaderFieldInt(String name, int Default)": "Returns the value of the named field parsed as a number.",
                "long getHeaderFieldLong(String name, long Default)": "Returns the value of the named field parsed as a number.",
                "Map getHeaderFields()": "Returns an unmodifiable Map of the header fields.",
                "long getIfModifiedSince()": "Returns the value of this object's ifModifiedSince field.",
                "InputStream getInputStream()": "Returns an input stream that reads from this open connection.",
                "long getLastModified()": "Returns the value of the last-modified header field.",
                "OutputStream getOutputStream()": "Returns an output stream that writes to this connection.",
                "int getReadTimeout()": "Returns setting for read timeout.",
                "Map getRequestProperties()": "Returns an unmodifiable Map of general request properties for this connection.",
                "String getRequestProperty(String key)": "Returns the value of the named general request property for this connection.",
                "URL getURL()": "Returns the value of this URLConnection's URL field.",
                "boolean getUseCaches()": "Returns the value of this URLConnection's useCaches field.",
                "String guessContentTypeFromName(String fname)": "Tries to determine the content type of an object, based on the specified \"file\" component of a URL.",
                "String guessContentTypeFromStream(InputStream is)": "Tries to determine the type of an input stream based on the characters at the beginning of the input stream.",
                "void setAllowUserInteraction(boolean allowuserinteraction)": "Set the value of the allowUserInteraction field of this URLConnection.",
                "void setConnectTimeout(int timeout)": "Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection.",
                "void setContentHandlerFactory(ContentHandlerFactory fac)": "Sets the ContentHandlerFactory of an application.",
                "void setDefaultAllowUserInteraction(boolean defaultallowuserinteraction)": "Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.",
                "void setDefaultUseCaches(boolean defaultusecaches)": "Sets the default value of the useCaches field to the specified value.",
                "void setDoInput(boolean doinput)": "Sets the value of the doInput field for this URLConnection to the specified value.",
                "void setDoOutput(boolean dooutput)": "Sets the value of the doOutput field for this URLConnection to the specified value.",
                "void setFileNameMap(FileNameMap map)": "Sets the FileNameMap.",
                "void setIfModifiedSince(long ifmodifiedsince)": "Sets the value of the ifModifiedSince field of this URLConnection to the specified value.",
                "void setReadTimeout(int timeout)": "Sets the read timeout to a specified timeout, in milliseconds.",
                "void setRequestProperty(String key, String value)": "Sets the general request property.",
                "void setUseCaches(boolean usecaches)": "Sets the value of the useCaches field of this URLConnection to the specified value.",
                "String toString()": "Returns a String representation of this URL connection."
            },
            "super class": [
                "java.net.URLConnection"
            ]
        }
    },
    "java.awt.Image": {
        "java.awt.Image": {
            "class": "Image",
            "category": "Class",
            "methods": {
                "void flush()": "Flushes all reconstructable resources being used by this Image object.",
                "float getAccelerationPriority()": "Returns the current value of the acceleration priority hint.",
                "ImageCapabilities getCapabilities(GraphicsConfiguration gc)": "Returns an ImageCapabilities object which can be inquired as to the capabilities of this Image on the specified GraphicsConfiguration.",
                "Graphics getGraphics()": "Creates a graphics context for drawing to an off-screen image.",
                "int getHeight(ImageObserver observer)": "Determines the height of the image.",
                "Object getProperty(String name, ImageObserver observer)": "Gets a property of this image by name.",
                "Image getScaledInstance(int width, int height, int hints)": "Creates a scaled version of this image.",
                "ImageProducer getSource()": "Gets the object that produces the pixels for the image.",
                "int getWidth(ImageObserver observer)": "Determines the width of the image.",
                "void setAccelerationPriority(float priority)": "Sets a hint for this image about how important acceleration is."
            },
            "super class": []
        }
    },
    "java.util.LinkedHashMap": {
        "java.util.LinkedHashMap": {
            "class": "LinkedHashMap",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "boolean removeEldestEntry(Map.Entry eldest)": "Returns true if this map should remove its eldest entry.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "Object clone()": "Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "int hashCode()": "Returns the hash code value for this map.",
                "String toString()": "Returns a string representation of this map."
            },
            "super class": [
                "java.util.HashMap",
                "java.util.AbstractMap",
                "java.util.Map"
            ]
        }
    },
    "net.sf.json.JSONObject": {
        "net.sf.json.JSONObject": {
            "class": "JSONObject",
            "category": "Class",
            "methods": {
                "Object _processValue(Object value, JsonConfig jsonConfig)": "Processes the given value using the specified JsonConfig.",
                "JSONObject accumulate(String key, boolean value)": "Accumulates boolean values under a key.",
                "JSONObject accumulate(String key, double value)": "Accumulates double values under a key.",
                "JSONObject accumulate(String key, int value)": "Accumulates integer values under a key.",
                "JSONObject accumulate(String key, long value)": "Accumulates long values under a key.",
                "JSONObject accumulate(String key, Object value)": "Accumulates values under a key.",
                "JSONObject accumulate(String key, Object value, JsonConfig jsonConfig)": "Accumulates values under a key using the specified JsonConfig.",
                "void accumulateAll(Map map)": "Accumulates all values from the given map.",
                "void accumulateAll(Map map, JsonConfig jsonConfig)": "Accumulates all values from the given map using the specified JsonConfig.",
                "boolean addInstance(Object instance)": "Adds a reference for cycle detection check.",
                "void clear()": "Removes all name/value mappings from the JSONObject.",
                "int compareTo(Object obj)": "Compares this JSONObject with the specified object for order.",
                "boolean containsKey(Object key)": "Returns true if this JSONObject contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this JSONObject contains a mapping for the specified value.",
                "boolean containsValue(Object value, JsonConfig jsonConfig)": "Returns true if this JSONObject contains a mapping for the specified value using the specified JsonConfig.",
                "JSONObject discard(String key)": "Removes the mapping for the specified key and its corresponding value from this JSONObject.",
                "JSONObject element(String key, boolean value)": "Puts a key/boolean pair in the JSONObject.",
                "JSONObject element(String key, Collection value)": "Puts a key/value pair in the JSONObject, where the value will be a JSONArray which is produced from a Collection.",
                "JSONObject element(String key, Collection value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject, where the value will be a JSONArray which is produced from a Collection using the specified JsonConfig.",
                "JSONObject element(String key, double value)": "Puts a key/double pair in the JSONObject.",
                "JSONObject element(String key, int value)": "Puts a key/int pair in the JSONObject.",
                "JSONObject element(String key, long value)": "Puts a key/long pair in the JSONObject.",
                "JSONObject element(String key, Map value)": "Puts a key/value pair in the JSONObject, where the value will be a JSONObject which is produced from a Map.",
                "JSONObject element(String key, Map value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject, where the value will be a JSONObject which is produced from a Map using the specified JsonConfig.",
                "JSONObject element(String key, Object value)": "Puts a key/value pair in the JSONObject.",
                "JSONObject element(String key, Object value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject using the specified JsonConfig.",
                "JSONObject elementOpt(String key, Object value)": "Puts a key/value pair in the JSONObject, but only if the key and the value are both non-null.",
                "JSONObject elementOpt(String key, Object value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject, but only if the key and the value are both non-null using the specified JsonConfig.",
                "Set entrySet()": "Returns a set view of the mappings contained in this JSONObject.",
                "boolean equals(Object obj)": "Compares this JSONObject with the specified object for equality.",
                "void fireArrayEndEvent(JsonConfig jsonConfig)": "Fires an end of array event.",
                "void fireArrayStartEvent(JsonConfig jsonConfig)": "Fires a start of array event.",
                "void fireElementAddedEvent(int index, Object element, JsonConfig jsonConfig)": "Fires an element added event.",
                "void fireErrorEvent(JSONException jsone, JsonConfig jsonConfig)": "Fires an error event.",
                "void fireObjectEndEvent(JsonConfig jsonConfig)": "Fires an end of object event.",
                "void fireObjectStartEvent(JsonConfig jsonConfig)": "Fires a start of object event.",
                "void firePropertySetEvent(String key, Object value, boolean accumulated, JsonConfig jsonConfig)": "Fires a property set event.",
                "void fireWarnEvent(String warning, JsonConfig jsonConfig)": "Fires a warning event.",
                "JSONObject fromObject(Object object)": "Creates a JSONObject by inspecting the object type.",
                "Object get(Object key)": "",
                "Object get(String key)": "Gets the value object associated with a key.",
                "boolean getBoolean(String key)": "Gets the boolean value associated with a key.",
                "double getDouble(String key)": "Gets the double value associated with a key.",
                "int getInt(String key)": "Gets the int value associated with a key.",
                "JSONArray getJSONArray(String key)": "Gets the JSONArray value associated with a key.",
                "JSONObject getJSONObject(String key)": "Gets the JSONObject value associated with a key.",
                "String getString(String key)": "Gets the string associated with a key.",
                "boolean has(String key)": "Determines if the JSONObject contains a specific key.",
                "boolean isArray()": "Returns true if this object is a JSONArray, false otherwise.",
                "boolean isEmpty()": "Returns true if this object has no elements or keys.",
                "Object opt(String key)": "Gets an optional value associated with a key.",
                "boolean optBoolean(String key)": "Gets an optional boolean associated with a key.",
                "double optDouble(String key)": "Gets an optional double associated with a key, or NaN if there is no such key or if its value is not a number.",
                "int optInt(String key)": "Gets an optional int value associated with a key, or zero if there is no such key or if the value is not a number.",
                "JSONArray optJSONArray(String key)": "Gets an optional JSONArray associated with a key.",
                "JSONObject optJSONObject(String key)": "Gets an optional JSONObject associated with a key.",
                "long optLong(String key)": "Gets an optional long value associated with a key, or zero if there is no such key or if the value is not a number.",
                "long optLong(String key, long defaultValue)": "Gets an optional long value associated with a key, or the default if there is no such key or if the value is not a number.",
                "String optString(String key)": "Gets an optional string associated with a key.",
                "String optString(String key, String defaultValue)": "Gets an optional string associated with a key, or the default if there is no such key.",
                "Object put(Object key, Object value)": "Adds a key-value pair to the JSONObject.",
                "void putAll(Map map)": "Adds all key-value pairs from a Map to the JSONObject.",
                "Object remove(Object key) or remove(String key)": "Removes a key-value pair from the JSONObject.",
                "int size()": "Gets the number of keys stored in the JSONObject.",
                "JSONArray toJSONArray(JSONArray names)": "Produces a JSONArray containing the values of the members of this JSONObject.",
                "String toString()": "Makes a JSON text of this JSONObject.",
                "String toString(int indentFactor)": "Makes a prettyprinted JSON text of this JSONObject with the specified indentation factor.",
                "String toString(int indentFactor, int indent)": "Makes a prettyprinted JSON text of this JSONObject with the specified indentation factor and indentation level.",
                "Writer write(Writer writer)": "Writes the contents of the JSONObject as JSON text to a writer.",
                "Object toBean(JSONObject jsonObject)": "Creates a JSONDynaBean from a JSONObject.",
                "Object toBean(JSONObject jsonObject, Class beanClass)": "Creates a bean from a JSONObject with a specific target class.",
                "Object toBean(JSONObject jsonObject, Class beanClass, Map classMap)": "Creates a bean from a JSONObject with a specific target class and class map.",
                "Object toBean(JSONObject jsonObject, JsonConfig jsonConfig)": "Creates a bean from a JSONObject with a specific configuration.",
                "Object toBean(JSONObject jsonObject, Object root, JsonConfig jsonConfig)": "Creates a bean from a JSONObject with a specific configuration and root object."
            },
            "super class": []
        }
    },
    "java.util.Vector": {
        "java.util.Vector": {
            "class": "Vector",
            "category": "Class",
            "methods": {
                "boolean add(E e)": "Appends the specified element to the end of this list (optional operation).",
                "void add(int index, E element)": "Inserts the specified element at the specified position in this list (optional operation).",
                "boolean addAll(Collection c)": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).",
                "boolean addAll(int index, Collection c)": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).",
                "void addElement(E obj)": "Adds the specified component to the end of this vector, increasing its size by one.",
                "int capacity()": "Returns the current capacity of this vector.",
                "void clear()": "Removes all of the elements from this list (optional operation).",
                "Object clone()": "Returns a clone of this vector.",
                "boolean contains(Object o)": "Returns true if this list contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this list contains all of the elements of the specified collection.",
                "void copyInto(Object[] anArray)": "Copies the components of this vector into the specified array.",
                "E elementAt(int index)": "Returns the component at the specified index.",
                "Enumeration elements()": "Returns an enumeration of the components of this vector.",
                "void ensureCapacity(int minCapacity)": "Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.",
                "boolean equals(Object o)": "Compares the specified object with this list for equality.",
                "E firstElement()": "Returns the first component (the item at index 0) of this vector.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.",
                "E get(int index)": "Returns the element at the specified position in this list.",
                "int hashCode()": "Returns the hash code value for this list.",
                "int indexOf(Object o)": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "int indexOf(Object o, int index)": "Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found.",
                "void insertElementAt(E obj, int index)": "Inserts the specified object as a component in this vector at the specified index.",
                "boolean isEmpty()": "Returns true if this list contains no elements.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "E lastElement()": "Returns the last component of the vector.",
                "int lastIndexOf(Object o)": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
                "int lastIndexOf(Object o, int index)": "Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found.",
                "ListIterator listIterator()": "Returns a list iterator over the elements in this list (in proper sequence).",
                "ListIterator listIterator(int index)": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.",
                "E remove(int index)": "Removes the element at the specified position in this list (optional operation).",
                "boolean remove(Object o)": "Removes the first occurrence of the specified element from this list, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
                "void removeAllElements()": "Removes all components from this vector and sets its size to zero.",
                "boolean removeElement(Object obj)": "Removes the first (lowest-indexed) occurrence of the argument from this vector.",
                "void removeElementAt(int index)": "Deletes the component at the specified index.",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "void removeRange(int fromIndex, int toIndex)": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
                "void replaceAll(UnaryOperator operator)": "Replaces each element of this list with the result of applying the operator to that element.",
                "boolean retainAll(Collection c)": "Retains only the elements in this list that are contained in the specified collection (optional operation).",
                "E set(int index, E element)": "Replaces the element at the specified position in this list with the specified element (optional operation).",
                "void setElementAt(E obj, int index)": "Sets the component at the specified index of this vector to be the specified object.",
                "void setSize(int newSize)": "Sets the size of this vector.",
                "int size()": "Returns the number of elements in this list.",
                "void sort(Comparator c)": "Sorts this list according to the order induced by the specified Comparator.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "List subList(int fromIndex, int toIndex)": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
                "Object[] toArray()": "Returns an array containing all of the elements in this list in proper sequence (from first to last element).",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                "String toString()": "Returns a string representation of this collection.",
                "void trimToSize()": "Trims the capacity of this vector to be the vector's current size.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source."
            },
            "super class": [
                "java.util.AbstractList",
                "java.util.AbstractCollection",
                "java.util.Collection",
                "java.util.List",
                "java.lang.Iterable"
            ]
        }
    },
    "net.minecraft.nbt.NBTBase": {
        "net.minecraft.nbt.NBTBase": {
            "class": "NBTBase",
            "category": "Class",
            "methods": {
                "NBTBase copy()": "",
                "NBTBase createNewByType(byte id)": "",
                "boolean equals(java.lang.Object p_equals_1_)": "",
                "byte getId()": "",
                "java.lang.String getString()": "",
                "int hashCode()": "",
                "boolean hasNoTags()": "",
                "java.lang.String toString()": ""
            },
            "super class": []
        }
    },
    "gnu.trove.TPrimitiveHash": {
        "gnu.trove.TPrimitiveHash": {
            "class": "TPrimitiveHash",
            "category": "Class",
            "methods": {
                "int capacity()": "Returns the capacity of the hash table.",
                "java.lang.Object clone()": "",
                "void removeAt(int index)": "Delete the record at index.",
                "int setUp(int initialCapacity)": "Initializes the hashtable to a prime capacity which is at least initialCapacity + 1.",
                "int calculateGrownCapacity()": "",
                "abstract int capacity()": "",
                "void clear()": "Empties the collection.",
                "void compact()": "Compresses the hashtable to the minimum prime size (as defined by PrimeFinder) that will hold all of the elements currently in the table.",
                "void ensureCapacity(int desiredCapacity)": "Ensure that this hashtable has sufficient capacity to hold desiredCapacity additional elements without requiring a rehash.",
                "float getAutoCompactionFactor()": "",
                "boolean isEmpty()": "Tells whether this set is currently holding any elements.",
                "void postInsertHook(boolean usedFreeSlot)": "After an insert, this hook is called to adjust the size/free values of the set and to perform rehashing if necessary.",
                "void reenableAutoCompaction(boolean check_for_compaction)": "Re-enable auto-compaction after it was disabled via tempDisableAutoCompaction().",
                "abstract void rehash(int newCapacity)": "Rehashes the set.",
                "void setAutoCompactionFactor(float factor)": "The auto-compaction factor controls whether and when a table performs a compact() automatically after a certain number of remove operations.",
                "int size()": "Returns the number of distinct elements in this collection.",
                "void tempDisableAutoCompaction()": "Temporarily disables auto-compaction.",
                "void trimToSize()": "This simply calls compact."
            },
            "super class": [
                "gnu.trove.THash"
            ]
        }
    },
    "java.util.SortedMap": {
        "java.util.SortedMap": {
            "class": "SortedMap",
            "category": "Interface",
            "methods": {
                "Comparator comparator()": "Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "K firstKey()": "Returns the first (lowest) key currently in this map.",
                "SortedMap headMap(K toKey)": "Returns a view of the portion of this map whose keys are strictly less than toKey.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "K lastKey()": "Returns the last (highest) key currently in this map.",
                "SortedMap subMap(K fromKey, K toKey)": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.",
                "SortedMap tailMap(K fromKey)": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "int size()": "Returns the number of key-value mappings in this map."
            },
            "super class": [
                "java.util.Map"
            ]
        }
    },
    "org.vertx.java.core.json.JsonObject": {
        "org.vertx.java.core.json.JsonObject": {
            "class": "JsonObject",
            "category": "Class",
            "methods": {
                "JsonObject clear()": "Remove all the entries in this JSON object",
                "boolean containsKey(String key)": "Does the JSON object contain the specified key?",
                "JsonObject copy()": "Deep copy of this JSON object.",
                "JsonObject copy(java.util.function.Function cloner)": "Deep copy of this JSON object.",
                "String encode()": "Encode this JSON object as a string.",
                "String encodePrettily()": "Encode this JSON object a a string, with whitespace to make the object easier to read by a human, or other sentient organism.",
                "boolean equals(Object o)": "",
                "Set fieldNames()": "Return the set of field names in the JSON objects",
                "byte[] getBinary(String key)": "Get the binary value with the specified key.",
                "byte[] getBinary(String key, byte[] def)": "Like getBinary(String) but specifying a default value to return if there is no entry.",
                "Boolean getBoolean(String key)": "Get the Boolean value with the specified key",
                "Boolean getBoolean(String key, Boolean def)": "Like getBoolean(String) but specifying a default value to return if there is no entry.",
                "Buffer getBuffer(String key)": "Get the Buffer value with the specified key.",
                "Buffer getBuffer(String key, Buffer def)": "Like getBuffer(String) but specifying a default value to return if there is no entry.",
                "Double getDouble(String key)": "Get the Double value with the specified key",
                "Double getDouble(String key, Double def)": "Like getDouble(String) but specifying a default value to return if there is no entry.",
                "Float getFloat(String key)": "Get the Float value with the specified key",
                "Float getFloat(String key, Float def)": "Like getFloat(String) but specifying a default value to return if there is no entry.",
                "java.time.Instant getInstant(String key)": "Get the instant value with the specified key.",
                "java.time.Instant getInstant(String key, java.time.Instant def)": "Like getInstant(String) but specifying a default value to return if there is no entry.",
                "Integer getInteger(String key)": "Get the Integer value with the specified key",
                "Integer getInteger(String key, Integer def)": "Like getInteger(String) but specifying a default value to return if there is no entry.",
                "JsonArray getJsonArray(String key)": "Get the JsonArray value with the specified key",
                "JsonArray getJsonArray(String key, JsonArray def)": "Like getJsonArray(String) but specifying a default value to return if there is no entry.",
                "JsonObject getJsonObject(String key)": "Get the JsonObject value with the specified key",
                "JsonObject getJsonObject(String key, JsonObject def)": "Like getJsonObject(String) but specifying a default value to return if there is no entry.",
                "Long getLong(String key)": "Get the Long value with the specified key",
                "Long getLong(String key, Long def)": "Like getLong(String) but specifying a default value to return if there is no entry.",
                "Map getMap()": "Get the underlying Map as is.",
                "Number getNumber(String key)": "Get the Number value with the specified key",
                "Number getNumber(String key, Number def)": "Like getNumber(String) but specifying a default value to return if there is no entry.",
                "String getString(String key)": "Get the string value with the specified key, special cases are addressed for extended JSON types Instant, byte[] and Enum which can be converted to String.",
                "String getString(String key, String def)": "Like getString(String) but specifying a default value to return if there is no entry.",
                "Object getValue(String key)": "Get the value with the specified key, as an Object with types respecting the limitations of JSON.",
                "Object getValue(String key, Object def)": "Like getValue(String) but specifying a default value to return if there is no entry.",
                "int hashCode()": "",
                "boolean isEmpty()": "Is this object entry?",
                "Iterator iterator()": "Get an Iterator of the entries in the JSON object.",
                "JsonObject mapFrom(Object obj)": "Create a JsonObject from the fields of a Java object.",
                "T mapTo(Class type)": "Instantiate a Java object from a JsonObject.",
                "JsonObject mergeIn(JsonObject other)": "Merge in another JSON object.",
                "JsonObject mergeIn(JsonObject other, boolean deep)": "Merge in another JSON object.",
                "JsonObject mergeIn(JsonObject other, int depth)": "Merge in another JSON object.",
                "JsonObject of()": "Create a JsonObject containing zero mappings.",
                "JsonObject of(String k1, Object v1)": "Create a JsonObject containing a single mapping.",
                "JsonObject of(String k1, Object v1, String k2, Object v2)": "Create a JsonObject containing two mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3)": "Create a JsonObject containing three mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4)": "Create a JsonObject containing four mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4, String k5, Object v5)": "Create a JsonObject containing five mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4, String k5, Object v5, String k6, Object v6)": "Create a JsonObject containing six mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4, String k5, Object v5, String k6, Object v6, String k7, Object v7)": "Create a JsonObject containing seven mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4, String k5, Object v5, String k6, Object v6, String k7, Object v7, String k8, Object v8)": "Create a JsonObject containing eight mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4, String k5, Object v5, String k6, Object v6, String k7, Object v7, String k8, Object v8, String k9, Object v9)": "Create a JsonObject containing nine mappings.",
                "JsonObject of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4, String k5, Object v5, String k6, Object v6, String k7, Object v7, String k8, Object v8, String k9, Object v9, String k10, Object v10)": "Create a JsonObject containing ten mappings.",
                "JsonObject put(String key, Object value)": "Put an Object into the JSON object with the specified key.",
                "JsonObject putNull(String key)": "Put a null value into the JSON object with the specified key.",
                "int readFromBuffer(int pos, Buffer buffer)": "Method invoked when deserializing bytes to this instance.",
                "Object remove(String key)": "Remove an entry from this object.",
                "int size()": "Get the number of entries in the JSON object",
                "java.util.stream.Stream stream()": "Get a Stream over the entries in the JSON object.",
                "Buffer toBuffer()": "Encode this JSON object as buffer.",
                "String toString()": "",
                "void writeToBuffer(Buffer buffer)": "Method invoked when serializing this instance."
            },
            "super class": []
        }
    },
    "com.jgoodies.forms.layout.CellConstraints": {
        "com.jgoodies.forms.layout.CellConstraints": {
            "class": "CellConstraints",
            "category": "Class",
            "methods": {
                "Object clone()": "Creates a copy of this cell constraints object.",
                "CellConstraints rc(int row, int col)": "Sets row and column origins; sets height and width to 1; uses the default alignments.",
                "CellConstraints rc(int row, int col, CellConstraints.Alignment rowAlign, CellConstraints.Alignment colAlign)": "Sets the row and column origins; sets width and height to 1; set horizontal and vertical alignment using the specified objects.",
                "CellConstraints rc(int row, int col, String encodedAlignments)": "Sets row and column origins; sets height and width to 1; decodes vertical and horizontal alignments from the given string.",
                "CellConstraints rchw(int row, int col, int rowSpan, int colSpan)": "Sets the row, column, height, and width; uses default alignments.",
                "CellConstraints rchw(int row, int col, int rowSpan, int colSpan, CellConstraints.Alignment rowAlign, CellConstraints.Alignment colAlign)": "Sets the row, column, height, and width; sets the vertical and horizontal alignment using the specified alignment objects.",
                "CellConstraints rchw(int row, int col, int rowSpan, int colSpan, String encodedAlignments)": "Sets the row, column, height, and width; decodes the vertical and horizontal alignments from the given string.",
                "CellConstraints rcw(int row, int col, int colSpan)": "Sets the row, column, height, and width; uses a height (row span) of 1 and the vertical and horizontal default alignments.",
                "CellConstraints rcw(int row, int col, int colSpan, CellConstraints.Alignment rowAlign, CellConstraints.Alignment colAlign)": "Sets the row, column, height, and width; sets the vertical and horizontal alignment using the specified alignment objects.",
                "CellConstraints rcw(int row, int col, int colSpan, String encodedAlignments)": "Sets the row, column, height, and width; decodes the vertical and horizontal alignments from the given string.",
                "String toShortString()": "Returns a short string representation of this constraints object.",
                "String toShortString(FormLayout layout)": "Returns a short string representation of this constraints object.",
                "String toString()": "Constructs and returns a string representation of this constraints object.",
                "CellConstraints translate(int dx, int dy)": "Creates and returns a new CellConstraints instance where the origin has been moved along the X and Y axis as specified by dx and dy respectively.",
                "CellConstraints xy(int col, int row)": "Sets column and row origins; sets width and height to 1; uses the default alignments.",
                "CellConstraints xy(int col, int row, CellConstraints.Alignment colAlign, CellConstraints.Alignment rowAlign)": "Sets the column and row origins; sets width and height to 1; set horizontal and vertical alignment using the specified objects.",
                "CellConstraints xy(int col, int row, String encodedAlignments)": "Sets column and row origins; sets width and height to 1; decodes horizontal and vertical alignments from the given string.",
                "CellConstraints xyw(int col, int row, int colSpan)": "Sets the column, row, width, and height; uses a height (row span) of 1 and the horizontal and vertical default alignments.",
                "CellConstraints xyw(int col, int row, int colSpan, CellConstraints.Alignment colAlign, CellConstraints.Alignment rowAlign)": "Sets the column, row, width, and height; sets the horizontal and vertical alignment using the specified alignment objects.",
                "CellConstraints xyw(int col, int row, int colSpan, String encodedAlignments)": "Sets the column, row, width, and height; decodes the horizontal and vertical alignments from the given string.",
                "CellConstraints xywh(int col, int row, int colSpan, int rowSpan)": "Sets the column, row, width, and height; uses default alignments.",
                "CellConstraints xywh(int col, int row, int colSpan, int rowSpan, CellConstraints.Alignment colAlign, CellConstraints.Alignment rowAlign)": "Sets the column, row, width, and height; sets the horizontal and vertical alignment using the specified alignment objects.",
                "CellConstraints xywh(int col, int row, int colSpan, int rowSpan, String encodedAlignments)": "Sets the column, row, width, and height; decodes the horizontal and vertical alignments from the given string."
            },
            "super class": []
        }
    },
    "org.w3c.dom.Element": {
        "org.w3c.dom.Element": {
            "class": "Element",
            "category": "Interface",
            "methods": {
                "String getAttribute(String name)": "Retrieves an attribute value by name.",
                "Attr getAttributeNode(String name)": "Retrieves an attribute node by name.",
                "Attr getAttributeNodeNS(String namespaceURI, String localName)": "Retrieves an Attr node by local name and namespace URI.",
                "String getAttributeNS(String namespaceURI, String localName)": "Retrieves an attribute value by local name and namespace URI.",
                "NodeList getElementsByTagName(String name)": "Returns a NodeList of all descendant Elements with a given tag name, in document order.",
                "NodeList getElementsByTagNameNS(String namespaceURI, String localName)": "Returns a NodeList of all the descendant Elements with a given local name and namespace URI in document order.",
                "TypeInfo getSchemaTypeInfo()": "The type information associated with this element.",
                "String getTagName()": "The name of the element.",
                "boolean hasAttribute(String name)": "Returns true when an attribute with a given name is specified on this element or has a default value, false otherwise.",
                "boolean hasAttributeNS(String namespaceURI, String localName)": "Returns true when an attribute with a given local name and namespace URI is specified on this element or has a default value, false otherwise.",
                "void removeAttribute(String name)": "Removes an attribute by name.",
                "Attr removeAttributeNode(Attr oldAttr)": "Removes the specified attribute node.",
                "void removeAttributeNS(String namespaceURI, String localName)": "Removes an attribute by local name and namespace URI.",
                "void setAttribute(String name, String value)": "Adds a new attribute.",
                "Attr setAttributeNode(Attr newAttr)": "Adds a new attribute node.",
                "Attr setAttributeNodeNS(Attr newAttr)": "Adds a new attribute.",
                "void setAttributeNS(String namespaceURI, String qualifiedName, String value)": "Adds a new attribute.",
                "void setIdAttribute(String name, boolean isId)": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute .",
                "void setIdAttributeNode(Attr idAttr, boolean isId)": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute .",
                "void setIdAttributeNS(String namespaceURI, String localName, boolean isId)": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute .",
                "Node appendChild(Node newChild)": "Adds the node newChild to the end of the list of children of this node.",
                "Node cloneNode(boolean deep)": "Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.",
                "short compareDocumentPosition(Node other)": "Compares the reference node, i.e.",
                "NamedNodeMap getAttributes()": "A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.",
                "String getBaseURI()": "The absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI.",
                "NodeList getChildNodes()": "A NodeList that contains all children of this node.",
                "Object getFeature(String feature, String version)": "This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in .",
                "Node getFirstChild()": "The first child of this node.",
                "Node getLastChild()": "The last child of this node.",
                "String getLocalName()": "Returns the local part of the qualified name of this node.",
                "String getNamespaceURI()": "The namespace URI of this node, or null if it is unspecified (see ).",
                "Node getNextSibling()": "The node immediately following this node.",
                "String getNodeName()": "The name of this node, depending on its type; see the table above.",
                "short getNodeType()": "A code representing the type of the underlying object, as defined above.",
                "String getNodeValue()": "The value of this node, depending on its type; see the table above.",
                "Document getOwnerDocument()": "The Document object associated with this node.",
                "Node getParentNode()": "The parent of this node.",
                "String getPrefix()": "The namespace prefix of this node, or null if it is unspecified.",
                "Node getPreviousSibling()": "The node immediately preceding this node.",
                "String getTextContent()": "This attribute returns the text content of this node and its descendants.",
                "Object getUserData(String key)": "Retrieves the object associated to a key on a this node.",
                "boolean hasAttributes()": "Returns whether this node (if it is an element) has any attributes.",
                "boolean hasChildNodes()": "Returns whether this node has any children.",
                "Node insertBefore(Node newChild, Node refChild)": "Inserts the node newChild before the existing child node refChild.",
                "boolean isDefaultNamespace(String namespaceURI)": "This method checks if the specified namespaceURI is the default namespace or not.",
                "boolean isEqualNode(Node arg)": "Tests whether two nodes are equal.",
                "boolean isSameNode(Node other)": "Returns whether this node is the same node as the given one.",
                "boolean isSupported(String feature, String version)": "Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in .",
                "String lookupNamespaceURI(String prefix)": "Look up the namespace URI associated to the given prefix, starting from this node.",
                "String lookupPrefix(String namespaceURI)": "Look up the prefix associated to the given namespace URI, starting from this node.",
                "void normalize()": "Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes.",
                "Node removeChild(Node oldChild)": "Removes the child node indicated by oldChild from the list of children, and returns it.",
                "Node replaceChild(Node newChild, Node oldChild)": "Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node.",
                "void setNodeValue(String nodeValue)": "The value of this node, depending on its type; see the table above.",
                "void setPrefix(String prefix)": "The namespace prefix of this node, or null if it is unspecified.",
                "void setTextContent(String textContent)": "This attribute returns the text content of this node and its descendants.",
                "Object setUserData(String key, Object data, UserDataHandler handler)": "Associate an object to a key on this node."
            },
            "super class": [
                "org.w3c.dom.Node"
            ]
        }
    },
    "java.util.concurrent.ConcurrentHashMap": {
        "java.util.concurrent.ConcurrentHashMap": {
            "class": "ConcurrentHashMap",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.",
                "boolean contains(Object value)": "Legacy method testing if some key maps into the specified value in this table.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Enumeration elements()": "Returns an enumeration of the values in this table.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "void forEach(long parallelismThreshold, BiConsumer action)": "Performs the given action for each (key, value).",
                "void forEach(long parallelismThreshold, BiFunction transformer, Consumer action)": "Performs the given action for each non-null transformation of each (key, value).",
                "void forEachEntry(long parallelismThreshold, Consumer action)": "Performs the given action for each entry.",
                "void forEachEntry(long parallelismThreshold, Function, ? extends U transformer, Consumer action)": "Performs the given action for each non-null transformation of each entry.",
                "void forEachKey(long parallelismThreshold, Consumer action)": "Performs the given action for each key.",
                "void forEachKey(long parallelismThreshold, Function transformer, Consumer action)": "Performs the given action for each non-null transformation of each key.",
                "void forEachValue(long parallelismThreshold, Consumer action)": "Performs the given action for each value.",
                "void forEachValue(long parallelismThreshold, Function transformer, Consumer action)": "Performs the given action for each non-null transformation of each value.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Enumeration keys()": "Returns an enumeration of the keys in this table.",
                "ConcurrentHashMap.KeySetView keySet()": "Returns a Set view of the keys contained in this map.",
                "ConcurrentHashMap.KeySetView keySet(V mappedValue)": "Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)).",
                "long mappingCount()": "Returns the number of mappings.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a (non-null) value, associates it with the given value.",
                "ConcurrentHashMap.KeySetView newKeySet()": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
                "ConcurrentHashMap.KeySetView newKeySet(int initialCapacity)": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value, associate it with the given value.",
                "U reduce(long parallelismThreshold, BiFunction transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.",
                "Map.Entry reduceEntries(long parallelismThreshold, BiFunction, Map.Entry, ? extends Map.Entry reducer)": "Returns the result of accumulating all entries using the given reducer to combine values, or null if none.",
                "U reduceEntries(long parallelismThreshold, Function, ? extends U transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.",
                "double reduceEntriesToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
                "int reduceEntriesToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
                "long reduceEntriesToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
                "K reduceKeys(long parallelismThreshold, BiFunction reducer)": "Returns the result of accumulating all keys using the given reducer to combine values, or null if none.",
                "U reduceKeys(long parallelismThreshold, Function transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.",
                "double reduceKeysToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
                "int reduceKeysToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
                "long reduceKeysToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
                "double reduceToDouble(long parallelismThreshold, ToDoubleBiFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
                "int reduceToInt(long parallelismThreshold, ToIntBiFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
                "long reduceToLong(long parallelismThreshold, ToLongBiFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
                "V reduceValues(long parallelismThreshold, BiFunction reducer)": "Returns the result of accumulating all values using the given reducer to combine values, or null if none.",
                "U reduceValues(long parallelismThreshold, Function transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.",
                "double reduceValuesToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
                "int reduceValuesToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
                "long reduceValuesToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "boolean remove(Object key, Object value)": "Removes the entry for a key only if currently mapped to a given value.",
                "V replace(K key, V value)": "Replaces the entry for a key only if currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for a key only if currently mapped to a given value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
                "U search(long parallelismThreshold, BiFunction searchFunction)": "Returns a non-null result from applying the given search function on each (key, value), or null if none.",
                "U searchEntries(long parallelismThreshold, Function, ? extends U searchFunction)": "Returns a non-null result from applying the given search function on each entry, or null if none.",
                "U searchKeys(long parallelismThreshold, Function searchFunction)": "Returns a non-null result from applying the given search function on each key, or null if none.",
                "U searchValues(long parallelismThreshold, Function searchFunction)": "Returns a non-null result from applying the given search function on each value, or null if none.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "String toString()": "Returns a string representation of this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "Object clone()": "Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.",
                "Set keySet()": "Returns a Set view of the keys contained in this map."
            },
            "super class": [
                "java.util.AbstractMap"
            ]
        }
    },
    "java.util.AbstractMap": {
        "java.util.AbstractMap": {
            "class": "AbstractMap",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map (optional operation).",
                "Object clone()": "Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.",
                "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
                "boolean equals(Object o)": "Compares the specified object with this map for equality.",
                "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "Set keySet()": "Returns a Set view of the keys contained in this map.",
                "V put(K key, V value)": "Associates the specified value with the specified key in this map (optional operation).",
                "void putAll(Map m)": "Copies all of the mappings from the specified map to this map (optional operation).",
                "V remove(Object key)": "Removes the mapping for a key from this map if it is present (optional operation).",
                "int size()": "Returns the number of key-value mappings in this map.",
                "String toString()": "Returns a string representation of this map.",
                "Collection values()": "Returns a Collection view of the values contained in this map.",
                "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
                "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
                "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
                "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
                "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
                "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.",
                "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
                "boolean remove(Object key, Object value)": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
                "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
                "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
                "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception."
            },
            "super class": [
                "java.util.Map"
            ]
        }
    },
    "com.alibaba.fastjson.JSONObject": {
        "com.alibaba.fastjson.JSONObject": {
            "class": "JSONPObject",
            "category": "Class",
            "methods": {
                "void addParameter(Object parameter)": "",
                "String getFunction()": "",
                "List getParameters()": "",
                "void setFunction(String function)": "",
                "String toJSONString()": "",
                "String toString()": "",
                "void write(JSONSerializer serializer, Object fieldName, Type fieldType, int features)": "write to json"
            },
            "super class": []
        }
    },
    "java.util.Iterator": {
        "java.util.Iterator": {
            "class": "Iterator",
            "category": "Interface",
            "methods": {
                "void forEachRemaining(Consumer action)": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception.",
                "boolean hasNext()": "Returns true if the iteration has more elements.",
                "E next()": "Returns the next element in the iteration.",
                "void remove()": "Removes from the underlying collection the last element returned by this iterator (optional operation)."
            },
            "super class": []
        }
    },
    "gnu.trove.map.TIntObjectMap": {
        "gnu.trove.map.TIntObjectMap": {
            "class": "TIntObjectMap",
            "category": "Class",
            "methods": {
                "void clear()": "Removes all of the mappings from this map.",
                "boolean containsKey(int key)": "Returns true if this map contains a mapping for the specified key.",
                "boolean containsValue(java.lang.Object value)": "Returns true if this map maps one or more keys to the specified value.",
                "boolean equals(java.lang.Object o)": "Compares the specified object with this map for equality.",
                "boolean forEachEntry(TIntObjectProcedure<? super V> procedure)": "Executes the specified procedure for each key/value entry in the map.",
                "boolean forEachKey(TIntProcedure procedure)": "Executes the specified procedure for each key in the map.",
                "boolean forEachValue(TObjectProcedure<? super V> procedure)": "Executes the specified procedure for each value in the map.",
                "V get(int key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
                "int getNoEntryKey()": "Returns the value that represents null in the keySet().",
                "int hashCode()": "Returns the hash code value for this map.",
                "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
                "TIntObjectIterator<V> iterator()": "Returns a TIntObjectIterator with access to this map's keys and values.",
                "int[] keys()": "Returns a copy of the keys of the map as an array.",
                "int[] keys(int[] array)": "Returns a copy of the keys of the map as an array.",
                "TIntSet keySet()": "Returns a TIntSet view of the keys contained in this map.",
                "V put(int key, V value)": "Associates the specified value with the specified key in this map.",
                "void putAll(java.util.Map<? extends java.lang.Integer,? extends V> m)": "Copies all of the mappings from the specified map to this map.",
                "void putAll(TIntObjectMap<? extends V> map)": "Put all the entries from the given map into this map.",
                "V putIfAbsent(int key, V value)": "Inserts a key/value pair into the map if the specified key is not already associated with a value.",
                "V remove(int key)": "Removes the mapping for a key from this map if it is present.",
                "boolean retainEntries(TIntObjectProcedure<? super V> procedure)": "Retains only those entries in the map for which the procedure returns a true value.",
                "int size()": "Returns the number of key-value mappings in this map.",
                "void transformValues(TObjectFunction<V,V> function)": "Transforms the values in this map using function.",
                "java.util.Collection<V> valueCollection()": "Returns a Collection view of the values contained in this map.",
                "V[] values()": "Returns the values of the map as an array of int values.",
                "V[] values(V[] array)": "Returns the values of the map using an existing array."
            },
            "super class": []
        }
    },
    "java.util.Deque": {
        "java.util.Deque": {
            "class": "Deque",
            "category": "Interface",
            "methods": {
                "boolean add(E e)": "Ensures that this collection contains the specified element (optional operation).",
                "void addFirst(E e)": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.",
                "void addLast(E e)": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.",
                "boolean contains(Object o)": "Returns true if this collection contains the specified element.",
                "Iterator descendingIterator()": "Returns an iterator over the elements in this deque in reverse sequential order.",
                "E element()": "Retrieves, but does not remove, the head of this queue.",
                "E getFirst()": "Retrieves, but does not remove, the first element of this deque.",
                "E getLast()": "Retrieves, but does not remove, the last element of this deque.",
                "Iterator iterator()": "Returns an iterator over the elements in this collection.",
                "boolean offer(E e)": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.",
                "boolean offerFirst(E e)": "Inserts the specified element at the front of this deque unless it would violate capacity restrictions.",
                "boolean offerLast(E e)": "Inserts the specified element at the end of this deque unless it would violate capacity restrictions.",
                "E peek()": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.",
                "E peekFirst()": "Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.",
                "E peekLast()": "Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.",
                "E poll()": "Retrieves and removes the head of this queue, or returns null if this queue is empty.",
                "E pollFirst()": "Retrieves and removes the first element of this deque, or returns null if this deque is empty.",
                "E pollLast()": "Retrieves and removes the last element of this deque, or returns null if this deque is empty.",
                "E pop()": "Pops an element from the stack represented by this deque.",
                "void push(E e)": "Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.",
                "E remove()": "Retrieves and removes the head of this queue.",
                "boolean remove(Object o)": "Removes a single instance of the specified element from this collection, if it is present (optional operation).",
                "E removeFirst()": "Retrieves and removes the first element of this deque.",
                "boolean removeFirstOccurrence(Object o)": "Removes the first occurrence of the specified element from this deque.",
                "E removeLast()": "Retrieves and removes the last element of this deque.",
                "boolean removeLastOccurrence(Object o)": "Removes the last occurrence of the specified element from this deque.",
                "int size()": "Returns the number of elements in this collection.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements in this collection.",
                "boolean addAll(Collection c)": "Adds all of the elements in the specified collection to this collection (optional operation).",
                "void clear()": "Removes all of the elements from this collection (optional operation).",
                "boolean containsAll(Collection c)": "Returns true if this collection contains all of the elements in the specified collection.",
                "boolean equals(Object o)": "Compares the specified object with this collection for equality.",
                "int hashCode()": "Returns the hash code value for this collection.",
                "boolean isEmpty()": "Returns true if this collection contains no elements.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean removeAll(Collection c)": "Removes all of this collection's elements that are also contained in the specified collection (optional operation).",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "boolean retainAll(Collection c)": "Retains only the elements in this collection that are contained in the specified collection (optional operation).",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "Object[] toArray()": "Returns an array containing all of the elements in this collection.",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array."
            },
            "super class": [
                "java.util.Queue",
                "java.lang.Iterable",
                "java.util.Collection"
            ]
        }
    },
    "java.util.ListIterator": {
        "java.util.ListIterator": {
            "class": "ListIterator",
            "category": "Interface",
            "methods": {
                "void add(E e)": "Inserts the specified element into the list (optional operation).",
                "boolean hasNext()": "Returns true if the iteration has more elements.",
                "boolean hasPrevious()": "Returns true if this list iterator has more elements when traversing the list in the reverse direction.",
                "E next()": "Returns the next element in the iteration.",
                "int nextIndex()": "Returns the index of the element that would be returned by a subsequent call to next().",
                "E previous()": "Returns the previous element in the list and moves the cursor position backwards.",
                "int previousIndex()": "Returns the index of the element that would be returned by a subsequent call to previous().",
                "void remove()": "Removes from the underlying collection the last element returned by this iterator (optional operation).",
                "void set(E e)": "Replaces the last element returned by next() or previous() with the specified element (optional operation).",
                "void forEachRemaining(Consumer action)": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.Iterator"
            ]
        }
    },
    "java.net.HttpCookie": {
        "java.net.HttpCookie": {
            "class": "HttpCookie",
            "category": "Class",
            "methods": {
                "Object clone()": "Create and return a copy of this object.",
                "boolean domainMatches(String domain, String host)": "The utility method to check whether a host name is in a domain or not.",
                "boolean equals(Object obj)": "Test the equality of two HTTP cookies.",
                "String getComment()": "Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.",
                "String getCommentURL()": "Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL.",
                "boolean getDiscard()": "Returns the discard attribute of the cookie",
                "String getDomain()": "Returns the domain name set for this cookie.",
                "long getMaxAge()": "Returns the maximum age of the cookie, specified in seconds.",
                "String getName()": "Returns the name of the cookie.",
                "String getPath()": "Returns the path on the server to which the browser returns this cookie.",
                "String getPortlist()": "Returns the port list attribute of the cookie",
                "boolean getSecure()": "Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.",
                "String getValue()": "Returns the value of the cookie.",
                "int getVersion()": "Returns the version of the protocol this cookie complies with.",
                "boolean hasExpired()": "Reports whether this HTTP cookie has expired or not.",
                "int hashCode()": "Returns the hash code of this HTTP cookie.",
                "boolean isHttpOnly()": "Returns true if this cookie contains the HttpOnly attribute.",
                "List parse(String header)": "Constructs cookies from set-cookie or set-cookie2 header string.",
                "void setComment(String purpose)": "Specifies a comment that describes a cookie's purpose.",
                "void setCommentURL(String purpose)": "Specifies a comment URL that describes a cookie's purpose.",
                "void setDiscard(boolean discard)": "Specify whether user agent should discard the cookie unconditionally.",
                "void setDomain(String pattern)": "Specifies the domain within which this cookie should be presented.",
                "void setHttpOnly(boolean httpOnly)": "Indicates whether the cookie should be considered HTTP Only.",
                "void setMaxAge(long expiry)": "Sets the maximum age of the cookie in seconds.",
                "void setPath(String uri)": "Specifies a path for the cookie to which the client should return the cookie.",
                "void setPortlist(String ports)": "Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header.",
                "void setSecure(boolean flag)": "Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL.",
                "void setValue(String newValue)": "Assigns a new value to a cookie after the cookie is created.",
                "void setVersion(int v)": "Sets the version of the cookie protocol this cookie complies with.",
                "String toString()": "Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading \"Cookie:\" token."
            },
            "super class": []
        }
    },
    "org.codehaus.jackson.JsonNode": {
        "org.codehaus.jackson.JsonNode": {
            "class": "JsonNode",
            "category": "Class",
            "methods": {
                "void appendElement(JsonNode node)": "Appends the specified node to the end of this array node.",
                "boolean equals(Object o)": "Let's mark this standard method as to ensure all implementation classes define it.",
                "boolean getBooleanValue()": "Method for accessing boolean value of this node, if and only if this node is value node (method JsonNode.isValueNode() returns true).",
                "BigDecimal getDecimalValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "double getDoubleValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "Iterator<JsonNode> getElements()": "Method for accessing all value nodes of this node, iff this node is a JSON Array or an Object.",
                "JsonNode getElementValue(int index)": "Method for accessing value of the specified element of an array node.",
                "Iterator<String> getFieldNames()": "Method for accessing names of all fields for this JSON Object node.",
                "JsonNode getFieldValue(String fieldName)": "Method for accessing value of the specified field of an object node.",
                "Iterator<JsonNode> getFieldValues()": "Method for accessing all values of fields for this JSON Object node.",
                "int getIntValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "long getLongValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "Number getNumberValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
                "JsonNode getPath(int index)": "This method is similar to getElementValue(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
                "JsonNode getPath(String fieldName)": "This method is similar to getFieldValue(java.lang.String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
                "String getTextValue()": "Method for accessing textual representation of this node, if and only if this node is a value node (method JsonNode.isValueNode() returns true).",
                "String getValueAsText()": "Method that will return valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise null.",
                "void insertElement(int index, JsonNode value)": "Inserts the specified node at the specified position in this array node.",
                "boolean isArray()": "Method that returns true if this node represents a JSON Array.",
                "boolean isBigDecimal()": "Method that returns true if this node is a numeric node that contains a BigDecimal value.",
                "boolean isBoolean()": "Method that returns true if this node is a boolean node that contains a boolean value.",
                "boolean isContainerNode()": "Method that returns true for container nodes: Arrays and Objects.",
                "boolean isDouble()": "Method that returns true if this node is a numeric node that contains a double value.",
                "boolean isFloatingPointNumber()": "Method that returns true if this node is a numeric node that contains a floating point value.",
                "boolean isInt()": "Method that returns true if this node is a numeric node that contains an int value.",
                "boolean isIntegralNumber()": "Method that returns true if this node is a numeric node that contains an integral (non-floating point) value.",
                "boolean isLong()": "Method that returns true if this node is a numeric node that contains a long value.",
                "boolean isMissingNode()": "Method that returns true for 'virtual' nodes which represent missing entries constructed by path accessor methods when there is no actual node matching given criteria.",
                "boolean isNull()": "Method that returns true if this node is a null node.",
                "boolean isNumber()": "Method that returns true if this node is a numeric node.",
                "boolean isObject()": "Method that returns true if this node represents a JSON Object.",
                "boolean isTextual()": "Method that returns true if this node is a textual node that contains a String value.",
                "boolean isValueNode()": "Method that returns true for all value nodes: ones that are not containers, and that do not represent 'missing' nodes in the path.",
                "JsonNode removeElement(int index)": "Removes the element at the specified position in this array node.",
                "JsonNode removeElement(String fieldName)": "Removes the field with the specified name from this object node.",
                "JsonNode reportNoArrayMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Array node.",
                "JsonNode reportNoObjectMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Object node.",
                "JsonNode setElement(int index, JsonNode value)": "Replaces the element at the specified position in this array node with the specified node.",
                "JsonNode setElement(String fieldName, JsonNode value)": "Replaces the field with the specified name in this object node with the specified value.",
                "int size()": "Returns the number of child nodes of this container node.",
                "String toString()": "Let's mark this standard method as to ensure all implementation classes define it.",
                "void writeTo(JsonGenerator jg)": "Method that can be called to serialize this node and all of its descendants using specified JSON generator."
            },
            "super class": []
        }
    },
    "org.apache.hadoop.conf.Configuration": {
        "org.apache.hadoop.conf.Configuration": {
            "class": "Configuration",
            "category": "Class",
            "methods": {
                "void addDefaultResource(String name)": "Add a default resource.",
                "void addDeprecation(String key, String newKey)": "Adds the deprecated key to the global deprecation map when no custom message is provided.",
                "void addDeprecation(String key, String newKey, String customMessage)": "Adds the deprecated key to the global deprecation map.",
                "void addDeprecations(org.apache.hadoop.conf.Configuration.DeprecationDelta[] deltas)": "Adds a set of deprecated keys to the global deprecations.",
                "void addResource(Configuration conf)": "Add a configuration resource.",
                "void addResource(InputStream in)": "Add a configuration resource.",
                "void addResource(InputStream in, String name)": "Add a configuration resource.",
                "void addResource(Path file)": "Add a configuration resource.",
                "void addResource(String name)": "Add a configuration resource.",
                "void addResource(URL url)": "Add a configuration resource.",
                "void clear()": "Clears all keys from the configuration.",
                "void dumpConfiguration(Configuration config, Writer out)": "Writes out all the parameters and their properties (final and resource) to the given Writer The format of the output would be { \"properties\" : [ {key1, value1, key1.isFinal, key1.resource}, {key2, value2, key2.isFinal, key2.resource}...",
                "void dumpDeprecatedKeys()": "",
                "String get(String name)": "Get the value of the name property, null if no such property exists.",
                "String get(String name, String defaultValue)": "Get the value of the name.",
                "boolean getBoolean(String name, boolean defaultValue)": "Get the value of the name property as a boolean.",
                "Class getClass(String name, Class defaultValue)": "Get the value of the name property as a Class.",
                "Class getClass(String name, Class defaultValue, Class xface)": "Get the value of the name property as a Class implementing the interface specified by xface.",
                "Class getClassByName(String name)": "Load a class by name.",
                "Class getClassByNameOrNull(String name)": "Load a class by name, returning null rather than throwing an exception if it couldn't be loaded.",
                "Class[] getClasses(String name, Class... defaultValue)": "Get the value of the name property as an array of Class.",
                "ClassLoader getClassLoader()": "Get the ClassLoader for this job.",
                "InputStream getConfResourceAsInputStream(String name)": "Get an input stream attached to the configuration resource with the given name.",
                "Reader getConfResourceAsReader(String name)": "Get a Reader attached to the configuration resource with the given name.",
                "double getDouble(String name, double defaultValue)": "Get the value of the name property as a double.",
                "T getEnum(String name, T defaultValue)": "Return value matching this enumerated type.",
                "File getFile(String dirsProp, String path)": "Get a local file name under a directory named in dirsProp with the given path.",
                "Set getFinalParameters()": "Get the set of parameters marked final.",
                "float getFloat(String name, float defaultValue)": "Get the value of the name property as a float.",
                "List getInstances(String name, Class xface)": "Get the value of the name property as a List of objects implementing the interface specified by xface.",
                "int getInt(String name, int defaultValue)": "Get the value of the name property as an int.",
                "int[] getInts(String name)": "Get the value of the name property as a set of comma-delimited int values.",
                "Path getLocalPath(String dirsProp, String path)": "Get a local file under a directory named by dirsProp with the given path.",
                "long getLong(String name, long defaultValue)": "Get the value of the name property as a long.",
                "long getLongBytes(String name, long defaultValue)": "Get the value of the name property as a long or human readable format.",
                "char[] getPassword(String name)": "Get the value for a known password configuration element.",
                "char[] getPasswordFromConfig(String name)": "Fallback to clear text passwords in configuration.",
                "char[] getPasswordFromCredentialProviders(String name)": "Try and resolve the provided element name as a credential provider alias.",
                "Pattern getPattern(String name, Pattern defaultValue)": "Get the value of the name property as a Pattern.",
                "String[] getPropertySources(String name)": "Gets information about why a property was set.",
                "Properties getProps()": "",
                "org.apache.hadoop.conf.Configuration.IntegerRanges getRange(String name, String defaultValue)": "Parse the given attribute as a set of integer ranges",
                "String getRaw(String name)": "Get the value of the name property, without doing variable expansion.If the key is deprecated, it returns the value of the first key which replaces the deprecated key and is not null.",
                "URL getResource(String name)": "Get the URL for the named resource.",
                "InetSocketAddress getSocketAddr(String name, String defaultAddress, int defaultPort)": "Get the socket address for name property as a InetSocketAddress.",
                "InetSocketAddress getSocketAddr(String hostProperty, String addressProperty, String defaultAddressValue, int defaultPort)": "Get the socket address for hostProperty as a InetSocketAddress.",
                "Collection getStringCollection(String name)": "Get the comma delimited values of the name property as a collection of Strings.",
                "String[] getStrings(String name)": "Get the comma delimited values of the name property as an array of Strings.",
                "String[] getStrings(String name, String... defaultValue)": "Get the comma delimited values of the name property as an array of Strings.",
                "long getTimeDuration(String name, long defaultValue, TimeUnit unit)": "Return time duration in the given time unit.",
                "String getTrimmed(String name)": "Get the value of the name property as a trimmed String, null if no such property exists.",
                "String getTrimmed(String name, String defaultValue)": "Get the value of the name property as a trimmed String, defaultValue if no such property exists.",
                "Collection getTrimmedStringCollection(String name)": "Get the comma delimited values of the name property as a collection of Strings, trimmed of the leading and trailing whitespace.",
                "String[] getTrimmedStrings(String name)": "Get the comma delimited values of the name property as an array of Strings, trimmed of the leading and trailing whitespace.",
                "String[] getTrimmedStrings(String name, String... defaultValue)": "Get the comma delimited values of the name property as an array of Strings, trimmed of the leading and trailing whitespace.",
                "Map getValByRegex(String regex)": "get keys matching the the regex",
                "boolean hasWarnedDeprecation(String name)": "Returns whether or not a deprecated name has been warned.",
                "boolean isDeprecated(String key)": "checks whether the given key is deprecated.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "void main(String[] args)": "For debugging.",
                "boolean onlyKeyExists(String name)": "Return existence of the name property, but only for names which have no valid value, usually non-existent or commented out in XML.",
                "void readFields(DataInput in)": "Deserialize the fields of this object from in.",
                "void reloadConfiguration()": "Reload configuration from previously added resources.",
                "void set(String name, String value)": "Set the value of the name property.",
                "void set(String name, String value, String source)": "Set the value of the name property.",
                "void setAllowNullValueProperties(boolean val)": "Set Configuration to allow keys without values during setup.",
                "void setBoolean(String name, boolean value)": "Set the value of the name property to a boolean.",
                "void setBooleanIfUnset(String name, boolean value)": "Set the given property, if it is currently unset.",
                "void setClass(String name, Class theClass, Class xface)": "Set the value of the name property to the name of a theClass implementing the given interface xface.",
                "void setClassLoader(ClassLoader classLoader)": "Set the class loader that will be used to load the various objects.",
                "void setDeprecatedProperties()": "Sets all deprecated properties that are not currently set but have a corresponding new property that is set.",
                "void setDouble(String name, double value)": "Set the value of the name property to a double.",
                "void setEnum(String name, T value)": "Set the value of the name property to the given type.",
                "void setFloat(String name, float value)": "Set the value of the name property to a float.",
                "void setIfUnset(String name, String value)": "Sets a property if it is currently unset.",
                "void setInt(String name, int value)": "Set the value of the name property to an int.",
                "void setLong(String name, long value)": "Set the value of the name property to a long.",
                "void setPattern(String name, Pattern pattern)": "Set the given property to Pattern.",
                "void setQuietMode(boolean quietmode)": "Set the quietness-mode.",
                "void setSocketAddr(String name, InetSocketAddress addr)": "Set the socket address for the name property as a host:port.",
                "void setStrings(String name, String... values)": "Set the array of string values for the name property as as comma delimited values.",
                "void setTimeDuration(String name, long value, TimeUnit unit)": "Set the value of name to the given time duration.",
                "int size()": "Return the number of keys in the configuration.",
                "String toString()": "",
                "void unset(String name)": "Unset a previously set property.",
                "InetSocketAddress updateConnectAddr(String name, InetSocketAddress addr)": "Set the socket address a client can use to connect for the name property as a host:port.",
                "InetSocketAddress updateConnectAddr(String hostProperty, String addressProperty, String defaultAddressValue, InetSocketAddress addr)": "Set the socket address a client can use to connect for the name property as a host:port.",
                "void write(DataOutput out)": "Serialize the fields of this object to out.",
                "void writeXml(OutputStream out)": "Write out the non-default properties in this configuration to the given OutputStream using UTF-8 encoding.",
                "void writeXml(Writer out)": "Write out the non-default properties in this configuration to the given Writer.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable."
            },
            "super class": [
                "java.lang.Iterable"
            ]
        }
    },
    "android.os.Handler": {
        "android.os.Handler": {
            "class": "Handler",
            "category": "class",
            "methods": {
                "Handler createAsync(Looper looper, Handler.Callback callback)": "Create a new Handler whose posted messages and runnables are not subject to synchronization barriers such as display vsync.",
                "Handler createAsync(Looper looper)": "Create a new Handler whose posted messages and runnables are not subject to synchronization barriers such as display vsync.",
                "void dispatchMessage(Message msg)": "Handle system messages here.",
                "void dump(Printer pw, String prefix)": "void dump(Printer pw, String prefix)",
                "Looper getLooper()": "Looper getLooper()",
                "String getMessageName(Message message)": "Returns a string representing the name of the specified message.",
                "void handleMessage(Message msg)": "Subclasses must implement this to receive messages.",
                "boolean hasCallbacks(Runnable r)": "Check if there are any pending posts of messages with callback r in the message queue.",
                "boolean hasMessages(int what)": "Check if there are any pending posts of messages with code 'what' in the message queue.",
                "boolean hasMessages(int what, Object object)": "Check if there are any pending posts of messages with code 'what' and whose obj is 'object' in the message queue.",
                "Message obtainMessage(int what, Object obj)": "Same as obtainMessage(), except that it also sets the what and obj members of the returned Message.",
                "Message obtainMessage()": "Returns a new Message from the global message pool.",
                "Message obtainMessage(int what, int arg1, int arg2)": "Same as obtainMessage(), except that it also sets the what, arg1 and arg2 members of the returned Message.",
                "Message obtainMessage(int what, int arg1, int arg2, Object obj)": "Same as obtainMessage(), except that it also sets the what, obj, arg1, and arg2 values on the returned Message.",
                "Message obtainMessage(int what)": "Same as obtainMessage(), except that it also sets the what member of the returned Message.",
                "boolean post(Runnable r)": "Causes the Runnable r to be added to the message queue.",
                "boolean postAtFrontOfQueue(Runnable r)": "Posts a message to an object that implements Runnable.",
                "boolean postAtTime(Runnable r, long uptimeMillis)": "Causes the Runnable r to be added to the message queue, to be run at a specific time given by uptimeMillis.",
                "boolean postAtTime(Runnable r, Object token, long uptimeMillis)": "Causes the Runnable r to be added to the message queue, to be run at a specific time given by uptimeMillis.",
                "boolean postDelayed(Runnable r, long delayMillis)": "Causes the Runnable r to be added to the message queue, to be run after the specified amount of time elapses.",
                "boolean postDelayed(Runnable r, Object token, long delayMillis)": "Causes the Runnable r to be added to the message queue, to be run after the specified amount of time elapses.",
                "void removeCallbacks(Runnable r)": "Remove any pending posts of Runnable r that are in the message queue.",
                "void removeCallbacks(Runnable r, Object token)": "Remove any pending posts of Runnable r with Object token that are in the message queue.",
                "void removeCallbacksAndMessages(Object token)": "Remove any pending posts of callbacks and sent messages whose obj is token.",
                "void removeMessages(int what)": "Remove any pending posts of messages with code 'what' that are in the message queue.",
                "void removeMessages(int what, Object object)": "Remove any pending posts of messages with code 'what' and whose obj is 'object' that are in the message queue.",
                "boolean sendEmptyMessage(int what)": "Sends a Message containing only the what value.",
                "boolean sendEmptyMessageAtTime(int what, long uptimeMillis)": "Sends a Message containing only the what value, to be delivered at a specific time.",
                "boolean sendEmptyMessageDelayed(int what, long delayMillis)": "Sends a Message containing only the what value, to be delivered after the specified amount of time elapses.",
                "boolean sendMessage(Message msg)": "Pushes a message onto the end of the message queue after all pending messages before the current time.",
                "boolean sendMessageAtFrontOfQueue(Message msg)": "Enqueue a message at the front of the message queue, to be processed on the next iteration of the message loop.",
                "boolean sendMessageAtTime(Message msg, long uptimeMillis)": "Enqueue a message into the message queue after all pending messages before the absolute time (in milliseconds) uptimeMillis.",
                "boolean sendMessageDelayed(Message msg, long delayMillis)": "Enqueue a message into the message queue after all pending messages before (current time + delayMillis).",
                "String toString()": "Returns a string representation of the object."
            },
            "super class": []
        }
    },
    "org.apache.shiro.session.Session": {
        "org.apache.shiro.session.Session": {
            "class": "Session",
            "category": "Interface",
            "methods": {
                "Object getAttribute(Object key)": "Returns the object bound to this session identified by the specified key.",
                "Collection getAttributeKeys()": "Returns the keys of all the attributes stored under this session.",
                "String getHost()": "Returns the host name or IP string of the host that originated this session, or null if the host is unknown.",
                "Serializable getId()": "Returns the unique identifier assigned by the system upon session creation.",
                "Date getLastAccessTime()": "Returns the last time the application received a request or method invocation from the user associated with this session.",
                "Date getStartTimestamp()": "Returns the time the session was started; that is, the time the system created the instance.",
                "long getTimeout()": "Returns the time in milliseconds that the session session may remain idle before expiring.",
                "Object removeAttribute(Object key)": "Removes (unbinds) the object bound to this session under the specified key name.",
                "void setAttribute(Object key, Object value)": "Binds the specified value to this session, uniquely identified by the specified key name.",
                "void setTimeout(long maxIdleTimeInMillis)": "Sets the time in milliseconds that the session may remain idle before expiring.",
                "void stop()": "Explicitly stops (invalidates) this session and releases all associated resources.",
                "void touch()": "Explicitly updates the lastAccessTime of this session to the current time when this method is invoked."
            },
            "super class": []
        }
    },
    "org.ofbiz.service.ServiceUtil": {
        "org.ofbiz.service.ServiceUtil": {
            "class": "ServiceUtil",
            "category": "Class",
            "methods": {
                "void addErrors(java.util.List targetList, java.util.Map targetMap, java.util.Map callResult)": "Takes the result of an invocation and extracts any error messages and adds them to the targetList or targetMap.",
                "java.util.Map cancelJob(DispatchContext dctx, java.util.Map context)": "",
                "java.util.Map cancelJobRetries(DispatchContext dctx, java.util.Map context)": "",
                "java.util.Map genericDateCondition(DispatchContext dctx, java.util.Map context)": "",
                "java.lang.String getErrorMessage(java.util.Map result)": "",
                "void getMessages(HttpServletRequest request, java.util.Map result, java.lang.String defaultMessage)": "",
                "void getMessages(HttpServletRequest request, java.util.Map result, java.lang.String defaultMessage, java.lang.String msgPrefix, java.lang.String msgSuffix, java.lang.String errorPrefix, java.lang.String errorSuffix, java.lang.String successPrefix, java.lang.String successSuffix)": "",
                "java.lang.String getPartyIdCheckSecurity(GenericValue userLogin, Security security, java.util.Map context, java.util.Map result, java.lang.String secEntity, java.lang.String secOperation)": "A small routine used all over to improve code efficiency, get the partyId and does a security check security check: userLogin partyId must equal partyId, or must have [secEntity][secOperation] permission",
                "java.lang.String getPartyIdCheckSecurity(GenericValue userLogin, Security security, java.util.Map context, java.util.Map result, java.lang.String secEntity, java.lang.String secOperation, java.lang.String adminSecEntity, java.lang.String adminSecOperation)": "",
                "java.lang.String getResource()": "",
                "GenericValue getUserLogin(DispatchContext dctx, java.util.Map context, java.lang.String runAsUser)": "",
                "boolean isError(java.util.Map results)": "A little short-cut method to check to see if a service returned an error",
                "boolean isFailure(java.util.Map results)": "",
                "boolean isSuccess(java.util.Map results)": "A little short-cut method to check to see if a service was successful (neither error or failed)",
                "java.util.Map makeContext(T... args)": "",
                "java.lang.String makeErrorMessage(java.util.Map result, java.lang.String msgPrefix, java.lang.String msgSuffix, java.lang.String errorPrefix, java.lang.String errorSuffix)": "",
                "java.lang.String makeMessageList(java.util.List msgList, java.lang.String msgPrefix, java.lang.String msgSuffix)": "",
                "java.lang.String makeSuccessMessage(java.util.Map result, java.lang.String msgPrefix, java.lang.String msgSuffix, java.lang.String successPrefix, java.lang.String successSuffix)": "",
                "java.util.Map purgeOldJobs(DispatchContext dctx, java.util.Map context)": "",
                "java.util.Map resetJob(DispatchContext dctx, java.util.Map context)": "",
                "java.util.Map returnError(java.lang.String errorMessage)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code",
                "java.util.Map returnError(java.lang.String errorMessage, java.util.List errorMessageList)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code",
                "java.util.Map returnError(java.lang.String errorMessage, java.util.List errorMessageList, java.util.Map errorMessageMap, java.util.Map nestedResult)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code, also forwards any error messages from the nestedResult",
                "java.util.Map returnError(java.util.List errorMessageList)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code",
                "java.util.Map returnFailure()": "",
                "java.util.Map returnFailure(java.lang.String errorMessage)": "",
                "java.util.Map returnFailure(java.util.List errorMessageList)": "",
                "java.util.Map returnMessage(java.lang.String code, java.lang.String message)": "A small routine to make a result map with the message and the response code NOTE: This brings out some bad points to our message convention: we should be using a single message or message list and what type of message that is should be determined by the RESPONSE_MESSAGE (and there's another annoyance, it should be RESPONSE_CODE)",
                "java.util.Map returnProblem(java.lang.String returnType, java.lang.String errorMessage, java.util.List errorMessageList, java.util.Map errorMessageMap, java.util.Map nestedResult)": "",
                "java.util.Map returnSuccess()": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code",
                "java.util.Map returnSuccess(java.lang.String successMessage)": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code",
                "java.util.Map returnSuccess(java.util.List successMessageList)": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code",
                "void setMessages(HttpServletRequest request, java.lang.String errorMessage, java.lang.String eventMessage, java.lang.String defaultMessage)": "",
                "java.util.Map setServiceFields(LocalDispatcher dispatcher, java.lang.String serviceName, java.util.Map fromMap, GenericValue userLogin, java.util.TimeZone timeZone, java.util.Locale locale)": "Checks all incoming service attributes and look for fields with the same name in the incoming map and copy those onto the outgoing map."
            },
            "super class": []
        }
    },
    "org.ejml.data.DenseMatrix64F": {
        "org.ejml.data.DenseMatrix64F": {
            "class": "DenseMatrix64F",
            "category": "Class",
            "methods": {
                "void add(int row, int col, double value)": "Adds 'value' to the specified element in the matrix. aij = aij + value",
                "DenseMatrix64F copy()": "Creates and returns a matrix which is idential to this one.",
                "double get(int row, int col)": "Returns the value of the specified matrix element.",
                "int getIndex(int row, int col)": "Returns the internal array index for the specified row and column.",
                "int getNumElements()": "Returns the number of elements in this matrix, which is equal to the number of rows times the number of columns.",
                "boolean isInBounds(int row, int col)": "Determins if the specified element is inside the bounds of the Matrix.",
                "void print()": "Prints the value of this matrix to the screen.",
                "void print(String format)": "Prints the value of this matrix to the screen using the same format as {@link java.io.PrintStream#printf).",
                "void reshape(int numRows, int numCols, boolean saveValues)": "Changes the number of rows and columns in the matrix, allowing its size to grow or shrink.",
                "void set(int numRows, int numCols, boolean rowMajor, double... data)": "Sets this matrix equal to the matrix encoded in the array.",
                "void set(int row, int col, double value)": "Assigns the element in the Matrix to the specified value.",
                "void setReshape(DenseMatrix64F b)": "Sets the value and shape of this matrix to be identical to the specified matrix.",
                "String toString()": "Converts the array into a string format for display purposes.",
                "double unsafe_get(int row, int col)": "Same as Matrix64F.get(int, int) but does not perform bounds check on input parameters.",
                "void unsafe_set(int row, int col, double value)": "Same as Matrix64F.set(int, int, double) but does not perform bounds check on input parameters.",
                "DenseMatrix64F wrap(int numRows, int numCols, double[] data)": "Creates a new DenseMatrix64F around the provided data.",
                "void zero()": "Sets all elements equal to zero.",
                "double div(int index, double val)": "Divides the specified value to the internal data array at the specified index. Equivalent to: this.data[index] /= val;",
                "double get(int index)": "Returns the value of the matrix at the specified internal array index.",
                "double[] getData()": "Used to get a reference to the internal data.",
                "double minus(int index, double val)": "Subtracts the specified value to the internal data array at the specified index. Equivalent to: this.data[index] -= val;",
                "double plus(int index, double val)": "Adds the specified value to the internal data array at the specified index. Equivalent to: this.data[index] += val;",
                "void set(D1Matrix64F b)": "Sets the value of this matrix to be the same as the value of the provided matrix.",
                "double set(int index, double val)": "Sets the element's value at the specified index.",
                "void setData(double[] data)": "Changes the internal array reference.",
                "double times(int index, double val)": "Multiplies the specified value to the internal data array at the specified index. Equivalent to: this.data[index] *= val;",
                "int getNumCols()": "Returns the number of columns in this matrix.",
                "int getNumRows()": "Returns the number of rows in this matrix.",
                "MatrixIterator iterator(boolean rowMajor, int minRow, int minCol, int maxRow, int maxCol)": "Creates a new iterator for traversing through a submatrix inside this matrix.",
                "void reshape(int numRows, int numCols)": "Equivalent to invoking reshape(numRows, numCols, false);",
                "void set(ReshapeMatrix64F A)": "Assigns the value of 'this' matrix to be the same as 'A'.",
                "void setNumCols(int numCols)": "Sets the number of columns.",
                "void setNumRows(int numRows)": "Sets the number of rows."
            },
            "super class": [
                "org.ejml.data.RowD1Matrix64F",
                "org.ejml.data.D1Matrix64F",
                "org.ejml.data.ReshapeMatrix64F"
            ]
        }
    },
    "com.google.gson.JsonElement": {
        "com.google.gson.JsonElement": {
            "class": "JsonElement",
            "category": "Class",
            "methods": {
                "JsonElement deepCopy()": "Returns a deep copy of this element.",
                "java.math.BigDecimal getAsBigDecimal()": "convenience method to get this element as a BigDecimal.",
                "java.math.BigInteger getAsBigInteger()": "convenience method to get this element as a BigInteger.",
                "boolean getAsBoolean()": "convenience method to get this element as a boolean value.",
                "byte getAsByte()": "convenience method to get this element as a primitive byte value.",
                "char getAsCharacter()": "convenience method to get this element as a primitive character value.",
                "double getAsDouble()": "convenience method to get this element as a primitive double value.",
                "float getAsFloat()": "convenience method to get this element as a primitive float value.",
                "int getAsInt()": "convenience method to get this element as a primitive integer value.",
                "JsonArray getAsJsonArray()": "convenience method to get this element as a JsonArray.",
                "JsonNull getAsJsonNull()": "convenience method to get this element as a JsonNull.",
                "JsonObject getAsJsonObject()": "convenience method to get this element as a JsonObject.",
                "JsonPrimitive getAsJsonPrimitive()": "convenience method to get this element as a JsonPrimitive.",
                "long getAsLong()": "convenience method to get this element as a primitive long value.",
                "java.lang.Number getAsNumber()": "convenience method to get this element as a Number.",
                "short getAsShort()": "convenience method to get this element as a primitive short value.",
                "java.lang.String getAsString()": "convenience method to get this element as a string value.",
                "boolean isJsonArray()": "provides check for verifying if this element is an array or not.",
                "boolean isJsonNull()": "provides check for verifying if this element represents a null value or not.",
                "boolean isJsonObject()": "provides check for verifying if this element is a Json object or not.",
                "boolean isJsonPrimitive()": "provides check for verifying if this element is a primitive or not.",
                "java.lang.String toString()": "Returns a String representation of this element."
            },
            "super class": []
        }
    },
    "javafx.collections.Observable": {
        "javafx.collections.Observable": {
            "class": "Observable",
            "category": "Interface",
            "methods": {
                "void addListener(InvalidationListener listener)": "Adds an InvalidationListener which will be notified whenever the Observable becomes invalid.",
                "void removeListener(InvalidationListener listener)": "Removes the given listener from the list of listeners, that are notified whenever the value of the Observable becomes invalid."
            },
            "super class": []
        }
    },
    "java.util.Dictionary": {
        "java.util.Dictionary": {
            "class": "Dictionary",
            "category": "Class",
            "methods": {
                "Enumeration elements()": "Returns an enumeration of the values in this dictionary.",
                "V get(Object key)": "Returns the value to which the key is mapped in this dictionary.",
                "boolean isEmpty()": "Returns true if this collection contains no elements.",
                "Enumeration keys()": "Returns an enumeration of the keys in this dictionary.",
                "V put(K key, V value)": "Maps the specified key to the specified value in this dictionary.",
                "V remove(Object key)": "Removes the key (and its corresponding value) from this dictionary.",
                "int size()": "Returns the number of elements in this collection.",
                "boolean add(E e)": "Ensures that this collection contains the specified element (optional operation).",
                "boolean addAll(Collection c)": "Adds all of the elements in the specified collection to this collection (optional operation).",
                "void clear()": "Removes all of the elements from this collection (optional operation).",
                "boolean contains(Object o)": "Returns true if this collection contains the specified element.",
                "boolean containsAll(Collection c)": "Returns true if this collection contains all of the elements in the specified collection.",
                "boolean equals(Object o)": "Compares the specified object with this collection for equality.",
                "int hashCode()": "Returns the hash code value for this collection.",
                "Iterator iterator()": "Returns an iterator over elements of type T.",
                "Stream parallelStream()": "Returns a possibly parallel Stream with this collection as its source.",
                "boolean remove(Object o)": "Removes a single instance of the specified element from this collection, if it is present (optional operation).",
                "boolean removeAll(Collection c)": "Removes all of this collection's elements that are also contained in the specified collection (optional operation).",
                "boolean removeIf(Predicate filter)": "Removes all of the elements of this collection that satisfy the given predicate.",
                "boolean retainAll(Collection c)": "Retains only the elements in this collection that are contained in the specified collection (optional operation).",
                "Spliterator spliterator()": "Creates a Spliterator over the elements described by this Iterable.",
                "Stream stream()": "Returns a sequential Stream with this collection as its source.",
                "Object[] toArray()": "Returns an array containing all of the elements in this collection.",
                "T[] toArray(T[] a)": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.",
                "void forEach(Consumer action)": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception."
            },
            "super class": [
                "java.util.Collection",
                "java.lang.Iterable"
            ]
        }
    }
}
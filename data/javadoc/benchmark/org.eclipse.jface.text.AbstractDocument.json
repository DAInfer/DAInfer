{
    "class": "AbstractDocument",
    "category": "Class",
    "methods": {
        "void addDocumentListener(IDocumentListener listener)": "Registers a document listener with the document.",
        "void addDocumentPartitioningListener(IDocumentPartitioningListener listener)": "Registers a document partitioning listener with the document.",
        "void addPosition(Position position)": "Adds the position to the document's default position category.",
        "void addPosition(String category, Position position)": "Adds the position to the specified position category of the document.",
        "void addPositionCategory(String category)": "Adds a new position category to the document.",
        "void addPositionUpdater(IPositionUpdater updater)": "Appends a new position updater to the document's list of position updaters.",
        "void addPrenotifiedDocumentListener(IDocumentListener listener)": "Adds the given document listener as one which is notified before those document listeners added with addDocumentListener are notified.",
        "void completeInitialization()": "Initializes document listeners, positions, and position updaters.",
        "int computeIndexInCategory(String category, int offset)": "Computes the index at which a Position with the specified offset would be inserted into the given category.",
        "int computeIndexInPositionList(List positions, int offset)": "Computes the index in the list of positions at which a position with the given offset would be inserted.",
        "int computeNumberOfLines(String text)": "Computes the number of lines in the given text.",
        "ITypedRegion[] computePartitioning(int offset, int length)": "Computes the partitioning of the given document range using the document's partitioner.",
        "boolean containsPosition(String category, int offset, int length)": "Determines whether a position described by the parameters is managed by this document.",
        "boolean containsPositionCategory(String category)": "Checks the presence of the specified position category.",
        "void fireDocumentAboutToBeChanged(DocumentEvent event)": "Fires the given document event to all registers document listeners informing them about the forthcoming document manipulation.",
        "void fireDocumentChanged(DocumentEvent event)": "Updates the internal document structures and informs all document listeners.",
        "void fireDocumentPartitioningChanged()": "Deprecated. use fireDocumentPartitioningChanged(IRegion) instead",
        "void fireDocumentPartitioningChanged(IRegion region)": "Fires the document partitioning changed notification to all registered document partitioning listeners.",
        "String get()": "Returns this document's complete text.",
        "String get(int pos, int length)": "Returns this document's text for the specified range.",
        "char getChar(int pos)": "Returns the character at the given document offset in this document.",
        "String getContentType(int offset)": "Returns the type of the document partition containing the given offset.",
        "List getDocumentListeners()": "Returns the document's document listeners.",
        "Map getDocumentManagedPositions()": "Returns all positions managed by the document grouped by category.",
        "IDocumentPartitioner getDocumentPartitioner()": "Returns this document's partitioner.",
        "List getDocumentPartitioningListeners()": "Returns the document's partitioning listeners.",
        "String[] getLegalContentTypes()": "Returns the set of legal content types of document partitions.",
        "String[] getLegalLineDelimiters()": "Returns the document's legal line delimiters.",
        "int getLength()": "Returns the number of characters in this document.",
        "String getLineDelimiter(int line)": "Returns the line delimiter of that line.",
        "IRegion getLineInformation(int line)": "Returns a description of the specified line.",
        "IRegion getLineInformationOfOffset(int offset)": "Returns a description of the line at the given offset.",
        "int getLineLength(int line)": "Returns the length of the given line including the line's delimiter.",
        "int getLineOffset(int line)": "Determines the offset of the first character of the given line.",
        "int getLineOfOffset(int pos)": "Returns the number of the line at which the character of the specified position is located.",
        "int getNumberOfLines()": "Returns the number of lines in this document.",
        "int getNumberOfLines(int offset, int length)": "Returns the number of lines which are occupied by a given text range.",
        "ITypedRegion getPartition(int offset)": "Returns the document partition in which the position is located.",
        "String[] getPositionCategories()": "Returns all position categories of this document.",
        "Position[] getPositions(String category)": "Returns all positions of the given position category.",
        "IPositionUpdater[] getPositionUpdaters()": "Returns the list of position updaters attached to the document.",
        "ITextStore getStore()": "Returns the document's text store.",
        "ILineTracker getTracker()": "Returns the document's line tracker.",
        "void insertPositionUpdater(IPositionUpdater updater, int index)": "Inserts the position updater at the specified index in the document's list of position updaters.",
        "void registerPostNotificationReplace(IDocumentListener owner, IDocumentExtension.IReplace replace)": "Callback for document listeners to be used inside documentChanged to register a post notification replace operation on the document notifying them.",
        "void removeDocumentListener(IDocumentListener listener)": "Removes the listener from the document's list of document listeners.",
        "void removeDocumentPartitioningListener(IDocumentPartitioningListener listener)": "Removes the listener from this document's list of document partitioning listeners.",
        "void removePosition(Position position)": "Removes the given position from the document's default position category.",
        "void removePosition(String category, Position position)": "Removes the given position from the specified position category.",
        "void removePositionCategory(String category)": "Deletes the position category from the document.",
        "void removePositionUpdater(IPositionUpdater updater)": "Removes the position updater from the document's list of position updaters.",
        "void removePrenotifiedDocumentListener(IDocumentListener listener)": "Removes the given document listener from the document's list of prenotified document listeners.",
        "void replace(int pos, int length, String text)": "Substitutes the given text for the specified document range.",
        "void resumePostNotificationProcessing()": "Resumes the processing of post notification replace operations.",
        "int search(int startPosition, String findString, boolean forwardSearch, boolean caseSensitive, boolean wholeWord)": "Returns the offset of a given search string in the document based on a set of search criteria.",
        "void set(String text)": "Replaces the content of the document with the given text.",
        "void setDocumentPartitioner(IDocumentPartitioner partitioner)": "Sets this document's partitioner.",
        "void setLineTracker(ILineTracker tracker)": "Sets the document's line tracker.",
        "void setTextStore(ITextStore store)": "Sets the document's text store.",
        "void startSequentialRewrite(boolean normalized)": "Tells the document that it is about to be sequentially rewritten.",
        "void stopPostNotificationProcessing()": "Stops the processing of registered post notification replace operations until resumePostNotificationProcessing is called.",
        "void stopSequentialRewrite()": "Tells the document that the sequential rewrite has been finished.",
        "void updateDocumentStructures(DocumentEvent event)": "Updates document partitioning and document positions according to the specification given by the document event.",
        "void updatePositions(DocumentEvent event)": "Updates all positions of all categories to the change described by the document event."
    },
    "super class": []
}
{
    "class": "Node",
    "category": "Class",
    "methods": {
        "void addOrphanComment(Comment comment)": "",
        "Node clone()": "",
        "boolean containsData(DataKey key)": "",
        "void customInitialization()": "Called in every constructor for node specific code.",
        "boolean equals(Object obj)": "",
        "Optional findCompilationUnit()": "",
        "Node findRootNode()": "Finds the root node of this AST by finding the topmost parent.",
        "List getAllContainedComments()": "This is the list of Comment which are contained in the Node either because they are properly associated to one of its children or because they are floating around inside the Node",
        "List getChildNodes()": "Contains all nodes that have this node set as their parent.",
        "List getChildNodesByType(Class clazz)": "Recursively finds all nodes of a certain type.",
        "Optional getComment()": "This is a comment associated with this node.",
        "M getData(DataKey key)": "Gets data for this node using the given key.",
        "NodeMetaModel getMetaModel()": "",
        "List getOrphanComments()": "This is a list of Comment which are inside the node and are not associated with any meaningful AST Node.",
        "Optional getParentNode()": "Return the parent node or null, if no parent is set.",
        "Node getParentNodeForChildren()": "this for everything except NodeLists.",
        "Node.Parsedness getParsed()": "",
        "Optional getRange()": "",
        "SymbolResolver getSymbolResolver()": "",
        "Optional getTokenRange()": "",
        "int hashCode()": "",
        "boolean isRegistered(AstObserver observer)": "Was this observer registered? Note that equals is used to determine if the given observer was registered.",
        "void notifyPropertyChange(ObservableProperty property, P oldValue, P newValue)": "",
        "void register(AstObserver observer)": "Register an observer.",
        "void register(AstObserver observer, Node.ObserverRegistrationMode mode)": "Register a new observer for the given node.",
        "void registerForSubtree(AstObserver observer)": "Register the observer for the current node and all the contained node and nodelists, recursively.",
        "boolean remove()": "Try to remove this node from the parent",
        "boolean remove(Node node)": "",
        "Node removeComment()": "",
        "void removeForced()": "Forcibly removes this node from the AST.",
        "boolean removeOrphanComment(Comment comment)": "",
        "boolean replace(Node node)": "Try to replace this node in the parent with the supplied node.",
        "boolean replace(Node node, Node replacementNode)": "",
        "void setAsParentNodeOf(Node childNode)": "",
        "void setAsParentNodeOf(NodeList list)": "",
        "Node setBlockComment(String comment)": "Use this to store additional information to this node.",
        "Node setComment(Comment comment)": "Use this to store additional information to this node.",
        "void setData(DataKey key, M object)": "Sets data for this node using the given key.",
        "Node setLineComment(String comment)": "Use this to store additional information to this node.",
        "Node setParentNode(Node newParentNode)": "Assign a new parent to this node, removing it from the list of children of the previous parent, if any.",
        "Node setParsed(Node.Parsedness parsed)": "Used by the parser to flag unparsable nodes.",
        "Node setRange(Range range)": "",
        "Node setTokenRange(TokenRange tokenRange)": "",
        "String toString()": "Return the String representation of this node.",
        "String toString(PrettyPrinterConfiguration prettyPrinterConfiguration)": "",
        "void tryAddImportToParentCompilationUnit(Class clazz)": "",
        "void unregister(AstObserver observer)": "Unregister an observer."
    },
    "super class": []
}
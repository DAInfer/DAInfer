{
    "class": "ByteBuffer",
    "category": "Class",
    "methods": {
        "ByteBuffer allocate(int capacity)": "Allocates a new byte buffer.",
        "ByteBuffer allocateDirect(int capacity)": "Allocates a new direct byte buffer.",
        "byte[] array()": "Returns the byte array that backs this buffer (optional operation).",
        "int arrayOffset()": "Returns the offset within this buffer's backing array of the first element of the buffer (optional operation).",
        "CharBuffer asCharBuffer()": "Creates a view of this byte buffer as a char buffer.",
        "DoubleBuffer asDoubleBuffer()": "Creates a view of this byte buffer as a double buffer.",
        "FloatBuffer asFloatBuffer()": "Creates a view of this byte buffer as a float buffer.",
        "IntBuffer asIntBuffer()": "Creates a view of this byte buffer as an int buffer.",
        "LongBuffer asLongBuffer()": "Creates a view of this byte buffer as a long buffer.",
        "ByteBuffer asReadOnlyBuffer()": "Creates a new, read-only byte buffer that shares this buffer's content.",
        "ShortBuffer asShortBuffer()": "Creates a view of this byte buffer as a short buffer.",
        "ByteBuffer compact()": "Compacts this buffer (optional operation).",
        "int compareTo(ByteBuffer that)": "Compares this buffer to another.",
        "ByteBuffer duplicate()": "Creates a new byte buffer that shares this buffer's content.",
        "boolean equals(Object ob)": "Tells whether or not this buffer is equal to another object.",
        "byte get()": "Relative get method.",
        "ByteBuffer get(byte[] dst)": "Relative bulk get method.",
        "ByteBuffer get(byte[] dst, int offset, int length)": "Relative bulk get method.",
        "byte get(int index)": "Absolute get method.",
        "char getChar()": "Relative get method for reading a char value.",
        "char getChar(int index)": "Absolute get method for reading a char value.",
        "double getDouble()": "Relative get method for reading a double value.",
        "double getDouble(int index)": "Absolute get method for reading a double value.",
        "float getFloat()": "Relative get method for reading a float value.",
        "float getFloat(int index)": "Absolute get method for reading a float value.",
        "int getInt()": "Relative get method for reading an int value.",
        "int getInt(int index)": "Absolute get method for reading an int value.",
        "long getLong()": "Relative get method for reading a long value.",
        "long getLong(int index)": "Absolute get method for reading a long value.",
        "short getShort()": "Relative get method for reading a short value.",
        "short getShort(int index)": "Absolute get method for reading a short value.",
        "boolean hasArray()": "Tells whether or not this buffer is backed by an accessible byte array.",
        "int hashCode()": "Returns the current hash code of this buffer.",
        "boolean isDirect()": "Tells whether or not this byte buffer is direct.",
        "ByteOrder order()": "Retrieves this buffer's byte order.",
        "ByteBuffer order(ByteOrder bo)": "Modifies this buffer's byte order.",
        "ByteBuffer put(byte b)": "Relative put method (optional operation).",
        "ByteBuffer put(byte[] src)": "Relative bulk put method (optional operation).",
        "ByteBuffer put(byte[] src, int offset, int length)": "Relative bulk put method (optional operation).",
        "ByteBuffer put(ByteBuffer src)": "Relative bulk put method (optional operation).",
        "ByteBuffer put(int index, byte b)": "Absolute put method (optional operation).",
        "ByteBuffer putChar(char value)": "Relative put method for writing a char value (optional operation).",
        "ByteBuffer putChar(int index, char value)": "Absolute put method for writing a char value (optional operation).",
        "ByteBuffer putDouble(double value)": "Relative put method for writing a double value (optional operation).",
        "ByteBuffer putDouble(int index, double value)": "Absolute put method for writing a double value (optional operation).",
        "ByteBuffer putFloat(float value)": "Relative put method for writing a float value (optional operation).",
        "ByteBuffer putFloat(int index, float value)": "Absolute put method for writing a float value (optional operation).",
        "ByteBuffer putInt(int value)": "Relative put method for writing an int value (optional operation).",
        "ByteBuffer putInt(int index, int value)": "Absolute put method for writing an int value (optional operation).",
        "ByteBuffer putLong(int index, long value)": "Absolute put method for writing a long value (optional operation).",
        "ByteBuffer putLong(long value)": "Relative put method for writing a long value (optional operation).",
        "ByteBuffer putShort(int index, short value)": "Absolute put method for writing a short value (optional operation).",
        "ByteBuffer putShort(short value)": "Relative put method for writing a short value (optional operation).",
        "ByteBuffer slice()": "Creates a new byte buffer whose content is a shared subsequence of this buffer's content.",
        "String toString()": "Returns a string summarizing the state of this buffer.",
        "ByteBuffer wrap(byte[] array)": "Wraps a byte array into a buffer.",
        "ByteBuffer wrap(byte[] array, int offset, int length)": "Wraps a byte array into a buffer."
    },
    "super class": [
        "java.nio.Buffer"
    ]
}
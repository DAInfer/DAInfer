{
    "class": "IntentFilter",
    "category": "class",
    "methods": {
        "Iterator actionsIterator()": "Return an iterator over the filter's actions.",
        "void addAction(String action)": "Add a new Intent action to match against.",
        "void addCategory(String category)": "Add a new Intent category to match against.",
        "void addDataAuthority(String host, String port)": "Add a new Intent data authority to match against.",
        "void addDataPath(String path, int type)": "Add a new Intent data path to match against.",
        "void addDataScheme(String scheme)": "Add a new Intent data scheme to match against.",
        "void addDataSchemeSpecificPart(String ssp, int type)": "Add a new Intent data \"scheme specific part\" to match against.",
        "void addDataType(String type)": "Add a new Intent data type to match against.",
        "Predicate asPredicate()": "Return a Predicate which tests whether this filter matches the given intent.",
        "Predicate asPredicateWithTypeResolution(ContentResolver resolver)": "Return a Predicate which tests whether this filter matches the given intent.",
        "Iterator authoritiesIterator()": "Return an iterator over the filter's data authorities.",
        "Iterator categoriesIterator()": "Return an iterator over the filter's categories.",
        "int countActions()": "Return the number of actions in the filter.",
        "int countCategories()": "Return the number of categories in the filter.",
        "int countDataAuthorities()": "Return the number of data authorities in the filter.",
        "int countDataPaths()": "Return the number of data paths in the filter.",
        "int countDataSchemeSpecificParts()": "Return the number of data scheme specific parts in the filter.",
        "int countDataSchemes()": "Return the number of data schemes in the filter.",
        "int countDataTypes()": "Return the number of data types in the filter.",
        "IntentFilter create(String action, String dataType)": "Create a new IntentFilter instance with a specified action and MIME type, where you know the MIME type is correctly formatted.",
        "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
        "void dump(Printer du, String prefix)": "void dump(Printer du, String prefix)",
        "String getAction(int index)": "Return an action in the filter.",
        "String getCategory(int index)": "Return a category in the filter.",
        "IntentFilter.AuthorityEntry getDataAuthority(int index)": "Return a data authority in the filter.",
        "PatternMatcher getDataPath(int index)": "Return a data path in the filter.",
        "String getDataScheme(int index)": "Return a data scheme in the filter.",
        "PatternMatcher getDataSchemeSpecificPart(int index)": "Return a data scheme specific part in the filter.",
        "String getDataType(int index)": "Return a data type in the filter.",
        "int getPriority()": "Return the priority of this filter.",
        "boolean hasAction(String action)": "Is the given action included in the filter? Note that if the filter does not include any actions, false will always be returned.",
        "boolean hasCategory(String category)": "Is the given category included in the filter?",
        "boolean hasDataAuthority(Uri data)": "Is the given data authority included in the filter? Note that if the filter does not include any authorities, false will always be returned.",
        "boolean hasDataPath(String data)": "Is the given data path included in the filter? Note that if the filter does not include any paths, false will always be returned.",
        "boolean hasDataScheme(String scheme)": "Is the given data scheme included in the filter? Note that if the filter does not include any scheme, false will always be returned.",
        "boolean hasDataSchemeSpecificPart(String data)": "Is the given data scheme specific part included in the filter? Note that if the filter does not include any scheme specific parts, false will always be returned.",
        "boolean hasDataType(String type)": "Is the given data type included in the filter? Note that if the filter does not include any type, false will always be returned.",
        "int match(String action, String type, String scheme, Uri data, Set categories, String logTag)": "Test whether this filter matches the given intent data.",
        "int match(ContentResolver resolver, Intent intent, boolean resolve, String logTag)": "Test whether this filter matches the given intent.",
        "boolean matchAction(String action)": "Match this filter against an Intent's action.",
        "String matchCategories(Set categories)": "Match this filter against an Intent's categories.",
        "int matchData(String type, String scheme, Uri data)": "Match this filter against an Intent's data (type, scheme and path).",
        "int matchDataAuthority(Uri data)": "Match this intent filter against the given Intent data.",
        "Iterator pathsIterator()": "Return an iterator over the filter's data paths.",
        "void readFromXml(XmlPullParser parser)": "void readFromXml(XmlPullParser parser)",
        "Iterator schemeSpecificPartsIterator()": "Return an iterator over the filter's data scheme specific parts.",
        "Iterator schemesIterator()": "Return an iterator over the filter's data schemes.",
        "void setPriority(int priority)": "Modify priority of this filter.",
        "Iterator typesIterator()": "Return an iterator over the filter's data types.",
        "void writeToParcel(Parcel dest, int flags)": "Flatten this object in to a Parcel.",
        "void writeToXml(XmlSerializer serializer)": "Write the contents of the IntentFilter as an XML stream."
    },
    "super class": [
    ]
}
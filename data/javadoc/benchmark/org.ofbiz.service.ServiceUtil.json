{
    "class": "ServiceUtil",
    "category": "Class",
    "methods": {
        "void addErrors(java.util.List targetList, java.util.Map targetMap, java.util.Map callResult)": "Takes the result of an invocation and extracts any error messages and adds them to the targetList or targetMap.",
        "java.util.Map cancelJob(DispatchContext dctx, java.util.Map context)": "",
        "java.util.Map cancelJobRetries(DispatchContext dctx, java.util.Map context)": "",
        "java.util.Map genericDateCondition(DispatchContext dctx, java.util.Map context)": "",
        "java.lang.String getErrorMessage(java.util.Map result)": "",
        "void getMessages(HttpServletRequest request, java.util.Map result, java.lang.String defaultMessage)": "",
        "void getMessages(HttpServletRequest request, java.util.Map result, java.lang.String defaultMessage, java.lang.String msgPrefix, java.lang.String msgSuffix, java.lang.String errorPrefix, java.lang.String errorSuffix, java.lang.String successPrefix, java.lang.String successSuffix)": "",
        "java.lang.String getPartyIdCheckSecurity(GenericValue userLogin, Security security, java.util.Map context, java.util.Map result, java.lang.String secEntity, java.lang.String secOperation)": "A small routine used all over to improve code efficiency, get the partyId and does a security check security check: userLogin partyId must equal partyId, or must have [secEntity][secOperation] permission",
        "java.lang.String getPartyIdCheckSecurity(GenericValue userLogin, Security security, java.util.Map context, java.util.Map result, java.lang.String secEntity, java.lang.String secOperation, java.lang.String adminSecEntity, java.lang.String adminSecOperation)": "",
        "java.lang.String getResource()": "",
        "GenericValue getUserLogin(DispatchContext dctx, java.util.Map context, java.lang.String runAsUser)": "",
        "boolean isError(java.util.Map results)": "A little short-cut method to check to see if a service returned an error",
        "boolean isFailure(java.util.Map results)": "",
        "boolean isSuccess(java.util.Map results)": "A little short-cut method to check to see if a service was successful (neither error or failed)",
        "java.util.Map makeContext(T... args)": "",
        "java.lang.String makeErrorMessage(java.util.Map result, java.lang.String msgPrefix, java.lang.String msgSuffix, java.lang.String errorPrefix, java.lang.String errorSuffix)": "",
        "java.lang.String makeMessageList(java.util.List msgList, java.lang.String msgPrefix, java.lang.String msgSuffix)": "",
        "java.lang.String makeSuccessMessage(java.util.Map result, java.lang.String msgPrefix, java.lang.String msgSuffix, java.lang.String successPrefix, java.lang.String successSuffix)": "",
        "java.util.Map purgeOldJobs(DispatchContext dctx, java.util.Map context)": "",
        "java.util.Map resetJob(DispatchContext dctx, java.util.Map context)": "",
        "java.util.Map returnError(java.lang.String errorMessage)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code",
        "java.util.Map returnError(java.lang.String errorMessage, java.util.List errorMessageList)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code",
        "java.util.Map returnError(java.lang.String errorMessage, java.util.List errorMessageList, java.util.Map errorMessageMap, java.util.Map nestedResult)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code, also forwards any error messages from the nestedResult",
        "java.util.Map returnError(java.util.List errorMessageList)": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code",
        "java.util.Map returnFailure()": "",
        "java.util.Map returnFailure(java.lang.String errorMessage)": "",
        "java.util.Map returnFailure(java.util.List errorMessageList)": "",
        "java.util.Map returnMessage(java.lang.String code, java.lang.String message)": "A small routine to make a result map with the message and the response code NOTE: This brings out some bad points to our message convention: we should be using a single message or message list and what type of message that is should be determined by the RESPONSE_MESSAGE (and there's another annoyance, it should be RESPONSE_CODE)",
        "java.util.Map returnProblem(java.lang.String returnType, java.lang.String errorMessage, java.util.List errorMessageList, java.util.Map errorMessageMap, java.util.Map nestedResult)": "",
        "java.util.Map returnSuccess()": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code",
        "java.util.Map returnSuccess(java.lang.String successMessage)": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code",
        "java.util.Map returnSuccess(java.util.List successMessageList)": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code",
        "void setMessages(HttpServletRequest request, java.lang.String errorMessage, java.lang.String eventMessage, java.lang.String defaultMessage)": "",
        "java.util.Map setServiceFields(LocalDispatcher dispatcher, java.lang.String serviceName, java.util.Map fromMap, GenericValue userLogin, java.util.TimeZone timeZone, java.util.Locale locale)": "Checks all incoming service attributes and look for fields with the same name in the incoming map and copy those onto the outgoing map."
    },
    "super class": []
}
{
    "class": "JsonNode",
    "category": "Class",
    "methods": {
        "void appendElement(JsonNode node)": "Appends the specified node to the end of this array node.",
        "boolean equals(Object o)": "Let's mark this standard method as to ensure all implementation classes define it.",
        "boolean getBooleanValue()": "Method for accessing boolean value of this node, if and only if this node is value node (method JsonNode.isValueNode() returns true).",
        "BigDecimal getDecimalValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
        "double getDoubleValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
        "Iterator<JsonNode> getElements()": "Method for accessing all value nodes of this node, iff this node is a JSON Array or an Object.",
        "JsonNode getElementValue(int index)": "Method for accessing value of the specified element of an array node.",
        "Iterator<String> getFieldNames()": "Method for accessing names of all fields for this JSON Object node.",
        "JsonNode getFieldValue(String fieldName)": "Method for accessing value of the specified field of an object node.",
        "Iterator<JsonNode> getFieldValues()": "Method for accessing all values of fields for this JSON Object node.",
        "int getIntValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
        "long getLongValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
        "Number getNumberValue()": "Method for accessing numeric value of this node, if and only if this node is numeric (method JsonNode.isNumber() returns true).",
        "JsonNode getPath(int index)": "This method is similar to getElementValue(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
        "JsonNode getPath(String fieldName)": "This method is similar to getFieldValue(java.lang.String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a 'missing node' (node that returns true for isMissingNode()) will be returned.",
        "String getTextValue()": "Method for accessing textual representation of this node, if and only if this node is a value node (method JsonNode.isValueNode() returns true).",
        "String getValueAsText()": "Method that will return valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise null.",
        "void insertElement(int index, JsonNode value)": "Inserts the specified node at the specified position in this array node.",
        "boolean isArray()": "Method that returns true if this node represents a JSON Array.",
        "boolean isBigDecimal()": "Method that returns true if this node is a numeric node that contains a BigDecimal value.",
        "boolean isBoolean()": "Method that returns true if this node is a boolean node that contains a boolean value.",
        "boolean isContainerNode()": "Method that returns true for container nodes: Arrays and Objects.",
        "boolean isDouble()": "Method that returns true if this node is a numeric node that contains a double value.",
        "boolean isFloatingPointNumber()": "Method that returns true if this node is a numeric node that contains a floating point value.",
        "boolean isInt()": "Method that returns true if this node is a numeric node that contains an int value.",
        "boolean isIntegralNumber()": "Method that returns true if this node is a numeric node that contains an integral (non-floating point) value.",
        "boolean isLong()": "Method that returns true if this node is a numeric node that contains a long value.",
        "boolean isMissingNode()": "Method that returns true for 'virtual' nodes which represent missing entries constructed by path accessor methods when there is no actual node matching given criteria.",
        "boolean isNull()": "Method that returns true if this node is a null node.",
        "boolean isNumber()": "Method that returns true if this node is a numeric node.",
        "boolean isObject()": "Method that returns true if this node represents a JSON Object.",
        "boolean isTextual()": "Method that returns true if this node is a textual node that contains a String value.",
        "boolean isValueNode()": "Method that returns true for all value nodes: ones that are not containers, and that do not represent 'missing' nodes in the path.",
        "JsonNode removeElement(int index)": "Removes the element at the specified position in this array node.",
        "JsonNode removeElement(String fieldName)": "Removes the field with the specified name from this object node.",
        "JsonNode reportNoArrayMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Array node.",
        "JsonNode reportNoObjectMods()": "Method that can be called to indicate that this node is immutable and cannot be modified as an Object node.",
        "JsonNode setElement(int index, JsonNode value)": "Replaces the element at the specified position in this array node with the specified node.",
        "JsonNode setElement(String fieldName, JsonNode value)": "Replaces the field with the specified name in this object node with the specified value.",
        "int size()": "Returns the number of child nodes of this container node.",
        "String toString()": "Let's mark this standard method as to ensure all implementation classes define it.",
        "void writeTo(JsonGenerator jg)": "Method that can be called to serialize this node and all of its descendants using specified JSON generator."
    },
    "super class": []
}
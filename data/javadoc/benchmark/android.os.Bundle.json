{
    "class": "Bundle",
    "category": "class",
    "methods": {
        "void clear()": "Removes all elements from the mapping of this Bundle.",
        "Object clone()": "Clones the current Bundle.",
        "Bundle deepCopy()": "Make a deep copy of the given bundle.",
        "int describeContents()": "Report the nature of this Parcelable's contents",
        "IBinder getBinder(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "Bundle getBundle(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "byte getByte(String key)": "Returns the value associated with the given key, or (byte) 0 if no mapping of the desired type exists for the given key.",
        "Byte getByte(String key, byte defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
        "byte[] getByteArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "char getChar(String key)": "Returns the value associated with the given key, or (char) 0 if no mapping of the desired type exists for the given key.",
        "char getChar(String key, char defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
        "char[] getCharArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "CharSequence getCharSequence(String key, CharSequence defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associatd with the given key.",
        "CharSequence getCharSequence(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "CharSequence[] getCharSequenceArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "ArrayList getCharSequenceArrayList(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "ClassLoader getClassLoader()": "Return the ClassLoader currently associated with this Bundle.",
        "float getFloat(String key, float defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
        "float getFloat(String key)": "Returns the value associated with the given key, or 0.0f if no mapping of the desired type exists for the given key.",
        "float[] getFloatArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "ArrayList getIntegerArrayList(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "T getParcelable(String key)": "This method was deprecated in API level 33. Use the type-safer getParcelable(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
        "T getParcelable(String key, Class clazz)": "Returns the value associated with the given key or null if: No mapping of the desired type exists for the given key.",
        "T[] getParcelableArray(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
        "Parcelable[] getParcelableArray(String key)": "This method was deprecated in API level 33. Use the type-safer getParcelableArray(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
        "ArrayList getParcelableArrayList(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
        "ArrayList getParcelableArrayList(String key)": "This method was deprecated in API level 33. Use the type-safer getParcelable(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
        "T getSerializable(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
        "Serializable getSerializable(String key)": "This method was deprecated in API level 33. Use the type-safer getSerializable(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
        "short getShort(String key)": "Returns the value associated with the given key, or (short) 0 if no mapping of the desired type exists for the given key.",
        "short getShort(String key, short defaultValue)": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
        "short[] getShortArray(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "Size getSize(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "SizeF getSizeF(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "SparseArray getSparseParcelableArray(String key)": "This method was deprecated in API level 33. Use the type-safer getSparseParcelableArray(java.lang.String, java.lang.Class) starting from Android Build.VERSION_CODES#TIRAMISU.",
        "SparseArray getSparseParcelableArray(String key, Class clazz)": "Returns the value associated with the given key, or null if: No mapping of the desired type exists for the given key.",
        "ArrayList getStringArrayList(String key)": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
        "boolean hasFileDescriptors()": "Reports whether the bundle contains any parcelled file descriptors.",
        "void putAll(Bundle bundle)": "Inserts all mappings from the given Bundle into this Bundle.",
        "void putBinder(String key, IBinder value)": "Inserts an IBinder value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putBundle(String key, Bundle value)": "Inserts a Bundle value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putByte(String key, byte value)": "Inserts a byte value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putByteArray(String key, byte[] value)": "Inserts a byte array value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putChar(String key, char value)": "Inserts a char value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putCharArray(String key, char[] value)": "Inserts a char array value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putCharSequence(String key, CharSequence value)": "Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putCharSequenceArray(String key, CharSequence[] value)": "Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putCharSequenceArrayList(String key, ArrayList value)": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putFloat(String key, float value)": "Inserts a float value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putFloatArray(String key, float[] value)": "Inserts a float array value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putIntegerArrayList(String key, ArrayList value)": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putParcelable(String key, Parcelable value)": "Inserts a Parcelable value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putParcelableArray(String key, Parcelable[] value)": "Inserts an array of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putParcelableArrayList(String key, ArrayList value)": "Inserts a List of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putSerializable(String key, Serializable value)": "Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putShort(String key, short value)": "Inserts a short value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putShortArray(String key, short[] value)": "Inserts a short array value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putSize(String key, Size value)": "Inserts a Size value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putSizeF(String key, SizeF value)": "Inserts a SizeF value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putSparseParcelableArray(String key, SparseArray value)": "Inserts a SparceArray of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.",
        "void putStringArrayList(String key, ArrayList value)": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key.",
        "void readFromParcel(Parcel parcel)": "Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection.",
        "void remove(String key)": "Removes any entry with the given key from the mapping of this Bundle.",
        "void setClassLoader(ClassLoader loader)": "Changes the ClassLoader this Bundle uses when instantiating objects.",
        "String toString()": "Returns a string representation of the Bundle that may be suitable for debugging.",
        "void writeToParcel(Parcel parcel, int flags)": "Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection."
    },
    "super class": [
        "android.os.BaseBundle"
    ]
}
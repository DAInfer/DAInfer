{
    "class": "ConcurrentHashMap",
    "category": "Class",
    "methods": {
        "void clear()": "Removes all of the mappings from this map.",
        "V compute(K key, BiFunction remappingFunction)": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
        "V computeIfAbsent(K key, Function mappingFunction)": "If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null.",
        "V computeIfPresent(K key, BiFunction remappingFunction)": "If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.",
        "boolean contains(Object value)": "Legacy method testing if some key maps into the specified value in this table.",
        "boolean containsKey(Object key)": "Tests if the specified object is a key in this table.",
        "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
        "Enumeration elements()": "Returns an enumeration of the values in this table.",
        "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
        "boolean equals(Object o)": "Compares the specified object with this map for equality.",
        "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
        "void forEach(long parallelismThreshold, BiConsumer action)": "Performs the given action for each (key, value).",
        "void forEach(long parallelismThreshold, BiFunction transformer, Consumer action)": "Performs the given action for each non-null transformation of each (key, value).",
        "void forEachEntry(long parallelismThreshold, Consumer action)": "Performs the given action for each entry.",
        "void forEachEntry(long parallelismThreshold, Function, ? extends U transformer, Consumer action)": "Performs the given action for each non-null transformation of each entry.",
        "void forEachKey(long parallelismThreshold, Consumer action)": "Performs the given action for each key.",
        "void forEachKey(long parallelismThreshold, Function transformer, Consumer action)": "Performs the given action for each non-null transformation of each key.",
        "void forEachValue(long parallelismThreshold, Consumer action)": "Performs the given action for each value.",
        "void forEachValue(long parallelismThreshold, Function transformer, Consumer action)": "Performs the given action for each non-null transformation of each value.",
        "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
        "V getOrDefault(Object key, V defaultValue)": "Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.",
        "int hashCode()": "Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().",
        "boolean isEmpty()": "Returns true if this map contains no key-value mappings.",
        "Enumeration keys()": "Returns an enumeration of the keys in this table.",
        "ConcurrentHashMap.KeySetView keySet()": "Returns a Set view of the keys contained in this map.",
        "ConcurrentHashMap.KeySetView keySet(V mappedValue)": "Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)).",
        "long mappingCount()": "Returns the number of mappings.",
        "V merge(K key, V value, BiFunction remappingFunction)": "If the specified key is not already associated with a (non-null) value, associates it with the given value.",
        "ConcurrentHashMap.KeySetView newKeySet()": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
        "ConcurrentHashMap.KeySetView newKeySet(int initialCapacity)": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
        "V put(K key, V value)": "Maps the specified key to the specified value in this table.",
        "void putAll(Map m)": "Copies all of the mappings from the specified map to this one.",
        "V putIfAbsent(K key, V value)": "If the specified key is not already associated with a value, associate it with the given value.",
        "U reduce(long parallelismThreshold, BiFunction transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.",
        "Map.Entry reduceEntries(long parallelismThreshold, BiFunction, Map.Entry, ? extends Map.Entry reducer)": "Returns the result of accumulating all entries using the given reducer to combine values, or null if none.",
        "U reduceEntries(long parallelismThreshold, Function, ? extends U transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.",
        "double reduceEntriesToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
        "int reduceEntriesToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
        "long reduceEntriesToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
        "K reduceKeys(long parallelismThreshold, BiFunction reducer)": "Returns the result of accumulating all keys using the given reducer to combine values, or null if none.",
        "U reduceKeys(long parallelismThreshold, Function transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.",
        "double reduceKeysToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
        "int reduceKeysToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
        "long reduceKeysToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
        "double reduceToDouble(long parallelismThreshold, ToDoubleBiFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
        "int reduceToInt(long parallelismThreshold, ToIntBiFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
        "long reduceToLong(long parallelismThreshold, ToLongBiFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
        "V reduceValues(long parallelismThreshold, BiFunction reducer)": "Returns the result of accumulating all values using the given reducer to combine values, or null if none.",
        "U reduceValues(long parallelismThreshold, Function transformer, BiFunction reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.",
        "double reduceValuesToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
        "int reduceValuesToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
        "long reduceValuesToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
        "V remove(Object key)": "Removes the key (and its corresponding value) from this map.",
        "boolean remove(Object key, Object value)": "Removes the entry for a key only if currently mapped to a given value.",
        "V replace(K key, V value)": "Replaces the entry for a key only if currently mapped to some value.",
        "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for a key only if currently mapped to a given value.",
        "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
        "U search(long parallelismThreshold, BiFunction searchFunction)": "Returns a non-null result from applying the given search function on each (key, value), or null if none.",
        "U searchEntries(long parallelismThreshold, Function, ? extends U searchFunction)": "Returns a non-null result from applying the given search function on each entry, or null if none.",
        "U searchKeys(long parallelismThreshold, Function searchFunction)": "Returns a non-null result from applying the given search function on each key, or null if none.",
        "U searchValues(long parallelismThreshold, Function searchFunction)": "Returns a non-null result from applying the given search function on each value, or null if none.",
        "int size()": "Returns the number of key-value mappings in this map.",
        "String toString()": "Returns a string representation of this map.",
        "Collection values()": "Returns a Collection view of the values contained in this map."
    },
    "super class": [
        "java.util.AbstractMap"
    ]
}
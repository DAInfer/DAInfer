{
    "class": "Configuration",
    "category": "Class",
    "methods": {
        "void addDefaultResource(String name)": "Add a default resource.",
        "void addDeprecation(String key, String newKey)": "Adds the deprecated key to the global deprecation map when no custom message is provided.",
        "void addDeprecation(String key, String newKey, String customMessage)": "Adds the deprecated key to the global deprecation map.",
        "void addDeprecations(org.apache.hadoop.conf.Configuration.DeprecationDelta[] deltas)": "Adds a set of deprecated keys to the global deprecations.",
        "void addResource(Configuration conf)": "Add a configuration resource.",
        "void addResource(InputStream in)": "Add a configuration resource.",
        "void addResource(InputStream in, String name)": "Add a configuration resource.",
        "void addResource(Path file)": "Add a configuration resource.",
        "void addResource(String name)": "Add a configuration resource.",
        "void addResource(URL url)": "Add a configuration resource.",
        "void clear()": "Clears all keys from the configuration.",
        "void dumpConfiguration(Configuration config, Writer out)": "Writes out all the parameters and their properties (final and resource) to the given Writer The format of the output would be { \"properties\" : [ {key1, value1, key1.isFinal, key1.resource}, {key2, value2, key2.isFinal, key2.resource}...",
        "void dumpDeprecatedKeys()": "",
        "String get(String name)": "Get the value of the name property, null if no such property exists.",
        "String get(String name, String defaultValue)": "Get the value of the name.",
        "boolean getBoolean(String name, boolean defaultValue)": "Get the value of the name property as a boolean.",
        "Class getClass(String name, Class defaultValue)": "Get the value of the name property as a Class.",
        "Class getClass(String name, Class defaultValue, Class xface)": "Get the value of the name property as a Class implementing the interface specified by xface.",
        "Class getClassByName(String name)": "Load a class by name.",
        "Class getClassByNameOrNull(String name)": "Load a class by name, returning null rather than throwing an exception if it couldn't be loaded.",
        "Class[] getClasses(String name, Class... defaultValue)": "Get the value of the name property as an array of Class.",
        "ClassLoader getClassLoader()": "Get the ClassLoader for this job.",
        "InputStream getConfResourceAsInputStream(String name)": "Get an input stream attached to the configuration resource with the given name.",
        "Reader getConfResourceAsReader(String name)": "Get a Reader attached to the configuration resource with the given name.",
        "double getDouble(String name, double defaultValue)": "Get the value of the name property as a double.",
        "T getEnum(String name, T defaultValue)": "Return value matching this enumerated type.",
        "File getFile(String dirsProp, String path)": "Get a local file name under a directory named in dirsProp with the given path.",
        "Set getFinalParameters()": "Get the set of parameters marked final.",
        "float getFloat(String name, float defaultValue)": "Get the value of the name property as a float.",
        "List getInstances(String name, Class xface)": "Get the value of the name property as a List of objects implementing the interface specified by xface.",
        "int getInt(String name, int defaultValue)": "Get the value of the name property as an int.",
        "int[] getInts(String name)": "Get the value of the name property as a set of comma-delimited int values.",
        "Path getLocalPath(String dirsProp, String path)": "Get a local file under a directory named by dirsProp with the given path.",
        "long getLong(String name, long defaultValue)": "Get the value of the name property as a long.",
        "long getLongBytes(String name, long defaultValue)": "Get the value of the name property as a long or human readable format.",
        "char[] getPassword(String name)": "Get the value for a known password configuration element.",
        "char[] getPasswordFromConfig(String name)": "Fallback to clear text passwords in configuration.",
        "char[] getPasswordFromCredentialProviders(String name)": "Try and resolve the provided element name as a credential provider alias.",
        "Pattern getPattern(String name, Pattern defaultValue)": "Get the value of the name property as a Pattern.",
        "String[] getPropertySources(String name)": "Gets information about why a property was set.",
        "Properties getProps()": "",
        "org.apache.hadoop.conf.Configuration.IntegerRanges getRange(String name, String defaultValue)": "Parse the given attribute as a set of integer ranges",
        "String getRaw(String name)": "Get the value of the name property, without doing variable expansion.If the key is deprecated, it returns the value of the first key which replaces the deprecated key and is not null.",
        "URL getResource(String name)": "Get the URL for the named resource.",
        "InetSocketAddress getSocketAddr(String name, String defaultAddress, int defaultPort)": "Get the socket address for name property as a InetSocketAddress.",
        "InetSocketAddress getSocketAddr(String hostProperty, String addressProperty, String defaultAddressValue, int defaultPort)": "Get the socket address for hostProperty as a InetSocketAddress.",
        "Collection getStringCollection(String name)": "Get the comma delimited values of the name property as a collection of Strings.",
        "String[] getStrings(String name)": "Get the comma delimited values of the name property as an array of Strings.",
        "String[] getStrings(String name, String... defaultValue)": "Get the comma delimited values of the name property as an array of Strings.",
        "long getTimeDuration(String name, long defaultValue, TimeUnit unit)": "Return time duration in the given time unit.",
        "String getTrimmed(String name)": "Get the value of the name property as a trimmed String, null if no such property exists.",
        "String getTrimmed(String name, String defaultValue)": "Get the value of the name property as a trimmed String, defaultValue if no such property exists.",
        "Collection getTrimmedStringCollection(String name)": "Get the comma delimited values of the name property as a collection of Strings, trimmed of the leading and trailing whitespace.",
        "String[] getTrimmedStrings(String name)": "Get the comma delimited values of the name property as an array of Strings, trimmed of the leading and trailing whitespace.",
        "String[] getTrimmedStrings(String name, String... defaultValue)": "Get the comma delimited values of the name property as an array of Strings, trimmed of the leading and trailing whitespace.",
        "Map getValByRegex(String regex)": "get keys matching the the regex",
        "boolean hasWarnedDeprecation(String name)": "Returns whether or not a deprecated name has been warned.",
        "boolean isDeprecated(String key)": "checks whether the given key is deprecated.",
        "Iterator iterator()": "Get an Iterator to go through the list of String key-value pairs in the configuration.",
        "void main(String[] args)": "For debugging.",
        "boolean onlyKeyExists(String name)": "Return existence of the name property, but only for names which have no valid value, usually non-existent or commented out in XML.",
        "void readFields(DataInput in)": "Deserialize the fields of this object from in.",
        "void reloadConfiguration()": "Reload configuration from previously added resources.",
        "void set(String name, String value)": "Set the value of the name property.",
        "void set(String name, String value, String source)": "Set the value of the name property.",
        "void setAllowNullValueProperties(boolean val)": "Set Configuration to allow keys without values during setup.",
        "void setBoolean(String name, boolean value)": "Set the value of the name property to a boolean.",
        "void setBooleanIfUnset(String name, boolean value)": "Set the given property, if it is currently unset.",
        "void setClass(String name, Class theClass, Class xface)": "Set the value of the name property to the name of a theClass implementing the given interface xface.",
        "void setClassLoader(ClassLoader classLoader)": "Set the class loader that will be used to load the various objects.",
        "void setDeprecatedProperties()": "Sets all deprecated properties that are not currently set but have a corresponding new property that is set.",
        "void setDouble(String name, double value)": "Set the value of the name property to a double.",
        "void setEnum(String name, T value)": "Set the value of the name property to the given type.",
        "void setFloat(String name, float value)": "Set the value of the name property to a float.",
        "void setIfUnset(String name, String value)": "Sets a property if it is currently unset.",
        "void setInt(String name, int value)": "Set the value of the name property to an int.",
        "void setLong(String name, long value)": "Set the value of the name property to a long.",
        "void setPattern(String name, Pattern pattern)": "Set the given property to Pattern.",
        "void setQuietMode(boolean quietmode)": "Set the quietness-mode.",
        "void setSocketAddr(String name, InetSocketAddress addr)": "Set the socket address for the name property as a host:port.",
        "void setStrings(String name, String... values)": "Set the array of string values for the name property as as comma delimited values.",
        "void setTimeDuration(String name, long value, TimeUnit unit)": "Set the value of name to the given time duration.",
        "int size()": "Return the number of keys in the configuration.",
        "String toString()": "",
        "void unset(String name)": "Unset a previously set property.",
        "InetSocketAddress updateConnectAddr(String name, InetSocketAddress addr)": "Set the socket address a client can use to connect for the name property as a host:port.",
        "InetSocketAddress updateConnectAddr(String hostProperty, String addressProperty, String defaultAddressValue, InetSocketAddress addr)": "Set the socket address a client can use to connect for the name property as a host:port.",
        "void write(DataOutput out)": "Serialize the fields of this object to out.",
        "void writeXml(OutputStream out)": "Write out the non-default properties in this configuration to the given OutputStream using UTF-8 encoding.",
        "void writeXml(Writer out)": "Write out the non-default properties in this configuration to the given Writer."
    },
    "super class": [
        "java.lang.Iterable"
    ]
}
{
    "class": "ObjectNode",
    "category": "Class",
    "methods": {
        "JsonToken asToken()": "Method that can be used for efficient type detection when using stream abstraction for traversing nodes.",
        "boolean equals(Object o)": "Equality for node objects is defined as full (deep) value equality.",
        "ObjectNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
        "List findParents(String fieldName, List foundSoFar)": "",
        "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
        "List findValues(String fieldName, List foundSoFar)": "",
        "List findValuesAsText(String fieldName, List foundSoFar)": "",
        "JsonNode get(int index)": "Method for accessing value of the specified element of an array node.",
        "JsonNode get(String fieldName)": "Method for accessing value of the specified field of an object node.",
        "Iterator getElements()": "Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node.",
        "Iterator getFieldNames()": "Method for accessing names of all fields for this Node, iff this node is a JSON Object node.",
        "Iterator getFields()": "Method to use for accessing all fields (with both names and values) of this JSON Object.",
        "int hashCode()": "",
        "boolean isObject()": "",
        "JsonNode path(int index)": "This method is similar to JsonNode.get(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a \"missing node\" (node that returns true for JsonNode.isMissingNode()) will be returned.",
        "JsonNode path(String fieldName)": "This method is similar to JsonNode.get(String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a \"missing node\" (node that returns true for JsonNode.isMissingNode()) will be returned.",
        "void put(String fieldName, BigDecimal v)": "Method for setting value of a field to specified numeric value.",
        "void put(String fieldName, boolean v)": "Method for setting value of a field to specified String value.",
        "void put(String fieldName, Boolean value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
        "void put(String fieldName, byte[] v)": "Method for setting value of a field to specified binary value",
        "void put(String fieldName, double v)": "Method for setting value of a field to specified numeric value.",
        "void put(String fieldName, Double value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
        "void put(String fieldName, float v)": "Method for setting value of a field to specified numeric value.",
        "void put(String fieldName, Float value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
        "void put(String fieldName, int v)": "Method for setting value of a field to specified numeric value.",
        "void put(String fieldName, Integer value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
        "JsonNode put(String fieldName, JsonNode value)": "Method that will set specified field, replacing old value, if any.",
        "void put(String fieldName, long v)": "Method for setting value of a field to specified numeric value.",
        "void put(String fieldName, Long value)": "Alternative method that we need to avoid bumping into NPE issues with auto-unboxing.",
        "void put(String fieldName, String v)": "Method for setting value of a field to specified String value.",
        "JsonNode putAll(Map properties)": "Method for adding given properties to this object node, overriding any existing values for those properties.",
        "JsonNode putAll(ObjectNode other)": "Method for adding all properties of the given Object, overriding any existing values for those properties.",
        "ArrayNode putArray(String fieldName)": "Method that will construct an ArrayNode and add it as a field of this ObjectNode, replacing old value, if any.",
        "void putContentsTo(Map dst)": "",
        "void putNull(String fieldName)": "",
        "ObjectNode putObject(String fieldName)": "Method that will construct an ObjectNode and add it as a field of this ObjectNode, replacing old value, if any.",
        "void putPOJO(String fieldName, Object pojo)": "",
        "ObjectNode remove(Collection fieldNames)": "Method for removing specified field properties out of this ObjectNode.",
        "JsonNode remove(String fieldName)": "Method for removing field entry from this ObjectNode.",
        "ObjectNode removeAll()": "Method for removing all field properties, such that this ObjectNode will contain no properties after call.",
        "ObjectNode retain(Collection fieldNames)": "Method for removing all field properties out of this ObjectNode except for ones specified in argument.",
        "ObjectNode retain(String... fieldNames)": "Method for removing all field properties out of this ObjectNode except for ones specified in argument.",
        "void serialize(JsonGenerator jg, SerializerProvider provider)": "Method that can be called to serialize this node and all of its descendants using specified JSON generator.",
        "void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer)": "Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.",
        "int size()": "Method that returns number of child nodes this node contains: for Array nodes, number of child elements, for Object nodes, number of fields, and for all other nodes 0.",
        "String toString()": "Note: marked as abstract to ensure all implementation classes define it properly.",
        "ObjectNode with(String propertyName)": "Method that can be called on object nodes, to access a property that has object value; or if no such property exists, to create and return such object node."
    },
    "super class": [
        "org.codehaus.jackson.node.ContainerNode",
        "org.codehaus.jackson.node.BaseJsonNode",
        "org.codehaus.jackson.JsonNode"
    ]
}
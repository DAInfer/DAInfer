{
    "class": "JComponent",
    "category": "Class",
    "methods": {
        "void addAncestorListener(AncestorListener listener)": "Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible.",
        "void addNotify()": "Notifies this component that it now has a parent component.",
        "void addVetoableChangeListener(VetoableChangeListener listener)": "Adds a VetoableChangeListener to the listener list.",
        "void computeVisibleRect(Rectangle visibleRect)": "Returns the Component's \"visible rect rectangle\" - the intersection of the visible rectangles for this component and all of its ancestors.",
        "boolean contains(int x, int y)": "Gives the UI delegate an opportunity to define the precise shape of this component for the sake of mouse processing.",
        "JToolTip createToolTip()": "Returns the instance of JToolTip that should be used to display the tooltip.",
        "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
        "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
        "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
        "void fireVetoableChange(String propertyName, Object oldValue, Object newValue)": "Supports reporting constrained property changes.",
        "ActionListener getActionForKeyStroke(KeyStroke aKeyStroke)": "Returns the object that will perform the action registered for a given keystroke.",
        "ActionMap getActionMap()": "Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding.",
        "float getAlignmentX()": "Overrides Container.getAlignmentX to return the vertical alignment.",
        "float getAlignmentY()": "Overrides Container.getAlignmentY to return the horizontal alignment.",
        "AncestorListener[] getAncestorListeners()": "Returns an array of all the ancestor listeners registered on this component.",
        "boolean getAutoscrolls()": "Gets the autoscrolls property.",
        "int getBaseline(int width, int height)": "Returns the baseline.",
        "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
        "Border getBorder()": "Returns the border of this component or null if no border is currently set.",
        "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and returns rv.",
        "Object getClientProperty(Object key)": "Returns the value of the property with the specified key.",
        "Graphics getComponentGraphics(Graphics g)": "Returns the graphics object used to paint this component.",
        "JPopupMenu getComponentPopupMenu()": "Returns JPopupMenu that assigned for this component.",
        "int getConditionForKeyStroke(KeyStroke aKeyStroke)": "Returns the condition that determines whether a registered action occurs in response to the specified keystroke.",
        "int getDebugGraphicsOptions()": "Returns the state of graphics debugging.",
        "Locale getDefaultLocale()": "Returns the default locale used to initialize each JComponent's locale property upon creation.",
        "FontMetrics getFontMetrics(Font font)": "Gets the FontMetrics for the specified Font.",
        "Graphics getGraphics()": "Returns this component's graphics context, which lets you draw on a component.",
        "int getHeight()": "Returns the current height of this component.",
        "boolean getInheritsPopupMenu()": "Returns true if the JPopupMenu should be inherited from the parent.",
        "InputMap getInputMap()": "Returns the InputMap that is used when the component has focus.",
        "InputMap getInputMap(int condition)": "Returns the InputMap that is used during condition.",
        "InputVerifier getInputVerifier()": "Returns the input verifier for this component.",
        "Insets getInsets()": "If a border has been set on this component, returns the border's insets; otherwise calls super.getInsets.",
        "Insets getInsets(Insets insets)": "Returns an Insets object containing this component's inset values.",
        "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this JComponent.",
        "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and returns rv.",
        "Dimension getMaximumSize()": "If the maximum size has been set to a non-null value just returns it.",
        "Dimension getMinimumSize()": "If the minimum size has been set to a non-null value just returns it.",
        "Point getPopupLocation(MouseEvent event)": "Returns the preferred location to display the popup menu in this component's coordinate system.",
        "Dimension getPreferredSize()": "If the preferredSize has been set to a non-null value just returns it.",
        "KeyStroke[] getRegisteredKeyStrokes()": "Returns the KeyStrokes that will initiate registered actions.",
        "JRootPane getRootPane()": "Returns the JRootPane ancestor for this component.",
        "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and returns rv.",
        "Point getToolTipLocation(MouseEvent event)": "Returns the tooltip location in this component's coordinate system.",
        "String getToolTipText()": "Returns the tooltip string that has been set with setToolTipText.",
        "String getToolTipText(MouseEvent event)": "Returns the string to be used as the tooltip for event.",
        "Container getTopLevelAncestor()": "Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.",
        "TransferHandler getTransferHandler()": "Gets the transferHandler property.",
        "String getUIClassID()": "Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component.",
        "boolean getVerifyInputWhenFocusTarget()": "Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.",
        "VetoableChangeListener[] getVetoableChangeListeners()": "Returns an array of all the vetoable change listeners registered on this component.",
        "Rectangle getVisibleRect()": "Returns the Component's \"visible rectangle\" - the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.",
        "int getWidth()": "Returns the current width of this component.",
        "int getX()": "Returns the current x coordinate of the component's origin.",
        "int getY()": "Returns the current y coordinate of the component's origin.",
        "void grabFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
        "boolean isDoubleBuffered()": "Returns whether this component should use a buffer to paint.",
        "boolean isLightweightComponent(Component c)": "Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.",
        "boolean isOpaque()": "Returns true if this component is completely opaque.",
        "boolean isOptimizedDrawingEnabled()": "Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap.",
        "boolean isPaintingForPrint()": "Returns true if the current painting operation on this component is part of a print operation.",
        "boolean isPaintingOrigin()": "Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors.",
        "boolean isPaintingTile()": "Returns true if the component is currently painting a tile.",
        "boolean isRequestFocusEnabled()": "Returns true if this JComponent should get focus; otherwise returns false.",
        "boolean isValidateRoot()": "If this method returns true, revalidate calls by descendants of this component will cause the entire tree beginning with this root to be validated.",
        "void paint(Graphics g)": "Invoked by Swing to draw components.",
        "void paintBorder(Graphics g)": "Paints the component's border.",
        "void paintChildren(Graphics g)": "Paints this component's children.",
        "void paintComponent(Graphics g)": "Calls the UI delegate's paint method, if the UI delegate is non-null.",
        "void paintImmediately(int x, int y, int w, int h)": "Paints the specified region in this component and all of its descendants that overlap the region, immediately.",
        "void paintImmediately(Rectangle r)": "Paints the specified region now.",
        "String paramString()": "Returns a string representation of this JComponent.",
        "void print(Graphics g)": "Invoke this method to print the component to the specified Graphics.",
        "void printAll(Graphics g)": "Invoke this method to print the component.",
        "void printBorder(Graphics g)": "Prints the component's border.",
        "void printChildren(Graphics g)": "Prints this component's children.",
        "void printComponent(Graphics g)": "This is invoked during a printing operation.",
        "void processComponentKeyEvent(KeyEvent e)": "Processes any key events that the component itself recognizes.",
        "boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)": "Invoked to process the key bindings for ks as the result of the KeyEvent e.",
        "void processKeyEvent(KeyEvent e)": "Overrides processKeyEvent to process events.",
        "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects, refer to Component.processMouseEvent(MouseEvent) for a complete description of this method.",
        "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.",
        "void putClientProperty(Object key, Object value)": "Adds an arbitrary key/value \"client property\" to this component.",
        "void registerKeyboardAction(ActionListener anAction, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
        "void registerKeyboardAction(ActionListener anAction, String aCommand, KeyStroke aKeyStroke, int aCondition)": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
        "void removeAncestorListener(AncestorListener listener)": "Unregisters listener so that it will no longer receive AncestorEvents.",
        "void removeNotify()": "Notifies this component that it no longer has a parent component.",
        "void removeVetoableChangeListener(VetoableChangeListener listener)": "Removes a VetoableChangeListener from the listener list.",
        "void repaint(long tm, int x, int y, int width, int height)": "Adds the specified region to the dirty region list if the component is showing.",
        "void repaint(Rectangle r)": "Adds the specified region to the dirty region list if the component is showing.",
        "void requestFocus()": "Requests that this Component gets the input focus.",
        "boolean requestFocus(boolean temporary)": "Requests that this Component gets the input focus.",
        "boolean requestFocusInWindow()": "Requests that this Component gets the input focus.",
        "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component gets the input focus.",
        "void resetKeyboardActions()": "Unregisters all the bindings in the first tier InputMaps and ActionMap.",
        "void revalidate()": "Supports deferred automatic layout.",
        "void scrollRectToVisible(Rectangle aRect)": "Forwards the scrollRectToVisible() message to the JComponent's parent.",
        "void setActionMap(ActionMap am)": "Sets the ActionMap to am.",
        "void setAlignmentX(float alignmentX)": "Sets the the vertical alignment.",
        "void setAlignmentY(float alignmentY)": "Sets the the horizontal alignment.",
        "void setAutoscrolls(boolean autoscrolls)": "Sets the autoscrolls property.",
        "void setBackground(Color bg)": "Sets the background color of this component.",
        "void setBorder(Border border)": "Sets the border of this component.",
        "void setComponentPopupMenu(JPopupMenu popup)": "Sets the JPopupMenu for this JComponent.",
        "void setDebugGraphicsOptions(int debugOptions)": "Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.",
        "void setDefaultLocale(Locale l)": "Sets the default locale used to initialize each JComponent's locale property upon creation.",
        "void setDoubleBuffered(boolean aFlag)": "Sets whether this component should use a buffer to paint.",
        "void setEnabled(boolean enabled)": "Sets whether or not this component is enabled.",
        "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
        "void setFont(Font font)": "Sets the font for this component.",
        "void setForeground(Color fg)": "Sets the foreground color of this component.",
        "void setInheritsPopupMenu(boolean value)": "Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it.",
        "void setInputMap(int condition, InputMap map)": "Sets the InputMap to use under the condition condition to map.",
        "void setInputVerifier(InputVerifier inputVerifier)": "Sets the input verifier for this component.",
        "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
        "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
        "void setOpaque(boolean isOpaque)": "If true the component paints every pixel within its bounds.",
        "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component.",
        "void setRequestFocusEnabled(boolean requestFocusEnabled)": "Provides a hint as to whether or not this JComponent should get focus.",
        "void setToolTipText(String text)": "Registers the text to display in a tool tip.",
        "void setTransferHandler(TransferHandler newHandler)": "Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop.",
        "void setUI(ComponentUI newUI)": "Sets the look and feel delegate for this component.",
        "void setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget)": "Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.",
        "void setVisible(boolean aFlag)": "Makes the component visible or invisible.",
        "void unregisterKeyboardAction(KeyStroke aKeyStroke)": "This method is now obsolete.",
        "void update(Graphics g)": "Calls paint.",
        "void updateUI()": "Resets the UI property to a value from the current look and feel."
    },
    "super class": [
        "java.awt.Container",
        "java.awt.Component"
    ]
}
{
    "class": "AbstractVector",
    "category": "Class",
    "methods": {
        "double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map)": "Aggregates a vector by applying a mapping function fm(x) to every component and aggregating the results with an aggregating function fa(x, y).",
        "double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner)": "Generalized inner product - take two vectors, iterate over them both, using the combiner to combine together (and possibly map in some way) each pair of values, which are then aggregated with the previous accumulated value in the combiner.",
        "Iterable all()": "",
        "String asFormatString()": "",
        "Vector assign(double value)": "Assign the value to all elements of the receiver",
        "Vector assign(double[] values)": "Assign the values to the receiver",
        "Vector assign(DoubleDoubleFunction f, double y)": "Apply the function to each element of the receiver, using the y value as the second argument of the DoubleDoubleFunction",
        "Vector assign(DoubleFunction f)": "Apply the function to each element of the receiver",
        "Vector assign(Vector other)": "Assign the other vector values to the receiver",
        "Vector assign(Vector other, DoubleDoubleFunction function)": "Apply the function to each element of the receiver and the corresponding element of the other argument",
        "Vector clone()": "Return a copy of the recipient",
        "Vector createOptimizedCopy()": "Copy the current vector in the most optimum fashion.",
        "Matrix cross(Vector other)": "Return the cross product of the receiver and the other vector",
        "Vector divide(double x)": "Return a new vector containing the values of the recipient divided by the argument",
        "double dot(Vector x)": "Return the dot product of the recipient and the argument",
        "double dotSelf()": "",
        "boolean equals(Object o)": "Determines whether this Vector represents the same logical vector as another object.",
        "double get(int index)": "Return the value at the given index",
        "double getDistanceSquared(Vector that)": "Get the square of the distance between this vector and the other vector.",
        "Vector.Element getElement(int index)": "Return an object of Vector.Element representing an element of this Vector.",
        "double getLengthSquared()": "Return the sum of squares of all elements in the vector.",
        "int getNumNonZeroElements()": "Return the number of non zero elements in the vector.",
        "int hashCode()": "",
        "void incrementQuick(int index, double increment)": "Increment the value at the given index by the given value.",
        "void invalidateCachedLength()": "Invalidates the length cache.",
        "Iterator iterateNonZero()": "Iterates over all non-zero elements.",
        "Iterator iterator()": "Iterates over all elements",
        "Vector logNormalize()": "Return a new vector containing the log(1 + entry)/ L_2 norm values of the recipient",
        "Vector logNormalize(double power)": "Return a new Vector with a normalized value calculated as log_power(1 + entry)/ L_power norm.",
        "Vector logNormalize(double power, double normLength)": "",
        "Matrix matrixLike(int rows, int columns)": "Subclasses must override to return an appropriately sparse or dense result",
        "double maxValue()": "",
        "int maxValueIndex()": "",
        "Vector minus(Vector that)": "Return a new vector containing the element by element difference of the recipient and the argument",
        "double minValue()": "",
        "int minValueIndex()": "",
        "Iterable nonZeroes()": "",
        "double norm(double power)": "Return the k-norm of the vector.",
        "Vector normalize()": "Return a new vector containing the normalized (L_2 norm) values of the recipient",
        "Vector normalize(double power)": "Return a new Vector containing the normalized (L_power norm) values of the recipient.",
        "Vector plus(double x)": "Return a new vector containing the sum of each value of the recipient and the argument",
        "Vector plus(Vector that)": "Return a new vector containing the element by element sum of the recipient and the argument",
        "void set(int index, double value)": "Set the value at the given index",
        "int size()": "Return the cardinality of the recipient (the maximum number of values)",
        "String sparseVectorToString()": "toString() implementation for sparse vectors via nonZeroes() method",
        "Vector times(double x)": "Return a new vector containing the product of each value of the recipient and the argument",
        "Vector times(Vector that)": "Return a new vector containing the element-wise product of the recipient and the argument",
        "String toString()": "",
        "String toString(String[] dictionary)": "",
        "Vector viewPart(int offset, int length)": "Return a new vector containing the subset of the recipient",
        "double zSum()": "Return the sum of all the elements of the receiver"
    },
    "super class": []
}
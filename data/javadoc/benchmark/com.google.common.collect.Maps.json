{
    "class": "Maps",
    "category": "Class",
    "methods": {
        "Converter asConverter(BiMap bimap)": "Returns a Converter that converts values using bimap.get(), and whose inverse view converts values using bimap.inverse().get().",
        "NavigableMap asMap(NavigableSet set, Function function)": "Returns a view of the navigable set as a map, mapping keys from the set according to the specified function.",
        "Map asMap(Set set, Function function)": "Returns a live Map view whose keys are the contents of set and whose values are computed on demand using function.",
        "SortedMap asMap(SortedSet set, Function function)": "Returns a view of the sorted set as a map, mapping keys from the set according to the specified function.",
        "MapDifference difference(Map left, Map right)": "Computes the difference between two maps.",
        "MapDifference difference(Map left, Map right, Equivalence valueEquivalence)": "Computes the difference between two maps.",
        "SortedMapDifference difference(SortedMap left, Map right)": "Computes the difference between two sorted maps, using the comparator of the left map, or Ordering.natural() if the left map uses the natural ordering of its elements.",
        "BiMap filterEntries(BiMap unfiltered, Predicate entryPredicate)": "Returns a bimap containing the mappings in unfiltered that satisfy a predicate.",
        "Map filterEntries(Map unfiltered, Predicate entryPredicate)": "Returns a map containing the mappings in unfiltered that satisfy a predicate.",
        "NavigableMap filterEntries(NavigableMap unfiltered, Predicate entryPredicate)": "Returns a sorted map containing the mappings in unfiltered that satisfy a predicate.",
        "SortedMap filterEntries(SortedMap unfiltered, Predicate entryPredicate)": "Returns a sorted map containing the mappings in unfiltered that satisfy a predicate.",
        "BiMap filterKeys(BiMap unfiltered, Predicate keyPredicate)": "Returns a bimap containing the mappings in unfiltered whose keys satisfy a predicate.",
        "Map filterKeys(Map unfiltered, Predicate keyPredicate)": "Returns a map containing the mappings in unfiltered whose keys satisfy a predicate.",
        "NavigableMap filterKeys(NavigableMap unfiltered, Predicate keyPredicate)": "Returns a navigable map containing the mappings in unfiltered whose keys satisfy a predicate.",
        "SortedMap filterKeys(SortedMap unfiltered, Predicate keyPredicate)": "Returns a sorted map containing the mappings in unfiltered whose keys satisfy a predicate.",
        "BiMap filterValues(BiMap unfiltered, Predicate valuePredicate)": "Returns a bimap containing the mappings in unfiltered whose values satisfy a predicate.",
        "Map filterValues(Map unfiltered, Predicate valuePredicate)": "Returns a map containing the mappings in unfiltered whose values satisfy a predicate.",
        "NavigableMap filterValues(NavigableMap unfiltered, Predicate valuePredicate)": "Returns a navigable map containing the mappings in unfiltered whose values satisfy a predicate.",
        "SortedMap filterValues(SortedMap unfiltered, Predicate valuePredicate)": "Returns a sorted map containing the mappings in unfiltered whose values satisfy a predicate.",
        "ImmutableMap fromProperties(Properties properties)": "Creates an ImmutableMap<String, String> from a Properties instance.",
        "Map.Entry immutableEntry(K key, V value)": "Returns an immutable map entry with the specified key and value.",
        "ImmutableMap immutableEnumMap(Map map)": "Returns an immutable map instance containing the given entries.",
        "ConcurrentMap newConcurrentMap()": "Returns a general-purpose instance of ConcurrentMap, which supports all optional operations of the ConcurrentMap interface.",
        "EnumMap newEnumMap(Class type)": "Creates an EnumMap instance.",
        "EnumMap newEnumMap(Map map)": "Creates an EnumMap with the same mappings as the specified map.",
        "HashMap newHashMap()": "Creates a mutable, empty HashMap instance.",
        "HashMap newHashMap(Map map)": "Creates a mutable HashMap instance with the same mappings as the specified map.",
        "HashMap newHashMapWithExpectedSize(int expectedSize)": "Creates a HashMap instance, with a high enough \"initial capacity\" that it should hold expectedSize elements without growth.",
        "IdentityHashMap newIdentityHashMap()": "Creates an IdentityHashMap instance.",
        "LinkedHashMap newLinkedHashMap()": "Creates a mutable, empty, insertion-ordered LinkedHashMap instance.",
        "LinkedHashMap newLinkedHashMap(Map map)": "Creates a mutable, insertion-ordered LinkedHashMap instance with the same mappings as the specified map.",
        "LinkedHashMap newLinkedHashMapWithExpectedSize(int expectedSize)": "Creates a LinkedHashMap instance, with a high enough \"initial capacity\" that it should hold expectedSize elements without growth.",
        "TreeMap newTreeMap()": "Creates a mutable, empty TreeMap instance using the natural ordering of its elements.",
        "TreeMap newTreeMap(Comparator comparator)": "Creates a mutable, empty TreeMap instance using the given comparator.",
        "TreeMap newTreeMap(SortedMap map)": "Creates a mutable TreeMap instance with the same mappings as the specified map and using the same ordering as the specified map.",
        "BiMap synchronizedBiMap(BiMap bimap)": "Returns a synchronized (thread-safe) bimap backed by the specified bimap.",
        "NavigableMap synchronizedNavigableMap(NavigableMap navigableMap)": "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map.",
        "ImmutableMap toMap(Iterable keys, Function valueFunction)": "Returns an immutable map whose keys are the distinct elements of keys and whose value for each key was computed by valueFunction.",
        "ImmutableMap toMap(Iterator keys, Function valueFunction)": "Returns an immutable map whose keys are the distinct elements of keys and whose value for each key was computed by valueFunction.",
        "Map transformEntries(Map fromMap, Maps.EntryTransformer transformer)": "Returns a view of a map whose values are derived from the original map's entries.",
        "NavigableMap transformEntries(NavigableMap fromMap, Maps.EntryTransformer transformer)": "Returns a view of a navigable map whose values are derived from the original navigable map's entries.",
        "SortedMap transformEntries(SortedMap fromMap, Maps.EntryTransformer transformer)": "Returns a view of a sorted map whose values are derived from the original sorted map's entries.",
        "Map transformValues(Map fromMap, Function function)": "Returns a view of a map where each value is transformed by a function.",
        "NavigableMap transformValues(NavigableMap fromMap, Function function)": "Returns a view of a navigable map where each value is transformed by a function.",
        "SortedMap transformValues(SortedMap fromMap, Function function)": "Returns a view of a sorted map where each value is transformed by a function.",
        "ImmutableMap uniqueIndex(Iterable values, Function keyFunction)": "Returns a map with the given values, indexed by keys derived from those values.",
        "ImmutableMap uniqueIndex(Iterator values, Function keyFunction)": "Returns a map with the given values, indexed by keys derived from those values.",
        "BiMap unmodifiableBiMap(BiMap bimap)": "Returns an unmodifiable view of the specified bimap.",
        "NavigableMap unmodifiableNavigableMap(NavigableMap map)": "Returns an unmodifiable view of the specified navigable map."
    },
    "super class": [
    ]
}
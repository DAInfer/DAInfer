{
    "class": "Handler",
    "category": "class",
    "methods": {
        "Handler createAsync(Looper looper, Handler.Callback callback)": "Create a new Handler whose posted messages and runnables are not subject to synchronization barriers such as display vsync.",
        "Handler createAsync(Looper looper)": "Create a new Handler whose posted messages and runnables are not subject to synchronization barriers such as display vsync.",
        "void dispatchMessage(Message msg)": "Handle system messages here.",
        "void dump(Printer pw, String prefix)": "void dump(Printer pw, String prefix)",
        "Looper getLooper()": "Looper getLooper()",
        "String getMessageName(Message message)": "Returns a string representing the name of the specified message.",
        "void handleMessage(Message msg)": "Subclasses must implement this to receive messages.",
        "boolean hasCallbacks(Runnable r)": "Check if there are any pending posts of messages with callback r in the message queue.",
        "boolean hasMessages(int what)": "Check if there are any pending posts of messages with code 'what' in the message queue.",
        "boolean hasMessages(int what, Object object)": "Check if there are any pending posts of messages with code 'what' and whose obj is 'object' in the message queue.",
        "Message obtainMessage(int what, Object obj)": "Same as obtainMessage(), except that it also sets the what and obj members of the returned Message.",
        "Message obtainMessage()": "Returns a new Message from the global message pool.",
        "Message obtainMessage(int what, int arg1, int arg2)": "Same as obtainMessage(), except that it also sets the what, arg1 and arg2 members of the returned Message.",
        "Message obtainMessage(int what, int arg1, int arg2, Object obj)": "Same as obtainMessage(), except that it also sets the what, obj, arg1, and arg2 values on the returned Message.",
        "Message obtainMessage(int what)": "Same as obtainMessage(), except that it also sets the what member of the returned Message.",
        "boolean post(Runnable r)": "Causes the Runnable r to be added to the message queue.",
        "boolean postAtFrontOfQueue(Runnable r)": "Posts a message to an object that implements Runnable.",
        "boolean postAtTime(Runnable r, long uptimeMillis)": "Causes the Runnable r to be added to the message queue, to be run at a specific time given by uptimeMillis.",
        "boolean postAtTime(Runnable r, Object token, long uptimeMillis)": "Causes the Runnable r to be added to the message queue, to be run at a specific time given by uptimeMillis.",
        "boolean postDelayed(Runnable r, long delayMillis)": "Causes the Runnable r to be added to the message queue, to be run after the specified amount of time elapses.",
        "boolean postDelayed(Runnable r, Object token, long delayMillis)": "Causes the Runnable r to be added to the message queue, to be run after the specified amount of time elapses.",
        "void removeCallbacks(Runnable r)": "Remove any pending posts of Runnable r that are in the message queue.",
        "void removeCallbacks(Runnable r, Object token)": "Remove any pending posts of Runnable r with Object token that are in the message queue.",
        "void removeCallbacksAndMessages(Object token)": "Remove any pending posts of callbacks and sent messages whose obj is token.",
        "void removeMessages(int what)": "Remove any pending posts of messages with code 'what' that are in the message queue.",
        "void removeMessages(int what, Object object)": "Remove any pending posts of messages with code 'what' and whose obj is 'object' that are in the message queue.",
        "boolean sendEmptyMessage(int what)": "Sends a Message containing only the what value.",
        "boolean sendEmptyMessageAtTime(int what, long uptimeMillis)": "Sends a Message containing only the what value, to be delivered at a specific time.",
        "boolean sendEmptyMessageDelayed(int what, long delayMillis)": "Sends a Message containing only the what value, to be delivered after the specified amount of time elapses.",
        "boolean sendMessage(Message msg)": "Pushes a message onto the end of the message queue after all pending messages before the current time.",
        "boolean sendMessageAtFrontOfQueue(Message msg)": "Enqueue a message at the front of the message queue, to be processed on the next iteration of the message loop.",
        "boolean sendMessageAtTime(Message msg, long uptimeMillis)": "Enqueue a message into the message queue after all pending messages before the absolute time (in milliseconds) uptimeMillis.",
        "boolean sendMessageDelayed(Message msg, long delayMillis)": "Enqueue a message into the message queue after all pending messages before (current time + delayMillis).",
        "String toString()": "Returns a string representation of the object."
    },
    "super class": [
    ]
}
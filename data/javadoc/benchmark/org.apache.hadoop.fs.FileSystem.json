{
    "class": "FileSystem",
    "category": "Class",
    "methods": {
        "FSDataOutputStream append(Path f)": "Append to an existing file (optional operation).",
        "FSDataOutputStream append(Path f, boolean appendToNewBlock)": "Append to an existing file (optional operation).",
        "FSDataOutputStream append(Path f, int bufferSize)": "Append to an existing file (optional operation).",
        "FSDataOutputStream append(Path f, int bufferSize, Progressable progress)": "Append to an existing file (optional operation).",
        "FSDataOutputStream append(Path f, int bufferSize, Progressable progress, boolean appendToNewBlock)": "Append to an existing file (optional operation).",
        "FSDataOutputStreamBuilder appendFile(Path path)": "Create a Builder to append a file.",
        "boolean areSymlinksEnabled()": "",
        "boolean cancelDeleteOnExit(Path f)": "Cancel the scheduled deletion of the path when the FileSystem is closed.",
        "URI canonicalizeUri(URI uri)": "Canonicalize the given URI.",
        "void checkPath(Path path)": "Check that a Path belongs to this FileSystem.",
        "void clearStatistics()": "Reset all statistics for all file systems.",
        "void close()": "Close this FileSystem instance.",
        "void closeAll()": "Close all cached FileSystem instances.",
        "void closeAllForUGI(UserGroupInformation ugi)": "Close all cached FileSystem instances for a given UGI.",
        "void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)": "Called when we're all done writing to the target.",
        "void concat(Path trg, Path[] psrcs)": "Concat existing files together.",
        "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path[] srcs, Path dst)": "The src files are on the local disk.",
        "void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)": "The src file is on the local disk.",
        "void copyFromLocalFile(boolean delSrc, Path src, Path dst)": "The src file is on the local disk.",
        "void copyFromLocalFile(Path src, Path dst)": "The src file is on the local disk.",
        "void copyToLocalFile(boolean delSrc, Path src, Path dst)": "Copy it a file from a remote filesystem to the local one.",
        "void copyToLocalFile(boolean delSrc, Path src, Path dst, boolean useRawLocalFileSystem)": "The src file is under this filesystem, and the dst is on the local disk.",
        "void copyToLocalFile(Path src, Path dst)": "Copy it a file from the remote filesystem to the local one.",
        "FSDataOutputStream create(FileSystem fs, Path file, FsPermission permission)": "Create a file with the provided permission.",
        "FSDataOutputStream create(Path f)": "Create an FSDataOutputStream at the indicated Path.",
        "FSDataOutputStream create(Path f, boolean overwrite)": "Create an FSDataOutputStream at the indicated Path.",
        "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize)": "Create an FSDataOutputStream at the indicated Path.",
        "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize)": "Create an FSDataOutputStream at the indicated Path.",
        "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStream create(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress, org.apache.hadoop.fs.Options.ChecksumOpt checksumOpt)": "Create an FSDataOutputStream at the indicated Path with a custom checksum option.",
        "FSDataOutputStream create(Path f, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStream create(Path f, short replication)": "Create an FSDataOutputStream at the indicated Path.",
        "FSDataOutputStream create(Path f, short replication, Progressable progress)": "Create an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStreamBuilder createDataOutputStreamBuilder(FileSystem fileSystem, Path path)": "Create instance of the standard FSDataOutputStreamBuilder for the given filesystem and path.",
        "FSDataOutputStreamBuilder createFile(Path path)": "Create a new FSDataOutputStreamBuilder for the file with path.",
        "org.apache.hadoop.fs.MultipartUploaderBuilder createMultipartUploader(Path basePath)": "Create a multipart uploader.",
        "boolean createNewFile(Path f)": "Creates the given Path as a brand-new zero-length file.",
        "FSDataOutputStream createNonRecursive(Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Opens an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)": "Opens an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "FSDataOutputStream createNonRecursive(Path f, FsPermission permission, EnumSet flags, int bufferSize, short replication, long blockSize, Progressable progress)": "Opens an FSDataOutputStream at the indicated Path with write-progress reporting.",
        "PathHandle createPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)": "Hook to implement support for PathHandle operations.",
        "Path createSnapshot(Path path)": "Create a snapshot with a default name.",
        "Path createSnapshot(Path path, String snapshotName)": "Create a snapshot.",
        "void createSymlink(Path target, Path link, boolean createParent)": "See FileContext.createSymlink(Path, Path, boolean).",
        "boolean delete(Path f, boolean recursive)": "Delete a file.",
        "boolean deleteOnExit(Path f)": "Mark a path to be deleted when its FileSystem is closed.",
        "void deleteSnapshot(Path path, String snapshotName)": "Delete a snapshot of a directory.",
        "void enableSymlinks()": "",
        "boolean exists(Path f)": "Check if a path exists.",
        "Path fixRelativePart(Path p)": "See FileContext.fixRelativePart(org.apache.hadoop.fs.Path).",
        "FileSystem get(Configuration conf)": "Returns the configured FileSystem implementation.",
        "FileSystem get(URI uri, Configuration conf)": "Get a FileSystem for this URI's scheme and authority.",
        "FileSystem get(URI uri, Configuration conf, String user)": "Get a FileSystem instance based on the uri, the passed in configuration and the user.",
        "AclStatus getAclStatus(Path path)": "Gets the ACL of a file or directory.",
        "Collection getAllStoragePolicies()": "Retrieve all the storage policies supported by this file system.",
        "String getCanonicalServiceName()": "Get a canonical service name for this FileSystem.",
        "URI getCanonicalUri()": "Return a canonicalized form of this FileSystem's URI.",
        "ContentSummary getContentSummary(Path f)": "Return the ContentSummary of a given Path.",
        "long getDefaultBlockSize(Path f)": "Return the number of bytes that large input files should be optimally be split into to minimize I/O time.",
        "int getDefaultPort()": "Get the default port for this FileSystem.",
        "short getDefaultReplication(Path path)": "Get the default replication for a path.",
        "URI getDefaultUri(Configuration conf)": "Get the default FileSystem URI from a configuration.",
        "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)": "Return an array containing hostnames, offset and size of portions of the given file.",
        "BlockLocation[] getFileBlockLocations(Path p, long start, long len)": "Return an array containing hostnames, offset and size of portions of the given file.",
        "FileChecksum getFileChecksum(Path f)": "Get the checksum of a file, if the FS supports checksums.",
        "FileChecksum getFileChecksum(Path f, long length)": "Get the checksum of a file, from the beginning of the file till the specific length.",
        "FileStatus getFileLinkStatus(Path f)": "See FileContext.getFileLinkStatus(Path).",
        "FileStatus getFileStatus(Path f)": "Return a file status object that represents the path.",
        "Class getFileSystemClass(String scheme, Configuration conf)": "Get the FileSystem implementation class of a filesystem.",
        "FileSystem getFSofPath(Path absOrFqPath, Configuration conf)": "",
        "GlobalStorageStatistics getGlobalStorageStatistics()": "Get the global storage statistics.",
        "Path getHomeDirectory()": "Return the current user's home directory in this FileSystem.",
        "Path getInitialWorkingDirectory()": "Note: with the new FileContext class, getWorkingDirectory() will be removed.",
        "Path getLinkTarget(Path f)": "See FileContext.getLinkTarget(Path).",
        "LocalFileSystem getLocal(Configuration conf)": "Get the local FileSystem.",
        "PathHandle getPathHandle(FileStatus stat, org.apache.hadoop.fs.Options.HandleOpt... opt)": "Create a durable, serializable handle to the referent of the given entity.",
        "QuotaUsage getQuotaUsage(Path f)": "Return the QuotaUsage of a given Path.",
        "String getScheme()": "Return the protocol scheme for this FileSystem.",
        "FsServerDefaults getServerDefaults(Path p)": "Return a set of server default configuration values.",
        "FsStatus getStatus()": "Returns a status object describing the use and capacity of the filesystem.",
        "FsStatus getStatus(Path p)": "Returns a status object describing the use and capacity of the filesystem.",
        "BlockStoragePolicySpi getStoragePolicy(Path src)": "Query the effective storage policy ID for the given file or directory.",
        "StorageStatistics getStorageStatistics()": "Get the StorageStatistics for this FileSystem object.",
        "Path getTrashRoot(Path path)": "Get the root directory of Trash for current user when the path specified is deleted.",
        "Collection getTrashRoots(boolean allUsers)": "Get all the trash roots for current user or all users.",
        "URI getUri()": "Returns a URI which identifies this FileSystem.",
        "long getUsed()": "Return the total size of all files in the filesystem.",
        "long getUsed(Path path)": "Return the total size of all files from a specified path.",
        "Path getWorkingDirectory()": "Get the current working directory for the given FileSystem",
        "byte[] getXAttr(Path path, String name)": "Get an xattr name and value for a file or directory.",
        "Map getXAttrs(Path path)": "Get all of the xattr name/value pairs for a file or directory.",
        "Map getXAttrs(Path path, List names)": "Get all of the xattrs name/value pairs for a file or directory.",
        "FileStatus[] globStatus(Path pathPattern)": "Return all the files that match filePattern and are not checksum files.",
        "FileStatus[] globStatus(Path pathPattern, PathFilter filter)": "Return an array of FileStatus objects whose path names match pathPattern and is accepted by the user-supplied path filter.",
        "boolean hasPathCapability(Path path, String capability)": "The base FileSystem implementation generally has no knowledge of the capabilities of actual implementations.",
        "void initialize(URI name, Configuration conf)": "Initialize a FileSystem.",
        "org.apache.hadoop.fs.RemoteIterator listCorruptFileBlocks(Path path)": "List corrupted file blocks.",
        "org.apache.hadoop.fs.RemoteIterator listFiles(Path f, boolean recursive)": "List the statuses and block locations of the files in the given path.",
        "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f)": "List the statuses of the files/directories in the given path if the path is a directory.",
        "org.apache.hadoop.fs.RemoteIterator listLocatedStatus(Path f, PathFilter filter)": "List a directory.",
        "FileStatus[] listStatus(Path f)": "List the statuses of the files/directories in the given path if the path is a directory.",
        "FileStatus[] listStatus(Path[] files)": "Filter files/directories in the given list of paths using default path filter.",
        "FileStatus[] listStatus(Path[] files, PathFilter filter)": "Filter files/directories in the given list of paths using user-supplied path filter.",
        "FileStatus[] listStatus(Path f, PathFilter filter)": "Filter files/directories in the given path using the user-supplied path filter.",
        "org.apache.hadoop.fs.RemoteIterator listStatusIterator(Path p)": "Returns a remote iterator so that followup calls are made on demand while consuming the entries.",
        "List listXAttrs(Path path)": "Get all of the xattr names for a file or directory.",
        "Path makeQualified(Path path)": "Qualify a path to one which uses this FileSystem and, if relative, made absolute.",
        "boolean mkdirs(FileSystem fs, Path dir, FsPermission permission)": "Create a directory with the provided permission.",
        "boolean mkdirs(Path f)": "Call mkdirs(Path, FsPermission) with default permission.",
        "boolean mkdirs(Path f, FsPermission permission)": "Make the given file and all non-existent parents into directories.",
        "void modifyAclEntries(Path path, List aclSpec)": "Modifies ACL entries of files and directories.",
        "void moveFromLocalFile(Path[] srcs, Path dst)": "The src files is on the local disk.",
        "void moveFromLocalFile(Path src, Path dst)": "The src file is on the local disk.",
        "void moveToLocalFile(Path src, Path dst)": "Copy a file to the local filesystem, then delete it from the remote filesystem (if successfully copied).",
        "void msync()": "Synchronize client metadata state.",
        "FileSystem newInstance(Configuration conf)": "Returns a unique configured FileSystem implementation for the default filesystem of the supplied configuration.",
        "FileSystem newInstance(URI uri, Configuration config)": "Returns the FileSystem for this URI's scheme and authority.",
        "FileSystem newInstance(URI uri, Configuration conf, String user)": "Returns the FileSystem for this URI's scheme and authority and the given user.",
        "LocalFileSystem newInstanceLocal(Configuration conf)": "Get a unique local FileSystem object.",
        "FSDataInputStream open(Path f)": "Opens an FSDataInputStream at the indicated Path.",
        "FSDataInputStream open(PathHandle fd)": "Open an FSDataInputStream matching the PathHandle instance.",
        "FSDataInputStream open(PathHandle fd, int bufferSize)": "Open an FSDataInputStream matching the PathHandle instance.",
        "FSDataInputStream open(Path f, int bufferSize)": "Opens an FSDataInputStream at the indicated Path.",
        "FutureDataInputStreamBuilder openFile(Path path)": "Open a file for reading through a builder API.",
        "FutureDataInputStreamBuilder openFile(PathHandle pathHandle)": "Open a file for reading through a builder API.",
        "CompletableFuture openFileWithOptions(PathHandle pathHandle, org.apache.hadoop.fs.impl.OpenFileParameters parameters)": "Execute the actual open file operation.",
        "CompletableFuture openFileWithOptions(Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters)": "Execute the actual open file operation.",
        "void printStatistics()": "Print all statistics for all file systems to System.out",
        "void processDeleteOnExit()": "Delete all paths that were marked as delete-on-exit.",
        "void removeAcl(Path path)": "Removes all but the base ACL entries of files and directories.",
        "void removeAclEntries(Path path, List aclSpec)": "Removes ACL entries from files and directories.",
        "void removeDefaultAcl(Path path)": "Removes all default ACL entries from files and directories.",
        "void removeXAttr(Path path, String name)": "Remove an xattr of a file or directory.",
        "boolean rename(Path src, Path dst)": "Renames Path src to Path dst.",
        "void renameSnapshot(Path path, String snapshotOldName, String snapshotNewName)": "Rename a snapshot.",
        "Path resolveLink(Path f)": "See AbstractFileSystem.getLinkTarget(Path).",
        "Path resolvePath(Path p)": "Return the fully-qualified path of path, resolving the path through any symlinks or mount point.",
        "void satisfyStoragePolicy(Path path)": "Set the source path to satisfy storage policy.",
        "void setAcl(Path path, List aclSpec)": "Fully replaces ACL of files and directories, discarding all existing entries.",
        "void setDefaultUri(Configuration conf, String uri)": "Set the default FileSystem URI in a configuration.",
        "void setDefaultUri(Configuration conf, URI uri)": "Set the default FileSystem URI in a configuration.",
        "void setOwner(Path p, String username, String groupname)": "Set owner of a path (i.e.",
        "void setPermission(Path p, FsPermission permission)": "Set permission of a path.",
        "void setQuota(Path src, long namespaceQuota, long storagespaceQuota)": "Set quota for the given Path.",
        "void setQuotaByStorageType(Path src, StorageType type, long quota)": "Set per storage type quota for the given Path.",
        "boolean setReplication(Path src, short replication)": "Set the replication for an existing file.",
        "void setStoragePolicy(Path src, String policyName)": "Set the storage policy for a given file or directory.",
        "void setTimes(Path p, long mtime, long atime)": "Set access time of a file.",
        "void setVerifyChecksum(boolean verifyChecksum)": "Set the verify checksum flag.",
        "void setWorkingDirectory(Path new_dir)": "Set the current working directory for the given FileSystem.",
        "void setWriteChecksum(boolean writeChecksum)": "Set the write checksum flag.",
        "void setXAttr(Path path, String name, byte[] value)": "Set an xattr of a file or directory.",
        "void setXAttr(Path path, String name, byte[] value, EnumSet flag)": "Set an xattr of a file or directory.",
        "Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)": "Returns a local file that the user can write output to.",
        "boolean supportsSymlinks()": "See AbstractFileSystem.supportsSymlinks().",
        "boolean truncate(Path f, long newLength)": "Truncate the file in the indicated path to the indicated size.",
        "void unsetStoragePolicy(Path src)": "Unset the storage policy set for a given file or directory."
    },
    "super class": [
        "org.apache.hadoop.conf.Configured"
    ]
}
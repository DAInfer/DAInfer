{
    "class": "Component",
    "category": "Class",
    "methods": {
        "void add(PopupMenu popup)": "Adds the specified popup menu to the component.",
        "void addComponentListener(ComponentListener l)": "Adds the specified component listener to receive component events from this component.",
        "void addFocusListener(FocusListener l)": "Adds the specified focus listener to receive focus events from this component when this component gains input focus.",
        "void addHierarchyBoundsListener(HierarchyBoundsListener l)": "Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.",
        "void addHierarchyListener(HierarchyListener l)": "Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.",
        "void addInputMethodListener(InputMethodListener l)": "Adds the specified input method listener to receive input method events from this component.",
        "void addKeyListener(KeyListener l)": "Adds the specified key listener to receive key events from this component.",
        "void addMouseListener(MouseListener l)": "Adds the specified mouse listener to receive mouse events from this component.",
        "void addMouseMotionListener(MouseMotionListener l)": "Adds the specified mouse motion listener to receive mouse motion events from this component.",
        "void addMouseWheelListener(MouseWheelListener l)": "Adds the specified mouse wheel listener to receive mouse wheel events from this component.",
        "void addNotify()": "Makes this Component displayable by connecting it to a native screen resource.",
        "void addPropertyChangeListener(PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list.",
        "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Adds a PropertyChangeListener to the listener list for a specific property.",
        "void applyComponentOrientation(ComponentOrientation orientation)": "Sets the ComponentOrientation property of this component and all components contained within it.",
        "boolean areFocusTraversalKeysSet(int id)": "Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component.",
        "int checkImage(Image image, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
        "int checkImage(Image image, int width, int height, ImageObserver observer)": "Returns the status of the construction of a screen representation of the specified image.",
        "AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)": "Potentially coalesce an event being posted with an existing event.",
        "boolean contains(int x, int y)": "Checks whether this component \"contains\" the specified point, where x and y are defined to be relative to the coordinate system of this component.",
        "boolean contains(Point p)": "Checks whether this component \"contains\" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.",
        "Image createImage(ImageProducer producer)": "Creates an image from the specified image producer.",
        "Image createImage(int width, int height)": "Creates an off-screen drawable image to be used for double buffering.",
        "VolatileImage createVolatileImage(int width, int height)": "Creates a volatile off-screen drawable image to be used for double buffering.",
        "VolatileImage createVolatileImage(int width, int height, ImageCapabilities caps)": "Creates a volatile off-screen drawable image, with the given capabilities.",
        "void disableEvents(long eventsToDisable)": "Disables the events defined by the specified event mask parameter from being delivered to this component.",
        "void dispatchEvent(AWTEvent e)": "Dispatches an event to this component or one of its sub components.",
        "void doLayout()": "Prompts the layout manager to lay out this component.",
        "void enableEvents(long eventsToEnable)": "Enables the events defined by the specified event mask parameter to be delivered to this component.",
        "void enableInputMethods(boolean enable)": "Enables or disables input method support for this component.",
        "void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)": "Support for reporting bound property changes for boolean properties.",
        "void firePropertyChange(String propertyName, byte oldValue, byte newValue)": "Reports a bound property change.",
        "void firePropertyChange(String propertyName, char oldValue, char newValue)": "Reports a bound property change.",
        "void firePropertyChange(String propertyName, double oldValue, double newValue)": "Reports a bound property change.",
        "void firePropertyChange(String propertyName, float oldValue, float newValue)": "Reports a bound property change.",
        "void firePropertyChange(String propertyName, int oldValue, int newValue)": "Support for reporting bound property changes for integer properties.",
        "void firePropertyChange(String propertyName, long oldValue, long newValue)": "Reports a bound property change.",
        "void firePropertyChange(String propertyName, Object oldValue, Object newValue)": "Support for reporting bound property changes for Object properties.",
        "void firePropertyChange(String propertyName, short oldValue, short newValue)": "Reports a bound property change.",
        "AccessibleContext getAccessibleContext()": "Gets the AccessibleContext associated with this Component.",
        "float getAlignmentX()": "Returns the alignment along the x axis.",
        "float getAlignmentY()": "Returns the alignment along the y axis.",
        "Color getBackground()": "Gets the background color of this component.",
        "int getBaseline(int width, int height)": "Returns the baseline.",
        "Component.BaselineResizeBehavior getBaselineResizeBehavior()": "Returns an enum indicating how the baseline of the component changes as the size changes.",
        "Rectangle getBounds()": "Gets the bounds of this component in the form of a Rectangle object.",
        "Rectangle getBounds(Rectangle rv)": "Stores the bounds of this component into \"return value\" rv and return rv.",
        "ColorModel getColorModel()": "Gets the instance of ColorModel used to display the component on the output device.",
        "Component getComponentAt(int x, int y)": "Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component.",
        "Component getComponentAt(Point p)": "Returns the component or subcomponent that contains the specified point.",
        "ComponentListener[] getComponentListeners()": "Returns an array of all the component listeners registered on this component.",
        "ComponentOrientation getComponentOrientation()": "Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.",
        "Cursor getCursor()": "Gets the cursor set in the component.",
        "DropTarget getDropTarget()": "Gets the DropTarget associated with this Component.",
        "Container getFocusCycleRootAncestor()": "Returns the Container which is the focus cycle root of this Component's focus traversal cycle.",
        "FocusListener[] getFocusListeners()": "Returns an array of all the focus listeners registered on this component.",
        "Set getFocusTraversalKeys(int id)": "Returns the Set of focus traversal keys for a given traversal operation for this Component.",
        "boolean getFocusTraversalKeysEnabled()": "Returns whether focus traversal keys are enabled for this Component.",
        "Font getFont()": "Gets the font of this component.",
        "FontMetrics getFontMetrics(Font font)": "Gets the font metrics for the specified font.",
        "Color getForeground()": "Gets the foreground color of this component.",
        "Graphics getGraphics()": "Creates a graphics context for this component.",
        "GraphicsConfiguration getGraphicsConfiguration()": "Gets the GraphicsConfiguration associated with this Component.",
        "int getHeight()": "Returns the current height of this component.",
        "HierarchyBoundsListener[] getHierarchyBoundsListeners()": "Returns an array of all the hierarchy bounds listeners registered on this component.",
        "HierarchyListener[] getHierarchyListeners()": "Returns an array of all the hierarchy listeners registered on this component.",
        "boolean getIgnoreRepaint()": "",
        "InputContext getInputContext()": "Gets the input context used by this component for handling the communication with input methods when text is entered in this component.",
        "InputMethodListener[] getInputMethodListeners()": "Returns an array of all the input method listeners registered on this component.",
        "InputMethodRequests getInputMethodRequests()": "Gets the input method request handler which supports requests from input methods for this component.",
        "KeyListener[] getKeyListeners()": "Returns an array of all the key listeners registered on this component.",
        "T[] getListeners(Class listenerType)": "Returns an array of all the objects currently registered as FooListeners upon this Component.",
        "Locale getLocale()": "Gets the locale of this component.",
        "Point getLocation()": "Gets the location of this component in the form of a point specifying the component's top-left corner.",
        "Point getLocation(Point rv)": "Stores the x, y origin of this component into \"return value\" rv and return rv.",
        "Point getLocationOnScreen()": "Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.",
        "Dimension getMaximumSize()": "Gets the maximum size of this component.",
        "Dimension getMinimumSize()": "Gets the minimum size of this component.",
        "MouseListener[] getMouseListeners()": "Returns an array of all the mouse listeners registered on this component.",
        "MouseMotionListener[] getMouseMotionListeners()": "Returns an array of all the mouse motion listeners registered on this component.",
        "Point getMousePosition()": "Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null.",
        "MouseWheelListener[] getMouseWheelListeners()": "Returns an array of all the mouse wheel listeners registered on this component.",
        "String getName()": "Gets the name of the component.",
        "Container getParent()": "Gets the parent of this component.",
        "Dimension getPreferredSize()": "Gets the preferred size of this component.",
        "PropertyChangeListener[] getPropertyChangeListeners()": "Returns an array of all the property change listeners registered on this component.",
        "PropertyChangeListener[] getPropertyChangeListeners(String propertyName)": "Returns an array of all the listeners which have been associated with the named property.",
        "Dimension getSize()": "Returns the size of this component in the form of a Dimension object.",
        "Dimension getSize(Dimension rv)": "Stores the width/height of this component into \"return value\" rv and return rv.",
        "Toolkit getToolkit()": "Gets the toolkit of this component.",
        "Object getTreeLock()": "Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.",
        "int getWidth()": "Returns the current width of this component.",
        "int getX()": "Returns the current x coordinate of the components origin.",
        "int getY()": "Returns the current y coordinate of the components origin.",
        "boolean hasFocus()": "Returns true if this Component is the focus owner.",
        "boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)": "Repaints the component when the image has changed.",
        "void invalidate()": "Invalidates this component and its ancestors.",
        "boolean isBackgroundSet()": "Returns whether the background color has been explicitly set for this Component.",
        "boolean isCursorSet()": "Returns whether the cursor has been explicitly set for this Component.",
        "boolean isDisplayable()": "Determines whether this component is displayable.",
        "boolean isDoubleBuffered()": "Returns true if this component is painted to an offscreen image (\"buffer\") that's copied to the screen later.",
        "boolean isEnabled()": "Determines whether this component is enabled.",
        "boolean isFocusable()": "Returns whether this Component can be focused.",
        "boolean isFocusCycleRoot(Container container)": "Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle.",
        "boolean isFocusOwner()": "Returns true if this Component is the focus owner.",
        "boolean isFontSet()": "Returns whether the font has been explicitly set for this Component.",
        "boolean isForegroundSet()": "Returns whether the foreground color has been explicitly set for this Component.",
        "boolean isLightweight()": "A lightweight component doesn't have a native toolkit peer.",
        "boolean isMaximumSizeSet()": "Returns true if the maximum size has been set to a non-null value otherwise returns false.",
        "boolean isMinimumSizeSet()": "Returns whether or not setMinimumSize has been invoked with a non-null value.",
        "boolean isOpaque()": "Returns true if this component is completely opaque, returns false by default.",
        "boolean isPreferredSizeSet()": "Returns true if the preferred size has been set to a non-null value otherwise returns false.",
        "boolean isShowing()": "Determines whether this component is showing on screen.",
        "boolean isValid()": "Determines whether this component is valid.",
        "boolean isVisible()": "Determines whether this component should be visible when its parent is visible.",
        "void list()": "Prints a listing of this component to the standard system output stream System.out.",
        "void list(PrintStream out)": "Prints a listing of this component to the specified output stream.",
        "void list(PrintStream out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print stream.",
        "void list(PrintWriter out)": "Prints a listing to the specified print writer.",
        "void list(PrintWriter out, int indent)": "Prints out a list, starting at the specified indentation, to the specified print writer.",
        "void paint(Graphics g)": "Paints this component.",
        "void paintAll(Graphics g)": "Paints this component and all of its subcomponents.",
        "String paramString()": "Returns a string representing the state of this component.",
        "boolean prepareImage(Image image, ImageObserver observer)": "Prepares an image for rendering on this component.",
        "boolean prepareImage(Image image, int width, int height, ImageObserver observer)": "Prepares an image for rendering on this component at the specified width and height.",
        "void print(Graphics g)": "Prints this component.",
        "void printAll(Graphics g)": "Prints this component and all of its subcomponents.",
        "void processComponentEvent(ComponentEvent e)": "Processes component events occurring on this component by dispatching them to any registered ComponentListener objects.",
        "void processEvent(AWTEvent e)": "Processes events occurring on this component.",
        "void processFocusEvent(FocusEvent e)": "Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.",
        "void processHierarchyBoundsEvent(HierarchyEvent e)": "Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects.",
        "void processHierarchyEvent(HierarchyEvent e)": "Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects.",
        "void processInputMethodEvent(InputMethodEvent e)": "Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.",
        "void processKeyEvent(KeyEvent e)": "Processes key events occurring on this component by dispatching them to any registered KeyListener objects.",
        "void processMouseEvent(MouseEvent e)": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects.",
        "void processMouseMotionEvent(MouseEvent e)": "Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.",
        "void processMouseWheelEvent(MouseWheelEvent e)": "Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects.",
        "void remove(MenuComponent popup)": "Removes the specified popup menu from the component.",
        "void removeComponentListener(ComponentListener l)": "Removes the specified component listener so that it no longer receives component events from this component.",
        "void removeFocusListener(FocusListener l)": "Removes the specified focus listener so that it no longer receives focus events from this component.",
        "void removeHierarchyBoundsListener(HierarchyBoundsListener l)": "Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.",
        "void removeHierarchyListener(HierarchyListener l)": "Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.",
        "void removeInputMethodListener(InputMethodListener l)": "Removes the specified input method listener so that it no longer receives input method events from this component.",
        "void removeKeyListener(KeyListener l)": "Removes the specified key listener so that it no longer receives key events from this component.",
        "void removeMouseListener(MouseListener l)": "Removes the specified mouse listener so that it no longer receives mouse events from this component.",
        "void removeMouseMotionListener(MouseMotionListener l)": "Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.",
        "void removeMouseWheelListener(MouseWheelListener l)": "Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.",
        "void removeNotify()": "Makes this Component undisplayable by destroying it native screen resource.",
        "void removePropertyChangeListener(PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list.",
        "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)": "Removes a PropertyChangeListener from the listener list for a specific property.",
        "void repaint()": "Repaints this component.",
        "void repaint(int x, int y, int width, int height)": "Repaints the specified rectangle of this component.",
        "void repaint(long tm)": "Repaints the component.",
        "void repaint(long tm, int x, int y, int width, int height)": "Repaints the specified rectangle of this component within tm milliseconds.",
        "void requestFocus()": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
        "boolean requestFocus(boolean temporary)": "Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.",
        "boolean requestFocusInWindow()": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
        "boolean requestFocusInWindow(boolean temporary)": "Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window.",
        "void revalidate()": "Revalidates the component hierarchy up to the nearest validate root.",
        "void setBackground(Color c)": "Sets the background color of this component.",
        "void setBounds(int x, int y, int width, int height)": "Moves and resizes this component.",
        "void setBounds(Rectangle r)": "Moves and resizes this component to conform to the new bounding rectangle r.",
        "void setComponentOrientation(ComponentOrientation o)": "Sets the language-sensitive orientation that is to be used to order the elements or text within this component.",
        "void setCursor(Cursor cursor)": "Sets the cursor image to the specified cursor.",
        "void setDropTarget(DropTarget dt)": "Associate a DropTarget with this component.",
        "void setEnabled(boolean b)": "Enables or disables this component, depending on the value of the parameter b.",
        "void setFocusable(boolean focusable)": "Sets the focusable state of this Component to the specified value.",
        "void setFocusTraversalKeys(int id, Set keystrokes)": "Sets the focus traversal keys for a given traversal operation for this Component.",
        "void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)": "Sets whether focus traversal keys are enabled for this Component.",
        "void setFont(Font f)": "Sets the font of this component.",
        "void setForeground(Color c)": "Sets the foreground color of this component.",
        "void setIgnoreRepaint(boolean ignoreRepaint)": "Sets whether or not paint messages received from the operating system should be ignored.",
        "void setLocale(Locale l)": "Sets the locale of this component.",
        "void setLocation(int x, int y)": "Moves this component to a new location.",
        "void setLocation(Point p)": "Moves this component to a new location.",
        "void setMaximumSize(Dimension maximumSize)": "Sets the maximum size of this component to a constant value.",
        "void setMinimumSize(Dimension minimumSize)": "Sets the minimum size of this component to a constant value.",
        "void setName(String name)": "Sets the name of the component to the specified string.",
        "void setPreferredSize(Dimension preferredSize)": "Sets the preferred size of this component to a constant value.",
        "void setSize(Dimension d)": "Resizes this component so that it has width d.width and height d.height.",
        "void setSize(int width, int height)": "Resizes this component so that it has width width and height height.",
        "void setVisible(boolean b)": "Shows or hides this component depending on the value of parameter b.",
        "String toString()": "Returns a string representation of this component and its values.",
        "void transferFocus()": "Transfers the focus to the next component, as though this Component were the focus owner.",
        "void transferFocusBackward()": "Transfers the focus to the previous component, as though this Component were the focus owner.",
        "void transferFocusUpCycle()": "Transfers the focus up one focus traversal cycle.",
        "void update(Graphics g)": "Updates this component.",
        "void validate()": "Validates this component."
    },
    "super class": []
}
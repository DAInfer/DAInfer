{
    "class": "GenericEntity",
    "category": "Class",
    "methods": {
        "void addObserver(Observer observer)": "",
        "int addToXmlDocument(java.util.Collection values, org.w3c.dom.Document document)": "",
        "int addToXmlElement(java.util.Collection values, org.w3c.dom.Document document, org.w3c.dom.Element element)": "",
        "void assertIsMutable()": "",
        "boolean checkFks(boolean insertDummy)": "Checks to see if all foreign key records exist in the database.",
        "void clear()": "",
        "void clearChanged()": "",
        "java.lang.Object clone()": "Clones this GenericEntity, this is a shallow clone and uses the default shallow HashMap clone",
        "int compareTo(GenericEntity that)": "Compares this GenericEntity to the passed object",
        "int compareToFields(GenericEntity that, java.lang.String name)": "",
        "boolean containsKey(java.lang.Object key)": "",
        "boolean containsPrimaryKey()": "Returns true if the entity contains all of the primary key fields.",
        "boolean containsPrimaryKey(boolean requireValue)": "",
        "boolean containsValue(java.lang.Object value)": "",
        "GenericEntity createGenericEntity(Delegator delegator, ModelEntity modelEntity, java.util.Map fields)": "Creates new GenericEntity from existing Map",
        "GenericEntity createGenericEntity(GenericEntity value)": "Copy Factory Method: Creates new GenericEntity from existing GenericEntity",
        "GenericEntity createGenericEntity(ModelEntity modelEntity)": "Creates new GenericEntity",
        "java.lang.Object dangerousGetNoCheckButFast(ModelField modelField)": "",
        "void dangerousSetNoCheckButFast(ModelField modelField, java.lang.Object value)": "",
        "void deleteObserver(Observer observer)": "",
        "void deleteObservers()": "",
        "java.util.Set entrySet()": "",
        "boolean equals(java.lang.Object obj)": "Determines the equality of two GenericEntity objects, overrides the default equals",
        "java.lang.Object get(java.lang.Object key)": "",
        "java.lang.Object get(java.lang.String name)": "",
        "java.lang.Object get(java.lang.String name, java.lang.String resource, java.util.Locale locale)": "Same as the getResource method that does not take resource name, but instead allows manually specifying the resource name.",
        "java.lang.Object get(java.lang.String name, java.util.Locale locale)": "Checks a resource bundle for a value for this field using the entity name, the field name and a composite of the Primary Key field values as a key.",
        "java.util.Map getAllFields()": "Returns key/value pairs of entity fields",
        "java.util.Collection getAllKeys()": "Returns keys of entity fields",
        "java.math.BigDecimal getBigDecimal(java.lang.String name)": "",
        "java.lang.Boolean getBoolean(java.lang.String name)": "",
        "byte[] getBytes(java.lang.String name)": "",
        "java.sql.Date getDate(java.lang.String name)": "",
        "Delegator getDelegator()": "Get the GenericDelegator instance that created this value object and that is responsible for it.",
        "java.lang.Double getDouble(java.lang.String name)": "",
        "TimeDuration getDuration(java.lang.String name)": "Returns the specified field as a TimeDuration instance.",
        "java.lang.String getEntityName()": "",
        "java.util.Map getFields(java.util.Collection keysofFields)": "Used by clients to specify exactly the fields they are interested in",
        "java.lang.Float getFloat(java.lang.String name)": "",
        "java.lang.Integer getInteger(java.lang.String name)": "",
        "boolean getIsFromEntitySync()": "",
        "java.lang.Long getLong(java.lang.String name)": "",
        "ModelEntity getModelEntity()": "",
        "java.lang.Object getOriginalDbValue(java.lang.String name)": "",
        "java.lang.String getPkShortValueString()": "",
        "GenericPK getPrimaryKey()": "",
        "java.lang.String getString(java.lang.String name)": "",
        "java.sql.Time getTime(java.lang.String name)": "",
        "java.sql.Timestamp getTimestamp(java.lang.String name)": "",
        "boolean hasChanged()": "",
        "int hashCode()": "Creates a hashCode for the entity, using the default String hashCode and Map hashCode, overrides the default hashCode",
        "void init(Delegator delegator, ModelEntity modelEntity, java.lang.Object singlePkValue)": "Creates new GenericEntity from existing Map",
        "void init(Delegator delegator, ModelEntity modelEntity, java.util.Map fields)": "Creates new GenericEntity from existing Map",
        "void init(GenericEntity value)": "Copy Constructor: Creates new GenericEntity from existing GenericEntity",
        "void init(ModelEntity modelEntity)": "Creates new GenericEntity",
        "boolean isEmpty()": "",
        "boolean isModified()": "Deprecated. Use hasChanged()",
        "boolean isMutable()": "",
        "boolean isPrimaryKey()": "Returns true if the entity contains all of the primary key fields, but NO others.",
        "boolean isPrimaryKey(boolean requireValue)": "",
        "java.util.Set keySet()": "",
        "boolean lockEnabled()": "Used to indicate if locking is enabled for this entity",
        "org.w3c.dom.Document makeXmlDocument(java.util.Collection values)": "",
        "org.w3c.dom.Element makeXmlElement(org.w3c.dom.Document document)": "Makes an XML Element object with an attribute for each field of the entity",
        "org.w3c.dom.Element makeXmlElement(org.w3c.dom.Document document, java.lang.String prefix)": "Makes an XML Element object with an attribute for each field of the entity",
        "boolean matches(EntityCondition condition)": "",
        "boolean matchesFields(java.util.Map keyValuePairs)": "",
        "void notifyObservers()": "",
        "void notifyObservers(java.lang.Object arg)": "",
        "boolean originalDbValuesAvailable()": "",
        "java.lang.Object put(java.lang.String key, java.lang.Object value)": "",
        "void putAll(java.util.Map map)": "",
        "void refreshFromValue(GenericEntity newValue)": "",
        "java.lang.Object remove(java.lang.Object key)": "",
        "void removedFromDatasource()": "Flags this object as being removed from the data source.",
        "void reset()": "",
        "void set(java.lang.String name, java.lang.Object value)": "Sets the named field to the passed value, even if the value is null",
        "java.lang.Object set(java.lang.String name, java.lang.Object value, boolean setIfNull)": "Sets the named field to the passed value.",
        "void setAllFields(java.util.Map fields, boolean setIfEmpty, java.lang.String namePrefix, java.lang.Boolean pks)": "Intelligently sets fields on this entity from the Map of fields passed in",
        "void setBytes(java.lang.String name, byte[] bytes)": "Sets a field with an array of bytes, wrapping them automatically for easy use.",
        "void setChanged()": "",
        "void setDelegator(Delegator internalDelegator)": "Set the GenericDelegator instance that created this value object and that is responsible for it.",
        "void setFields(java.util.Map keyValuePairs)": "Used by clients to update particular fields in the entity",
        "void setImmutable()": "",
        "void setIsFromEntitySync(boolean isFromEntitySync)": "",
        "void setNextSeqId()": "",
        "void setNonPKFields(java.util.Map fields)": "go through the non-pks and for each one see if there is an entry in fields to set",
        "void setNonPKFields(java.util.Map fields, boolean setIfEmpty)": "go through the non-pks and for each one see if there is an entry in fields to set",
        "void setPKFields(java.util.Map fields)": "go through the pks and for each one see if there is an entry in fields to set",
        "void setPKFields(java.util.Map fields, boolean setIfEmpty)": "go through the pks and for each one see if there is an entry in fields to set",
        "void setString(java.lang.String name, java.lang.String value)": "Sets the named field to the passed value, converting the value from a String to the corrent type using Type.valueOf()",
        "int size()": "",
        "void synchronizedWithDatasource()": "Flags this object as being synchronized with the data source.",
        "java.lang.String toString()": "Creates a String for the entity, overrides the default toString This method is secure, it will not display encrypted fields",
        "java.lang.String toStringInsecure()": "Creates a String for the entity, overrides the default toString This method is NOT secure, it WILL display encrypted fields",
        "java.util.Collection values()": "",
        "void writeXmlText(java.io.PrintWriter writer, java.lang.String prefix)": "Writes XML text with an attribute or CDATA element for each field of the entity"
    },
    "super class": []
}
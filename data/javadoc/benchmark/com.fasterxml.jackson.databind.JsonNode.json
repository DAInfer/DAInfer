{
    "class": "JsonNode",
    "category": "Class",
    "methods": {
        "JsonNode _at(com.fasterxml.jackson.core.JsonPointer ptr)": "",
        "boolean asBoolean()": "Method that will try to convert value of this node to a Java boolean.",
        "boolean asBoolean(boolean defaultValue)": "Method that will try to convert value of this node to a Java boolean.",
        "double asDouble()": "Method that will try to convert value of this node to a Java double.",
        "double asDouble(double defaultValue)": "Method that will try to convert value of this node to a Java double.",
        "int asInt()": "Method that will try to convert value of this node to a Java int.",
        "int asInt(int defaultValue)": "Method that will try to convert value of this node to a Java int.",
        "long asLong()": "Method that will try to convert value of this node to a Java long.",
        "long asLong(long defaultValue)": "Method that will try to convert value of this node to a Java long.",
        "String asText()": "Method that will return a valid String representation of the container value, if the node is a value node (method isValueNode() returns true), otherwise empty String.",
        "String asText(String defaultValue)": "Method similar to asText(), except that it will return defaultValue in cases where null value would be returned; either for missing nodes (trying to access missing property, or element at invalid item for array) or explicit nulls.",
        "JsonNode at(com.fasterxml.jackson.core.JsonPointer ptr)": "Method for locating node specified by given JSON pointer instances.",
        "JsonNode at(String jsonPtrExpr)": "Convenience method that is functionally equivalent to:",
        "BigInteger bigIntegerValue()": "",
        "byte[] binaryValue()": "Method to use for accessing binary content of binary nodes (nodes for which isBinary() returns true); or for Text Nodes (ones for which textValue() returns non-null value), to read decoded base64 data.",
        "boolean booleanValue()": "Method to use for accessing JSON boolean values (value literals 'true' and 'false').",
        "boolean canConvertToInt()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 32-bit signed integer type, int.",
        "boolean canConvertToLong()": "Method that can be used to check whether this node is a numeric node (isNumber() would return true) AND its value fits within Java's 64-bit signed integer type, long.",
        "BigDecimal decimalValue()": "",
        "T deepCopy()": "Method that can be called to get a node that is guaranteed not to allow changing of this node through mutators on this node or any of its children.",
        "double doubleValue()": "Returns 64-bit floating point (double) value for this node, if and only if this node is numeric (isNumber() returns true).",
        "Iterator elements()": "Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node.",
        "boolean equals(Comparator comparator, JsonNode other)": "Entry method for invoking customizable comparison, using passed-in Comparator object.",
        "boolean equals(Object o)": "Equality for node objects is defined as full (deep) value equality.",
        "Iterator fieldNames()": "",
        "Iterator fields()": "",
        "JsonNode findParent(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
        "List findParents(String fieldName)": "Method for finding a JSON Object that contains specified field, within this node or its descendants.",
        "List findParents(String fieldName, List foundSoFar)": "",
        "JsonNode findPath(String fieldName)": "Method similar to findValue(java.lang.String), but that will return a \"missing node\" instead of null if no field is found.",
        "JsonNode findValue(String fieldName)": "Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has.",
        "List findValues(String fieldName)": "Method for finding JSON Object fields with specified name, and returning found ones as a List.",
        "List findValues(String fieldName, List foundSoFar)": "",
        "List findValuesAsText(String fieldName)": "Similar to findValues(java.lang.String), but will additionally convert values into Strings, calling asText().",
        "List findValuesAsText(String fieldName, List foundSoFar)": "",
        "float floatValue()": "Returns 32-bit floating value for this node, if and only if this node is numeric (isNumber() returns true).",
        "JsonNode get(int index)": "Method for accessing value of the specified element of an array node.",
        "JsonNode get(String fieldName)": "Method for accessing value of the specified field of an object node.",
        "JsonNodeType getNodeType()": "Return the type of this node",
        "boolean has(int index)": "Method that allows checking whether this node is JSON Array node and contains a value for specified index If this is the case (including case of specified indexing having null as value), returns true; otherwise returns false.",
        "boolean has(String fieldName)": "Method that allows checking whether this node is JSON Object node and contains value for specified property.",
        "boolean hasNonNull(int index)": "Method that is similar to has(int), but that will return false for explicitly added nulls.",
        "boolean hasNonNull(String fieldName)": "Method that is similar to has(String), but that will return false for explicitly added nulls.",
        "int intValue()": "Returns integer value for this node, if and only if this node is numeric (isNumber() returns true).",
        "boolean isArray()": "",
        "boolean isBigDecimal()": "",
        "boolean isBigInteger()": "",
        "boolean isBinary()": "Method that can be used to check if this node represents binary data (Base64 encoded).",
        "boolean isBoolean()": "Method that can be used to check if this node was created from JSON boolean value (literals \"true\" and \"false\").",
        "boolean isContainerNode()": "",
        "boolean isDouble()": "",
        "boolean isFloat()": "",
        "boolean isFloatingPointNumber()": "",
        "boolean isInt()": "Method that can be used to check whether contained value is a number represented as Java int.",
        "boolean isIntegralNumber()": "",
        "boolean isLong()": "Method that can be used to check whether contained value is a number represented as Java long.",
        "boolean isMissingNode()": "",
        "boolean isNull()": "Method that can be used to check if this node was created from JSON literal null value.",
        "boolean isNumber()": "",
        "boolean isObject()": "",
        "boolean isPojo()": "Method that can be used to check if the node is a wrapper for a POJO (\"Plain Old Java Object\" aka \"bean\".",
        "boolean isShort()": "Method that can be used to check whether contained value is a number represented as Java short.",
        "boolean isTextual()": "Method that checks whether this node represents basic JSON String value.",
        "boolean isValueNode()": "",
        "Iterator iterator()": "Same as calling elements(); implemented so that convenience \"for-each\" loop can be used for looping over elements of JSON Array constructs.",
        "long longValue()": "Returns 64-bit long value for this node, if and only if this node is numeric (isNumber() returns true).",
        "Number numberValue()": "Returns numeric value for this node, if and only if this node is numeric (isNumber() returns true); otherwise returns null",
        "JsonNode path(int index)": "This method is similar to get(int), except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
        "JsonNode path(String fieldName)": "This method is similar to get(String), except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a \"missing node\" (node that returns true for isMissingNode()) will be returned.",
        "short shortValue()": "Returns 16-bit short value for this node, if and only if this node is numeric (isNumber() returns true).",
        "int size()": "",
        "String textValue()": "Method to use for accessing String values.",
        "String toString()": "Note: marked as abstract to ensure all implementation classes define it properly.",
        "JsonNode with(String propertyName)": "Method that can be called on Object nodes, to access a property that has Object value; or if no such property exists, to create, add and return such Object node.",
        "JsonNode withArray(String propertyName)": "Method that can be called on Object nodes, to access a property that has Array value; or if no such property exists, to create, add and return such Array node."
    },
    "super class": [
        "com.fasterxml.jackson.databind.JsonSerializable.Base"
    ]
}
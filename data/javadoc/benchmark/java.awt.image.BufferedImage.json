{
    "class": "BufferedImage",
    "category": "Class",
    "methods": {
        "void addTileObserver(TileObserver to)": "Adds a tile observer.",
        "void coerceData(boolean isAlphaPremultiplied)": "Forces the data to match the state specified in the isAlphaPremultiplied variable.",
        "WritableRaster copyData(WritableRaster outRaster)": "Computes an arbitrary rectangular region of the BufferedImage and copies it into a specified WritableRaster.",
        "Graphics2D createGraphics()": "Creates a Graphics2D, which can be used to draw into this BufferedImage.",
        "WritableRaster getAlphaRaster()": "Returns a WritableRaster representing the alpha channel for BufferedImage objects with ColorModel objects that support a separate spatial alpha channel, such as ComponentColorModel and DirectColorModel.",
        "ColorModel getColorModel()": "Returns the ColorModel.",
        "Raster getData()": "Returns the image as one large tile.",
        "Raster getData(Rectangle rect)": "Computes and returns an arbitrary region of the BufferedImage.",
        "Graphics getGraphics()": "This method returns a Graphics2D, but is here for backwards compatibility.",
        "int getHeight()": "Returns the height of the BufferedImage.",
        "int getHeight(ImageObserver observer)": "Returns the height of the BufferedImage.",
        "int getMinTileX()": "Returns the minimum tile index in the x direction.",
        "int getMinTileY()": "Returns the minimum tile index in the y direction.",
        "int getMinX()": "Returns the minimum x coordinate of this BufferedImage.",
        "int getMinY()": "Returns the minimum y coordinate of this BufferedImage.",
        "int getNumXTiles()": "Returns the number of tiles in the x direction.",
        "int getNumYTiles()": "Returns the number of tiles in the y direction.",
        "Object getProperty(String name)": "Returns a property of the image by name.",
        "Object getProperty(String name, ImageObserver observer)": "Returns a property of the image by name.",
        "String[] getPropertyNames()": "Returns an array of names recognized by getProperty(String) or null, if no property names are recognized.",
        "WritableRaster getRaster()": "Returns the WritableRaster.",
        "int getRGB(int x, int y)": "Returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace.",
        "int[] getRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)": "Returns an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data.",
        "SampleModel getSampleModel()": "Returns the SampleModel associated with this BufferedImage.",
        "ImageProducer getSource()": "Returns the object that produces the pixels for the image.",
        "Vector getSources()": "Returns a Vector of RenderedImage objects that are the immediate sources, not the sources of these immediate sources, of image data for this BufferedImage.",
        "BufferedImage getSubimage(int x, int y, int w, int h)": "Returns a subimage defined by a specified rectangular region.",
        "Raster getTile(int tileX, int tileY)": "Returns tile (tileX, tileY).",
        "int getTileGridXOffset()": "Returns the x offset of the tile grid relative to the origin, For example, the x coordinate of the location of tile (0, 0).",
        "int getTileGridYOffset()": "Returns the y offset of the tile grid relative to the origin, For example, the y coordinate of the location of tile (0, 0).",
        "int getTileHeight()": "Returns the tile height in pixels.",
        "int getTileWidth()": "Returns the tile width in pixels.",
        "int getTransparency()": "Returns the transparency.",
        "int getType()": "Returns the image type.",
        "int getWidth()": "Returns the width of the BufferedImage.",
        "int getWidth(ImageObserver observer)": "Returns the width of the BufferedImage.",
        "WritableRaster getWritableTile(int tileX, int tileY)": "Checks out a tile for writing.",
        "Point[] getWritableTileIndices()": "Returns an array of Point objects indicating which tiles are checked out for writing.",
        "boolean hasTileWriters()": "Returns whether or not any tile is checked out for writing.",
        "boolean isAlphaPremultiplied()": "Returns whether or not the alpha has been premultiplied.",
        "boolean isTileWritable(int tileX, int tileY)": "Returns whether or not a tile is currently checked out for writing.",
        "void releaseWritableTile(int tileX, int tileY)": "Relinquishes permission to write to a tile.",
        "void removeTileObserver(TileObserver to)": "Removes a tile observer.",
        "void setData(Raster r)": "Sets a rectangular region of the image to the contents of the specified Raster r, which is assumed to be in the same coordinate space as the BufferedImage.",
        "void setRGB(int x, int y, int rgb)": "Sets a pixel in this BufferedImage to the specified RGB value.",
        "void setRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)": "Sets an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, into a portion of the image data.",
        "String toString()": "Returns a String representation of this BufferedImage object and its values."
    },
    "super class": [
        "java.awt.Image"
    ]
}
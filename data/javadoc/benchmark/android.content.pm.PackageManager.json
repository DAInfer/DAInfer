{
    "class": "PackageManager",
    "category": "class",
    "methods": {
        "void addPackageToPreferred(String packageName)": "This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
        "boolean addPermission(PermissionInfo info)": "Add a new dynamic permission to the system.",
        "boolean addPermissionAsync(PermissionInfo info)": "Like addPermission(android.content.pm.PermissionInfo) but asynchronously persists the package manager state after returning from the call, allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written.",
        "void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)": "This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
        "boolean addWhitelistedRestrictedPermission(String packageName, String permName, int whitelistFlags)": "Adds a whitelisted restricted permission for an app.",
        "boolean canPackageQuery(String sourcePackageName, String targetPackageName)": "Returns true if the source package is able to query for details about the target package.",
        "boolean[] canPackageQuery(String sourcePackageName, String[] targetPackageNames)": "Same as canPackageQuery(java.lang.String, java.lang.String) but accepts an array of target packages to be queried.",
        "boolean canRequestPackageInstalls()": "Checks whether the calling package is allowed to request package installs through package installer.",
        "String[] canonicalToCurrentPackageNames(String[] packageNames)": "Map from a packages canonical name to the current name in use on the device.",
        "int checkPermission(String permName, String packageName)": "Check whether a particular package has been granted a particular permission.",
        "int checkSignatures(String packageName1, String packageName2)": "Compare the signatures of two packages to determine if the same signature appears in both of them.",
        "int checkSignatures(int uid1, int uid2)": "Like checkSignatures(java.lang.String, java.lang.String), but takes UIDs of the two packages to be checked.",
        "void clearInstantAppCookie()": "Clears the instant application cookie for the calling app.",
        "void clearPackagePreferredActivities(String packageName)": "This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
        "String[] currentToCanonicalPackageNames(String[] packageNames)": "Map from the current package names in use on the device to whatever the current canonical name of that package is.",
        "void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)": "Allows a package listening to the broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs.",
        "Drawable getActivityBanner(ComponentName activityName)": "Retrieve the banner associated with an activity.",
        "Drawable getActivityBanner(Intent intent)": "Retrieve the banner associated with an Intent.",
        "Drawable getActivityIcon(Intent intent)": "Retrieve the icon associated with an Intent.",
        "Drawable getActivityIcon(ComponentName activityName)": "Retrieve the icon associated with an activity.",
        "ActivityInfo getActivityInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular activity class.",
        "ActivityInfo getActivityInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getActivityInfo(android.content.ComponentName, int).",
        "Drawable getActivityLogo(Intent intent)": "Retrieve the logo associated with an Intent.",
        "Drawable getActivityLogo(ComponentName activityName)": "Retrieve the logo associated with an activity.",
        "List getAllPermissionGroups(int flags)": "Retrieve all of the known permission groups in the system.",
        "Drawable getApplicationBanner(String packageName)": "Retrieve the banner associated with an application.",
        "Drawable getApplicationBanner(ApplicationInfo info)": "Retrieve the banner associated with an application.",
        "int getApplicationEnabledSetting(String packageName)": "Return the enabled setting for an application.",
        "Drawable getApplicationIcon(ApplicationInfo info)": "Retrieve the icon associated with an application.",
        "Drawable getApplicationIcon(String packageName)": "Retrieve the icon associated with an application.",
        "ApplicationInfo getApplicationInfo(String packageName, PackageManager.ApplicationInfoFlags flags)": "See getApplicationInfo(java.lang.String, int).",
        "ApplicationInfo getApplicationInfo(String packageName, int flags)": "Retrieve all of the information we know about a particular package/application.",
        "CharSequence getApplicationLabel(ApplicationInfo info)": "Return the label to use for this application.",
        "Drawable getApplicationLogo(String packageName)": "Retrieve the logo associated with an application.",
        "Drawable getApplicationLogo(ApplicationInfo info)": "Retrieve the logo associated with an application.",
        "CharSequence getBackgroundPermissionOptionLabel()": "Gets the localized label that corresponds to the option in settings for granting background access.",
        "ChangedPackages getChangedPackages(int sequenceNumber)": "Returns the names of the packages that have been changed [eg.",
        "int getComponentEnabledSetting(ComponentName componentName)": "Return the enabled setting for a package component (activity, receiver, service, provider).",
        "Drawable getDefaultActivityIcon()": "Return the generic icon for an activity that is used when no specific icon is defined.",
        "Drawable getDrawable(String packageName, int resid, ApplicationInfo appInfo)": "Retrieve an image from a package.",
        "void getGroupOfPlatformPermission(String permissionName, Executor executor, Consumer callback)": "Get the platform-defined permission group of a particular permission, if the permission is a platform-defined permission.",
        "InstallSourceInfo getInstallSourceInfo(String packageName)": "Retrieves information about how a package was installed or updated.",
        "List getInstalledApplications(int flags)": "Return a List of all application packages that are installed for the current user.",
        "List getInstalledApplications(PackageManager.ApplicationInfoFlags flags)": "See getInstalledApplications(int)",
        "List getInstalledModules(int flags)": "Return a List of all modules that are installed.",
        "List getInstalledPackages(int flags)": "Return a List of all packages that are installed for the current user.",
        "List getInstalledPackages(PackageManager.PackageInfoFlags flags)": "See getInstalledPackages(int).",
        "String getInstallerPackageName(String packageName)": "This method was deprecated in API level 30. use getInstallSourceInfo(java.lang.String) instead",
        "byte[] getInstantAppCookie()": "Gets the instant application cookie for this app.",
        "int getInstantAppCookieMaxBytes()": "Gets the maximum size in bytes of the cookie data an instant app can store on the device.",
        "InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags)": "Retrieve all of the information we know about a particular instrumentation class.",
        "Intent getLaunchIntentForPackage(String packageName)": "Returns a \"good\" intent to launch a front-door activity in a package.",
        "IntentSender getLaunchIntentSenderForPackage(String packageName)": "Returns an IntentSender that can be used to launch a front-door activity in a package.",
        "Intent getLeanbackLaunchIntentForPackage(String packageName)": "Return a \"good\" intent to launch a front-door Leanback activity in a package, for use for example to implement an \"open\" button when browsing through packages.",
        "Set getMimeGroup(String mimeGroup)": "Gets all MIME types contained by MIME group.",
        "ModuleInfo getModuleInfo(String packageName, int flags)": "Retrieve information for a particular module.",
        "String getNameForUid(int uid)": "Retrieve the official name associated with a uid.",
        "PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags)": "Retrieve overall information about an application package defined in a package archive file Use getPackageArchiveInfo(java.lang.String, android.content.pm.PackageManager.PackageInfoFlags) when long flags are needed.",
        "PackageInfo getPackageArchiveInfo(String archiveFilePath, PackageManager.PackageInfoFlags flags)": "See getPackageArchiveInfo(java.lang.String, int).",
        "int[] getPackageGids(String packageName)": "Return an array of all of the POSIX secondary group IDs that have been assigned to the given package.",
        "int[] getPackageGids(String packageName, int flags)": "Return an array of all of the POSIX secondary group IDs that have been assigned to the given package.",
        "int[] getPackageGids(String packageName, PackageManager.PackageInfoFlags flags)": "See getPackageGids(java.lang.String, int).",
        "PackageInfo getPackageInfo(String packageName, int flags)": "Retrieve overall information about an application package that is installed on the system.",
        "PackageInfo getPackageInfo(String packageName, PackageManager.PackageInfoFlags flags)": "See getPackageInfo(java.lang.String, int)",
        "PackageInfo getPackageInfo(VersionedPackage versionedPackage, PackageManager.PackageInfoFlags flags)": "See getPackageInfo(android.content.pm.VersionedPackage, int)",
        "PackageInfo getPackageInfo(VersionedPackage versionedPackage, int flags)": "Retrieve overall information about an application package that is installed on the system.",
        "PackageInstaller getPackageInstaller()": "Return interface that offers the ability to install, upgrade, and remove applications on the device.",
        "int getPackageUid(String packageName, PackageManager.PackageInfoFlags flags)": "See getPackageUid(java.lang.String, int).",
        "int getPackageUid(String packageName, int flags)": "Return the UID associated with the given package name.",
        "String[] getPackagesForUid(int uid)": "Retrieve the names of all packages that are associated with a particular user id.",
        "List getPackagesHoldingPermissions(String[] permissions, int flags)": "Return a List of all installed packages that are currently holding any of the given permissions.",
        "List getPackagesHoldingPermissions(String[] permissions, PackageManager.PackageInfoFlags flags)": "See getPackagesHoldingPermissions(java.lang.String[], int).",
        "PermissionGroupInfo getPermissionGroupInfo(String groupName, int flags)": "Retrieve all of the information we know about a particular group of permissions.",
        "PermissionInfo getPermissionInfo(String permName, int flags)": "Retrieve all of the information we know about a particular permission.",
        "void getPlatformPermissionsForGroup(String permissionGroupName, Executor executor, Consumer callback)": "Get the platform-defined permissions which belong to a particular permission group.",
        "int getPreferredActivities(List outFilters, List outActivities, String packageName)": "This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
        "List getPreferredPackages(int flags)": "This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
        "PackageManager.Property getProperty(String propertyName, String packageName)": "Returns the property defined in the given package's <appliction> tag.",
        "PackageManager.Property getProperty(String propertyName, ComponentName component)": "Returns the property defined in the given component declaration.",
        "ProviderInfo getProviderInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular content provider class.",
        "ProviderInfo getProviderInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getProviderInfo(android.content.ComponentName, int).",
        "ActivityInfo getReceiverInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular receiver class.",
        "ActivityInfo getReceiverInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getReceiverInfo(android.content.ComponentName, int).",
        "Resources getResourcesForActivity(ComponentName activityName)": "Retrieve the resources associated with an activity.",
        "Resources getResourcesForApplication(ApplicationInfo app)": "Retrieve the resources for an application.",
        "Resources getResourcesForApplication(String packageName)": "Retrieve the resources associated with an application.",
        "Resources getResourcesForApplication(ApplicationInfo app, Configuration configuration)": "Retrieve the resources for an application for the provided configuration.",
        "ServiceInfo getServiceInfo(ComponentName component, PackageManager.ComponentInfoFlags flags)": "See getServiceInfo(android.content.ComponentName, int).",
        "ServiceInfo getServiceInfo(ComponentName component, int flags)": "Retrieve all of the information we know about a particular service class.",
        "List getSharedLibraries(PackageManager.PackageInfoFlags flags)": "See getSharedLibraries(int).",
        "List getSharedLibraries(int flags)": "Get a list of shared libraries on the device.",
        "Bundle getSuspendedPackageAppExtras()": "Returns a Bundle of extras that was meant to be sent to the calling app when it was suspended.",
        "boolean getSyntheticAppDetailsActivityEnabled(String packageName)": "Return whether a synthetic app details activity will be generated if the app has no enabled launcher activity.",
        "FeatureInfo[] getSystemAvailableFeatures()": "Get a list of features that are available on the system.",
        "String[] getSystemSharedLibraryNames()": "Get a list of shared libraries that are available on the system.",
        "int getTargetSdkVersion(String packageName)": "int getTargetSdkVersion(String packageName)",
        "CharSequence getText(String packageName, int resid, ApplicationInfo appInfo)": "Retrieve text from a package.",
        "Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity)": "If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable.",
        "Drawable getUserBadgedIcon(Drawable drawable, UserHandle user)": "If the target user is a managed profile, then this returns a badged copy of the given icon to be able to distinguish it from the original icon.",
        "CharSequence getUserBadgedLabel(CharSequence label, UserHandle user)": "If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback.",
        "Set getWhitelistedRestrictedPermissions(String packageName, int whitelistFlag)": "Gets the restricted permissions that have been whitelisted and the app is allowed to have them granted in their full form.",
        "XmlResourceParser getXml(String packageName, int resid, ApplicationInfo appInfo)": "Retrieve an XML file from a package.",
        "boolean hasSigningCertificate(int uid, byte[] certificate, int type)": "Searches the set of signing certificates by which the package(s) for the given uid has proven to have been signed.",
        "boolean hasSigningCertificate(String packageName, byte[] certificate, int type)": "Searches the set of signing certificates by which the given package has proven to have been signed.",
        "boolean hasSystemFeature(String featureName)": "Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures().",
        "boolean hasSystemFeature(String featureName, int version)": "Check whether the given feature name and version is one of the available features as returned by getSystemAvailableFeatures().",
        "boolean isAutoRevokeWhitelisted(String packageName)": "Checks whether an application is exempt from having its permissions be automatically revoked when the app is unused for an extended period of time.",
        "boolean isAutoRevokeWhitelisted()": "Note: In retrospect it would have been preferred to use more inclusive terminology when naming this API.",
        "boolean isDefaultApplicationIcon(Drawable drawable)": "Returns if the provided drawable represents the default activity icon provided by the system.",
        "boolean isDeviceUpgrading()": "Returns true if the device is upgrading, such as first boot after OTA.",
        "boolean isInstantApp()": "Gets whether this application is an instant app.",
        "boolean isInstantApp(String packageName)": "Gets whether the given package is an instant app.",
        "boolean isPackageSuspended(String packageName)": "Query if an app is currently suspended.",
        "boolean isPackageSuspended()": "Apps can query this to know if they have been suspended.",
        "boolean isPermissionRevokedByPolicy(String permName, String packageName)": "Checks whether a particular permissions has been revoked for a package by policy.",
        "boolean isSafeMode()": "Return whether the device has been booted into safe mode.",
        "List queryActivityProperty(String propertyName)": "Returns the property definition for all <activity> and <activity-alias> tags.",
        "List queryApplicationProperty(String propertyName)": "Returns the property definition for all <application> tags.",
        "List queryBroadcastReceivers(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryBroadcastReceivers(android.content.Intent, int).",
        "List queryBroadcastReceivers(Intent intent, int flags)": "Retrieve all receivers that can handle a broadcast of the given intent.",
        "List queryContentProviders(String processName, int uid, int flags)": "Retrieve content provider information.",
        "List queryContentProviders(String processName, int uid, PackageManager.ComponentInfoFlags flags)": "See queryContentProviders(java.lang.String, int, int).",
        "List queryInstrumentation(String targetPackage, int flags)": "Retrieve information about available instrumentation code.",
        "List queryIntentActivities(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentActivities(android.content.Intent, int).",
        "List queryIntentActivities(Intent intent, int flags)": "Retrieve all activities that can be performed for the given intent.",
        "List queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags)": "Retrieve a set of activities that should be presented to the user as similar options.",
        "List queryIntentActivityOptions(ComponentName caller, List specifics, Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int).",
        "List queryIntentContentProviders(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentContentProviders(android.content.Intent, int).",
        "List queryIntentContentProviders(Intent intent, int flags)": "Retrieve all providers that can match the given intent.",
        "List queryIntentServices(Intent intent, int flags)": "Retrieve all services that can match the given intent.",
        "List queryIntentServices(Intent intent, PackageManager.ResolveInfoFlags flags)": "See queryIntentServices(android.content.Intent, int).",
        "List queryPermissionsByGroup(String permissionGroup, int flags)": "Query for all of the permissions associated with a particular group.",
        "List queryProviderProperty(String propertyName)": "Returns the property definition for all <provider> tags.",
        "List queryReceiverProperty(String propertyName)": "Returns the property definition for all <receiver> tags.",
        "List queryServiceProperty(String propertyName)": "Returns the property definition for all <service> tags.",
        "void relinquishUpdateOwnership(String targetPackage)": "Attempt to relinquish the update ownership of the given package.",
        "void removePackageFromPreferred(String packageName)": "This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use resolveActivity(Intent, ResolveInfoFlags) or queryIntentActivities(Intent, ResolveInfoFlags). To configure an app to be responsible for a particular role and to check current role holders, see RoleManager.",
        "void removePermission(String permName)": "Removes a permission that was previously added with addPermission(android.content.pm.PermissionInfo).",
        "boolean removeWhitelistedRestrictedPermission(String packageName, String permName, int whitelistFlags)": "Removes a whitelisted restricted permission for an app.",
        "void requestChecksums(String packageName, boolean includeSplits, int required, List trustedInstallers, PackageManager.OnChecksumsReadyListener onChecksumsReadyListener)": "Requests the checksums for APKs within a package.",
        "ResolveInfo resolveActivity(Intent intent, PackageManager.ResolveInfoFlags flags)": "See resolveActivity(android.content.Intent, int).",
        "ResolveInfo resolveActivity(Intent intent, int flags)": "Determine the best action to perform for a given Intent.",
        "ProviderInfo resolveContentProvider(String authority, PackageManager.ComponentInfoFlags flags)": "See resolveContentProvider(java.lang.String, int).",
        "ProviderInfo resolveContentProvider(String authority, int flags)": "Find a single content provider by its authority.",
        "ResolveInfo resolveService(Intent intent, int flags)": "Determine the best service to handle for a given Intent.",
        "ResolveInfo resolveService(Intent intent, PackageManager.ResolveInfoFlags flags)": "See resolveService(android.content.Intent, int).",
        "void setApplicationCategoryHint(String packageName, int categoryHint)": "Provide a hint of what the ApplicationInfo#category value should be for the given package.",
        "void setApplicationEnabledSetting(String packageName, int newState, int flags)": "Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest.",
        "boolean setAutoRevokeWhitelisted(String packageName, boolean whitelisted)": "Marks an application exempt from having its permissions be automatically revoked when the app is unused for an extended period of time.",
        "void setComponentEnabledSetting(ComponentName componentName, int newState, int flags)": "Set the enabled setting for a package component (activity, receiver, service, provider).",
        "void setComponentEnabledSettings(List settings)": "Set the enabled settings for package components such as activities, receivers, services and providers.",
        "void setInstallerPackageName(String targetPackage, String installerPackageName)": "Change the installer associated with a given package.",
        "void setMimeGroup(String mimeGroup, Set mimeTypes)": "Sets MIME group's MIME types.",
        "void updateInstantAppCookie(byte[] cookie)": "Updates the instant application cookie for the calling app.",
        "void verifyPendingInstall(int id, int verificationCode)": "Allows a package listening to the broadcast to respond to the package manager."
    },
    "super class": []
}
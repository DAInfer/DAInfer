{
    "class": "Matrix",
    "category": "Class",
    "methods": {
        "Matrix arrayLeftDivide(Matrix B)": "Element-by-element left division, C = A./B.",
        "Matrix arrayLeftDivideEquals(Matrix B)": "Element-by-element left division in place, A = A./B.",
        "Matrix arrayRightDivide(Matrix B)": "Element-by-element right division, C = A./B",
        "Matrix arrayRightDivideEquals(Matrix B)": "Element-by-element right division in place, A = A./B",
        "Matrix arrayTimes(Matrix B)": "Element-by-element multiplication, C = A.*B",
        "Matrix arrayTimesEquals(Matrix B)": "Element-by-element multiplication in place, A = A.*B",
        "CholeskyDecomposition chol()": "Cholesky Decomposition",
        "Object clone()": "Clone the Matrix object.",
        "double cond()": "Matrix condition (2 norm)",
        "Matrix constructWithCopy(double[][] A)": "Construct a matrix from a copy of a 2-D array.",
        "Matrix copy()": "Make a deep copy of a matrix",
        "double det()": "Matrix determinant",
        "EigenvalueDecomposition eig()": "Eigenvalue Decomposition",
        "double get(int i, int j)": "Get a single element.",
        "double[][] getArray()": "Access the internal two-dimensional array.",
        "double[][] getArrayCopy()": "Copy the internal two-dimensional array.",
        "int getColumnDimension()": "Get column dimension.",
        "double[] getColumnPackedCopy()": "Make a one-dimensional column packed copy of the internal array.",
        "Matrix getMatrix(int[] r, int[] c)": "Get a submatrix.",
        "Matrix getMatrix(int[] r, int j0, int j1)": "Get a submatrix.",
        "Matrix getMatrix(int i0, int i1, int[] c)": "Get a submatrix.",
        "Matrix getMatrix(int i0, int i1, int j0, int j1)": "Get a submatrix.",
        "int getRowDimension()": "Get row dimension.",
        "double[] getRowPackedCopy()": "Make a one-dimensional row packed copy of the internal array.",
        "Matrix identity(int m, int n)": "Generate identity matrix",
        "Matrix inverse()": "Matrix inverse or pseudoinverse",
        "LUDecomposition lu()": "LU Decomposition",
        "Matrix minus(Matrix B)": "C = A - B",
        "Matrix minusEquals(Matrix B)": "A = A - B",
        "double norm1()": "One norm",
        "double norm2()": "Two norm",
        "double normF()": "Frobenius norm",
        "double normInf()": "Infinity norm",
        "Matrix plus(Matrix B)": "C = A + B",
        "Matrix plusEquals(Matrix B)": "A = A + B",
        "void print(int w, int d)": "Print the matrix to stdout.",
        "void print(NumberFormat format, int width)": "Print the matrix to stdout.",
        "void print(PrintWriter output, int w, int d)": "Print the matrix to the output stream.",
        "void print(PrintWriter output, NumberFormat format, int width)": "Print the matrix to the output stream.",
        "QRDecomposition qr()": "QR Decomposition",
        "Matrix random(int m, int n)": "Generate matrix with random elements",
        "int rank()": "Matrix rank",
        "Matrix read(BufferedReader input)": "Read a matrix from a stream.",
        "void set(int i, int j, double s)": "Set a single element.",
        "void setMatrix(int[] r, int[] c, Matrix X)": "Set a submatrix.",
        "void setMatrix(int[] r, int j0, int j1, Matrix X)": "Set a submatrix.",
        "void setMatrix(int i0, int i1, int[] c, Matrix X)": "Set a submatrix.",
        "void setMatrix(int i0, int i1, int j0, int j1, Matrix X)": "Set a submatrix.",
        "Matrix solve(Matrix B)": "Solve A*X = B",
        "Matrix solveTranspose(Matrix B)": "Solve X*A = B, which is also A'*X' = B'",
        "SingularValueDecomposition svd()": "Singular Value Decomposition",
        "Matrix times(double s)": "Multiply a matrix by a scalar, C = s*A",
        "Matrix times(Matrix B)": "Linear algebraic matrix multiplication, A * B",
        "Matrix timesEquals(double s)": "Multiply a matrix by a scalar in place, A = s*A",
        "double trace()": "Matrix trace.",
        "Matrix transpose()": "Matrix transpose.",
        "Matrix uminus()": "Unary minus"
    },
    "super class": []
}
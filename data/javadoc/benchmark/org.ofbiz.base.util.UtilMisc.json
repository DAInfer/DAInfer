{
    "class": "UtilMisc",
    "category": "Class",
    "methods": {
        "java.math.BigDecimal addToBigDecimalInMap(java.util.Map theMap, K mapKey, java.math.BigDecimal addNumber)": "Assuming theMap not null; if null will throw a NullPointerException",
        "void addToDoubleInMap(java.util.Map theMap, K key, java.lang.Double value)": "Adds value to the key entry in theMap, or creates a new one if not already there",
        "void addToListInMap(V element, java.util.Map theMap, K listKey)": "",
        "void addToSetInMap(V element, java.util.Map theMap, K setKey)": "",
        "void addToSortedSetInMap(V element, java.util.Map theMap, K setKey)": "",
        "java.util.List availableLocales()": "Returns a List of available locales sorted by display name",
        "java.util.Set collectionToSet(java.util.Collection c)": "",
        "java.lang.String collectionToString(java.util.Collection values, java.lang.String delimiter)": "Generates a String from given values delimited by delimiter.",
        "int compare(java.lang.Comparable obj1, T obj2)": "",
        "int compare(java.util.List obj1, java.util.List obj2)": "",
        "void copyFile(java.io.File sourceLocation, java.io.File targetLocation)": "",
        "java.util.Locale ensureLocale(java.lang.Object localeObject)": "The input can be a String, Locale, or even null and a valid Locale will always be returned; if nothing else works, returns the default locale.",
        "java.util.List getHostHeadersAllowed()": "List of domains or IP addresses to be checked to prevent Host Header Injection, no spaces after commas, no wildcard, can be extended of course...",
        "java.util.List getListFromMap(java.util.Map outerMap, K key)": "Assuming outerMap not null; if null will throw a NullPointerException",
        "java.util.Map getMapFromMap(java.util.Map outerMap, K key)": "Assuming outerMap not null; if null will throw a NullPointerException",
        "int getViewLastIndex(int listSize, int viewSize)": "",
        "T initCause(T throwable, java.lang.Throwable cause)": "",
        "void makeArrayListSerializable(java.util.ArrayList arrayList)": "This change an ArrayList to be Serializable by removing all entries that are not Serializable.",
        "java.util.List makeListWritable(java.util.Collection col)": "",
        "void makeMapSerializable(java.util.Map map)": "This change a Map to be Serializable by removing all entries with values that are not Serializable.",
        "java.util.Map makeMapWritable(java.util.Map map)": "",
        "java.util.Set makeSetWritable(java.util.Collection col)": "",
        "java.util.Locale parseLocale(java.lang.String localeString)": "Parse a locale string Locale object",
        "java.lang.String printMap(java.util.Map theMap)": "",
        "T removeFirst(java.util.List lst)": "",
        "java.util.List sortMaps(java.util.List listOfMaps, java.util.List sortKeys)": "Sort a List of Maps by specified consistent keys.",
        "java.util.Map splitPhoneNumber(java.lang.String phoneNumber, Delegator delegator)": "",
        "void staticWait(long timeout)": "Deprecated. use Thread.sleep()",
        "double toDouble(java.lang.Object obj)": "Converts an Object to a double.",
        "java.lang.Double toDoubleObject(java.lang.Object obj)": "Converts an Object to a Double.",
        "int toInteger(java.lang.Object obj)": "Converts an Object to an int.",
        "java.lang.Integer toIntegerObject(java.lang.Object obj)": "Converts an Object to an Integer.",
        "java.util.Iterator toIterator(java.util.Collection col)": "Get an iterator from a collection, returning null if collection is null",
        "java.util.List toList(java.util.Collection collection)": "",
        "java.util.List toList(T... data)": "Creates a list from passed objects.",
        "java.util.List toListArray(T[] data)": "",
        "long toLong(java.lang.Object obj)": "Converts an Object to a long.",
        "java.lang.Long toLongObject(java.lang.Object obj)": "Converts an Object to a Long.",
        "java.util.Map toMap(java.lang.Object... kvs)": "Creates a pseudo-literal map corresponding to key-values.",
        "java.util.Map toMap(java.util.function.Supplier constructor, java.lang.Object... kvs)": "Creates a pseudo-literal map corresponding to key-values.",
        "java.util.Set toSet(java.util.Collection collection)": "",
        "java.util.Set toSet(T... data)": "Create a set from the passed objects.",
        "java.util.Set toSetArray(T[] data)": ""
    },
    "super class": []
}
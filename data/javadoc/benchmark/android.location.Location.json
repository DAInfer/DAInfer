{
    "class": "Location",
    "category": "class",
    "methods": {
        "float bearingTo(Location dest)": "Returns the approximate initial bearing in degrees east of true north when traveling along the shortest path between this location and the given location.",
        "String convert(double coordinate, int outputType)": "Converts a latitude/longitude coordinate to a String representation.",
        "double convert(String coordinate)": "Converts a String in one of the formats described by FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS into a double.",
        "int describeContents()": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.",
        "void distanceBetween(double startLatitude, double startLongitude, double endLatitude, double endLongitude, float[] results)": "Computes the approximate distance in meters between two locations, and optionally the initial and final bearings of the shortest path between them.",
        "float distanceTo(Location dest)": "Returns the approximate distance in meters between this location and the given location.",
        "void dump(Printer pw, String prefix)": "This method was deprecated in API level 33. Prefer to use toString() along with whatever custom formatting is required instead of this method. It is not this class's job to manage print representations.",
        "boolean equals(Object o)": "Location equality is provided primarily for test purposes.",
        "float getAccuracy()": "Returns the estimated horizontal accuracy radius in meters of this location at the 68th percentile confidence level.",
        "double getAltitude()": "The altitude of this location in meters above the WGS84 reference ellipsoid.",
        "float getBearing()": "Returns the bearing at the time of this location in degrees.",
        "float getBearingAccuracyDegrees()": "Returns the estimated bearing accuracy in degrees of this location at the 68th percentile confidence level.",
        "long getElapsedRealtimeAgeMillis(long referenceRealtimeMs)": "A convenience method that returns the age of this location with respect to the given reference elapsed realtime.",
        "long getElapsedRealtimeAgeMillis()": "A convenience methods that returns the age of this location in milliseconds with respect to the current elapsed realtime.",
        "long getElapsedRealtimeMillis()": "Return the time of this fix in milliseconds of elapsed realtime since system boot.",
        "long getElapsedRealtimeNanos()": "Return the time of this fix in nanoseconds of elapsed realtime since system boot.",
        "double getElapsedRealtimeUncertaintyNanos()": "Get the uncertainty in nanoseconds of the precision of getElapsedRealtimeNanos() at the 68th percentile confidence level.",
        "Bundle getExtras()": "Returns an optional bundle of additional information associated with this location.",
        "double getLatitude()": "Get the latitude in degrees.",
        "double getLongitude()": "Get the longitude in degrees.",
        "float getMslAltitudeAccuracyMeters()": "Returns the estimated Mean Sea Level altitude accuracy in meters of this location at the 68th percentile confidence level.",
        "double getMslAltitudeMeters()": "Returns the Mean Sea Level altitude of this location in meters.",
        "String getProvider()": "Returns the name of the provider associated with this location.",
        "float getSpeed()": "Returns the speed at the time of this location in meters per second.",
        "float getSpeedAccuracyMetersPerSecond()": "Returns the estimated speed accuracy in meters per second of this location at the 68th percentile confidence level.",
        "long getTime()": "Returns the Unix epoch time of this location fix, in milliseconds since the start of the Unix epoch (00:00:00 January 1, 1970 UTC).",
        "float getVerticalAccuracyMeters()": "Returns the estimated altitude accuracy in meters of this location at the 68th percentile confidence level.",
        "boolean hasAccuracy()": "Returns true if this location has a horizontal accuracy, false otherwise.",
        "boolean hasAltitude()": "Returns true if this location has an altitude, false otherwise.",
        "boolean hasBearing()": "True if this location has a bearing, false otherwise.",
        "boolean hasBearingAccuracy()": "Returns true if this location has a bearing accuracy, false otherwise.",
        "boolean hasElapsedRealtimeUncertaintyNanos()": "True if this location has an elapsed realtime uncertainty, false otherwise.",
        "boolean hasMslAltitude()": "Returns true if this location has a Mean Sea Level altitude, false otherwise.",
        "boolean hasMslAltitudeAccuracy()": "Returns true if this location has a Mean Sea Level altitude accuracy, false otherwise.",
        "boolean hasSpeed()": "True if this location has a speed, false otherwise.",
        "boolean hasSpeedAccuracy()": "Returns true if this location has a speed accuracy, false otherwise.",
        "boolean hasVerticalAccuracy()": "Returns true if this location has a vertical accuracy, false otherwise.",
        "int hashCode()": "Returns a hash code value for the object.",
        "boolean isComplete()": "Return true if this location is considered complete.",
        "boolean isFromMockProvider()": "This method was deprecated in API level 31. Prefer isMock() instead.",
        "boolean isMock()": "Returns true if this location is marked as a mock location.",
        "void removeAccuracy()": "Remove the horizontal accuracy from this location.",
        "void removeAltitude()": "Removes the altitude from this location.",
        "void removeBearing()": "Remove the bearing from this location.",
        "void removeBearingAccuracy()": "Remove the bearing accuracy from this location.",
        "void removeElapsedRealtimeUncertaintyNanos()": "Removes the elapsed realtime uncertainty from this location.",
        "void removeMslAltitude()": "Removes the Mean Sea Level altitude from this location.",
        "void removeMslAltitudeAccuracy()": "Removes the Mean Sea Level altitude accuracy from this location.",
        "void removeSpeed()": "Remove the speed from this location.",
        "void removeSpeedAccuracy()": "Remove the speed accuracy from this location.",
        "void removeVerticalAccuracy()": "Remove the vertical accuracy from this location.",
        "void reset()": "Sets the provider to null, removes all optional fields, and sets the values of all other fields to zero.",
        "void set(Location location)": "Turns this location into a copy of the given location.",
        "void setAccuracy(float horizontalAccuracyMeters)": "Set the horizontal accuracy in meters of this location.",
        "void setAltitude(double altitudeMeters)": "Set the altitude of this location in meters above the WGS84 reference ellipsoid.",
        "void setBearing(float bearingDegrees)": "Set the bearing at the time of this location, in degrees.",
        "void setBearingAccuracyDegrees(float bearingAccuracyDegrees)": "Set the bearing accuracy in degrees of this location.",
        "void setElapsedRealtimeNanos(long elapsedRealtimeNs)": "Set the time of this location in nanoseconds of elapsed realtime since system boot.",
        "void setElapsedRealtimeUncertaintyNanos(double elapsedRealtimeUncertaintyNs)": "Sets the uncertainty in nanoseconds of the precision of the elapsed realtime timestamp at a 68% confidence level.",
        "void setExtras(Bundle extras)": "Sets the extra information associated with this fix to the given Bundle.",
        "void setLatitude(double latitudeDegrees)": "Set the latitude of this location.",
        "void setLongitude(double longitudeDegrees)": "Set the longitude of this location.",
        "void setMock(boolean mock)": "Sets whether this location is marked as a mock location.",
        "void setMslAltitudeAccuracyMeters(float mslAltitudeAccuracyMeters)": "Sets the Mean Sea Level altitude accuracy of this location in meters.",
        "void setMslAltitudeMeters(double mslAltitudeMeters)": "Sets the Mean Sea Level altitude of this location in meters.",
        "void setProvider(String provider)": "Sets the name of the provider associated with this location",
        "void setSpeed(float speedMetersPerSecond)": "Set the speed at the time of this location, in meters per second.",
        "void setSpeedAccuracyMetersPerSecond(float speedAccuracyMeterPerSecond)": "Set the speed accuracy of this location in meters per second.",
        "void setTime(long timeMs)": "Sets the Unix epoch time of this location fix, in milliseconds since the start of the Unix epoch (00:00:00 January 1 1970 UTC).",
        "void setVerticalAccuracyMeters(float altitudeAccuracyMeters)": "Set the altitude accuracy of this location in meters.",
        "String toString()": "Returns a string representation of the object.",
        "void writeToParcel(Parcel parcel, int flags)": "Flatten this object in to a Parcel."
    },
    "super class": [
    ]
}
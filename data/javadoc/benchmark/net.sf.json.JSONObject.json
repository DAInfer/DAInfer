{
    "class": "JSONObject",
    "category": "Class",
    "methods": {
        "Object _processValue(Object value, JsonConfig jsonConfig)": "Processes the given value using the specified JsonConfig.",
        "JSONObject accumulate(String key, boolean value)": "Accumulates boolean values under a key.",
        "JSONObject accumulate(String key, double value)": "Accumulates double values under a key.",
        "JSONObject accumulate(String key, int value)": "Accumulates integer values under a key.",
        "JSONObject accumulate(String key, long value)": "Accumulates long values under a key.",
        "JSONObject accumulate(String key, Object value)": "Accumulates values under a key.",
        "JSONObject accumulate(String key, Object value, JsonConfig jsonConfig)": "Accumulates values under a key using the specified JsonConfig.",
        "void accumulateAll(Map map)": "Accumulates all values from the given map.",
        "void accumulateAll(Map map, JsonConfig jsonConfig)": "Accumulates all values from the given map using the specified JsonConfig.",
        "boolean addInstance(Object instance)": "Adds a reference for cycle detection check.",
        "void clear()": "Removes all name/value mappings from the JSONObject.",
        "int compareTo(Object obj)": "Compares this JSONObject with the specified object for order.",
        "boolean containsKey(Object key)": "Returns true if this JSONObject contains a mapping for the specified key.",
        "boolean containsValue(Object value)": "Returns true if this JSONObject contains a mapping for the specified value.",
        "boolean containsValue(Object value, JsonConfig jsonConfig)": "Returns true if this JSONObject contains a mapping for the specified value using the specified JsonConfig.",
        "JSONObject discard(String key)": "Removes the mapping for the specified key and its corresponding value from this JSONObject.",
        "JSONObject element(String key, boolean value)": "Puts a key/boolean pair in the JSONObject.",
        "JSONObject element(String key, Collection value)": "Puts a key/value pair in the JSONObject, where the value will be a JSONArray which is produced from a Collection.",
        "JSONObject element(String key, Collection value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject, where the value will be a JSONArray which is produced from a Collection using the specified JsonConfig.",
        "JSONObject element(String key, double value)": "Puts a key/double pair in the JSONObject.",
        "JSONObject element(String key, int value)": "Puts a key/int pair in the JSONObject.",
        "JSONObject element(String key, long value)": "Puts a key/long pair in the JSONObject.",
        "JSONObject element(String key, Map value)": "Puts a key/value pair in the JSONObject, where the value will be a JSONObject which is produced from a Map.",
        "JSONObject element(String key, Map value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject, where the value will be a JSONObject which is produced from a Map using the specified JsonConfig.",
        "JSONObject element(String key, Object value)": "Puts a key/value pair in the JSONObject.",
        "JSONObject element(String key, Object value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject using the specified JsonConfig.",
        "JSONObject elementOpt(String key, Object value)": "Puts a key/value pair in the JSONObject, but only if the key and the value are both non-null.",
        "JSONObject elementOpt(String key, Object value, JsonConfig jsonConfig)": "Puts a key/value pair in the JSONObject, but only if the key and the value are both non-null using the specified JsonConfig.",
        "Set entrySet()": "Returns a set view of the mappings contained in this JSONObject.",
        "boolean equals(Object obj)": "Compares this JSONObject with the specified object for equality.",
        "void fireArrayEndEvent(JsonConfig jsonConfig)": "Fires an end of array event.",
        "void fireArrayStartEvent(JsonConfig jsonConfig)": "Fires a start of array event.",
        "void fireElementAddedEvent(int index, Object element, JsonConfig jsonConfig)": "Fires an element added event.",
        "void fireErrorEvent(JSONException jsone, JsonConfig jsonConfig)": "Fires an error event.",
        "void fireObjectEndEvent(JsonConfig jsonConfig)": "Fires an end of object event.",
        "void fireObjectStartEvent(JsonConfig jsonConfig)": "Fires a start of object event.",
        "void firePropertySetEvent(String key, Object value, boolean accumulated, JsonConfig jsonConfig)": "Fires a property set event.",
        "void fireWarnEvent(String warning, JsonConfig jsonConfig)": "Fires a warning event.",
        "JSONObject fromObject(Object object)": "Creates a JSONObject by inspecting the object type.",
        "Object get(Object key)": "",
        "Object get(String key)": "Gets the value object associated with a key.",
        "boolean getBoolean(String key)": "Gets the boolean value associated with a key.",
        "double getDouble(String key)": "Gets the double value associated with a key.",
        "int getInt(String key)": "Gets the int value associated with a key.",
        "JSONArray getJSONArray(String key)": "Gets the JSONArray value associated with a key.",
        "JSONObject getJSONObject(String key)": "Gets the JSONObject value associated with a key.",
        "String getString(String key)": "Gets the string associated with a key.",
        "boolean has(String key)": "Determines if the JSONObject contains a specific key.",
        "boolean isArray()": "Returns true if this object is a JSONArray, false otherwise.",
        "boolean isEmpty()": "Returns true if this object has no elements or keys.",
        "Object opt(String key)": "Gets an optional value associated with a key.",
        "boolean optBoolean(String key)": "Gets an optional boolean associated with a key.",
        "double optDouble(String key)": "Gets an optional double associated with a key, or NaN if there is no such key or if its value is not a number.",
        "int optInt(String key)": "Gets an optional int value associated with a key, or zero if there is no such key or if the value is not a number.",
        "JSONArray optJSONArray(String key)": "Gets an optional JSONArray associated with a key.",
        "JSONObject optJSONObject(String key)": "Gets an optional JSONObject associated with a key.",
        "long optLong(String key)": "Gets an optional long value associated with a key, or zero if there is no such key or if the value is not a number.",
        "long optLong(String key, long defaultValue)": "Gets an optional long value associated with a key, or the default if there is no such key or if the value is not a number.",
        "String optString(String key)": "Gets an optional string associated with a key.",
        "String optString(String key, String defaultValue)": "Gets an optional string associated with a key, or the default if there is no such key.",
        "Object put(Object key, Object value)": "Adds a key-value pair to the JSONObject.",
        "void putAll(Map map)": "Adds all key-value pairs from a Map to the JSONObject.",
        "Object remove(Object key) or remove(String key)": "Removes a key-value pair from the JSONObject.",
        "int size()": "Gets the number of keys stored in the JSONObject.",
        "JSONArray toJSONArray(JSONArray names)": "Produces a JSONArray containing the values of the members of this JSONObject.",
        "String toString()": "Makes a JSON text of this JSONObject.",
        "String toString(int indentFactor)": "Makes a prettyprinted JSON text of this JSONObject with the specified indentation factor.",
        "String toString(int indentFactor, int indent)": "Makes a prettyprinted JSON text of this JSONObject with the specified indentation factor and indentation level.",
        "Writer write(Writer writer)": "Writes the contents of the JSONObject as JSON text to a writer.",
        "Object toBean(JSONObject jsonObject)": "Creates a JSONDynaBean from a JSONObject.",
        "Object toBean(JSONObject jsonObject, Class beanClass)": "Creates a bean from a JSONObject with a specific target class.",
        "Object toBean(JSONObject jsonObject, Class beanClass, Map classMap)": "Creates a bean from a JSONObject with a specific target class and class map.",
        "Object toBean(JSONObject jsonObject, JsonConfig jsonConfig)": "Creates a bean from a JSONObject with a specific configuration.",
        "Object toBean(JSONObject jsonObject, Object root, JsonConfig jsonConfig)": "Creates a bean from a JSONObject with a specific configuration and root object."
    },
    "super class": []
}
{
    "class": "TreeMap",
    "category": "Class",
    "methods": {
        "Map.Entry ceilingEntry(K key)": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.",
        "K ceilingKey(K key)": "Returns the least key greater than or equal to the given key, or null if there is no such key.",
        "void clear()": "Removes all of the mappings from this map.",
        "Object clone()": "Returns a shallow copy of this TreeMap instance.",
        "Comparator comparator()": "Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.",
        "boolean containsKey(Object key)": "Returns true if this map contains a mapping for the specified key.",
        "boolean containsValue(Object value)": "Returns true if this map maps one or more keys to the specified value.",
        "NavigableSet descendingKeySet()": "Returns a reverse order NavigableSet view of the keys contained in this map.",
        "NavigableMap descendingMap()": "Returns a reverse order view of the mappings contained in this map.",
        "Set entrySet()": "Returns a Set view of the mappings contained in this map.",
        "Map.Entry firstEntry()": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
        "K firstKey()": "Returns the first (lowest) key currently in this map.",
        "Map.Entry floorEntry(K key)": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.",
        "K floorKey(K key)": "Returns the greatest key less than or equal to the given key, or null if there is no such key.",
        "void forEach(BiConsumer action)": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
        "V get(Object key)": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
        "SortedMap headMap(K toKey)": "Returns a view of the portion of this map whose keys are strictly less than toKey.",
        "NavigableMap headMap(K toKey, boolean inclusive)": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.",
        "Map.Entry higherEntry(K key)": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.",
        "K higherKey(K key)": "Returns the least key strictly greater than the given key, or null if there is no such key.",
        "Set keySet()": "Returns a Set view of the keys contained in this map.",
        "Map.Entry lastEntry()": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
        "K lastKey()": "Returns the last (highest) key currently in this map.",
        "Map.Entry lowerEntry(K key)": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.",
        "K lowerKey(K key)": "Returns the greatest key strictly less than the given key, or null if there is no such key.",
        "NavigableSet navigableKeySet()": "Returns a NavigableSet view of the keys contained in this map.",
        "Map.Entry pollFirstEntry()": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
        "Map.Entry pollLastEntry()": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
        "V put(K key, V value)": "Associates the specified value with the specified key in this map.",
        "void putAll(Map map)": "Copies all of the mappings from the specified map to this map.",
        "V remove(Object key)": "Removes the mapping for this key from this TreeMap if present.",
        "V replace(K key, V value)": "Replaces the entry for the specified key only if it is currently mapped to some value.",
        "boolean replace(K key, V oldValue, V newValue)": "Replaces the entry for the specified key only if currently mapped to the specified value.",
        "void replaceAll(BiFunction function)": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
        "int size()": "Returns the number of key-value mappings in this map.",
        "NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)": "Returns a view of the portion of this map whose keys range from fromKey to toKey.",
        "SortedMap subMap(K fromKey, K toKey)": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.",
        "SortedMap tailMap(K fromKey)": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey.",
        "NavigableMap tailMap(K fromKey, boolean inclusive)": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.",
        "Collection values()": "Returns a Collection view of the values contained in this map."
    },
    "super class": [
        "java.util.AbstractMap",
        "java.util.Map",
        "java.util.NavigableMap",
        "java.lang.Iterable"
    ]
}
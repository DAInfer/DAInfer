{
    "class": "KeyStore",
    "category": "Class",
    "methods": {
        "Enumeration aliases()": "Lists all the alias names of this keystore.",
        "boolean containsAlias(String alias)": "Checks if the given alias exists in this keystore.",
        "void deleteEntry(String alias)": "Deletes the entry identified by the given alias from this keystore.",
        "boolean entryInstanceOf(String alias, Class entryClass)": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.",
        "Certificate getCertificate(String alias)": "Returns the certificate associated with the given alias.",
        "String getCertificateAlias(Certificate cert)": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.",
        "Certificate[] getCertificateChain(String alias)": "Returns the certificate chain associated with the given alias.",
        "Date getCreationDate(String alias)": "Returns the creation date of the entry identified by the given alias.",
        "String getDefaultType()": "Returns the default keystore type as specified by the keystore.type security property, or the string \"jks\" (acronym for \"Java keystore\") if no such property exists.",
        "KeyStore.Entry getEntry(String alias, KeyStore.ProtectionParameter protParam)": "Gets a keystore Entry for the specified alias with the specified protection parameter.",
        "KeyStore getInstance(String type)": "Returns a keystore object of the specified type.",
        "KeyStore getInstance(String type, Provider provider)": "Returns a keystore object of the specified type.",
        "KeyStore getInstance(String type, String provider)": "Returns a keystore object of the specified type.",
        "Key getKey(String alias, char[] password)": "Returns the key associated with the given alias, using the given password to recover it.",
        "Provider getProvider()": "Returns the provider of this keystore.",
        "String getType()": "Returns the type of this keystore.",
        "boolean isCertificateEntry(String alias)": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.",
        "boolean isKeyEntry(String alias)": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.",
        "void load(InputStream stream, char[] password)": "Loads this KeyStore from the given input stream.",
        "void load(KeyStore.LoadStoreParameter param)": "Loads this keystore using the given LoadStoreParameter.",
        "void setCertificateEntry(String alias, Certificate cert)": "Assigns the given trusted certificate to the given alias.",
        "void setEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)": "Saves a keystore Entry under the specified alias.",
        "void setKeyEntry(String alias, byte[] key, Certificate[] chain)": "Assigns the given key (that has already been protected) to the given alias.",
        "void setKeyEntry(String alias, Key key, char[] password, Certificate[] chain)": "Assigns the given key to the given alias, protecting it with the given password.",
        "int size()": "Retrieves the number of entries in this keystore.",
        "void store(KeyStore.LoadStoreParameter param)": "Stores this keystore using the given LoadStoreParameter.",
        "void store(OutputStream stream, char[] password)": "Stores this keystore to the given output stream, and protects its integrity with the given password."
    },
    "super class": []
}
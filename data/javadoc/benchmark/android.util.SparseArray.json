{
    "class": "SparseArray",
    "category": "class",
    "methods": {
        "void append(int key, E value)": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.",
        "void clear()": "Removes all key-value mappings from this SparseArray.",
        "SparseArray clone()": "Creates and returns a copy of this object.",
        "boolean contains(int key)": "Returns true if the key exists in the array.",
        "boolean contentEquals(SparseArray other)": "Compares the contents of this SparseArray to the specified SparseArray.",
        "int contentHashCode()": "Returns a hash code value for the contents of this SparseArray, combining the Objects#hashCode(Object) result of all its keys and values.",
        "void delete(int key)": "Removes the mapping from the specified key, if there was any.",
        "E get(int key)": "Gets the Object mapped from the specified key, or null if no such mapping has been made.",
        "E get(int key, E valueIfKeyNotFound)": "Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made.",
        "int indexOfKey(int key)": "Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped.",
        "int indexOfValue(E value)": "Returns an index for which valueAt(int) would return the specified value, or a negative number if no keys map to the specified value.",
        "int keyAt(int index)": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseArray stores.",
        "void put(int key, E value)": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.",
        "void remove(int key)": "Alias for delete(int).",
        "void removeAt(int index)": "Removes the mapping at the specified index.",
        "void removeAtRange(int index, int size)": "Remove a range of mappings as a batch.",
        "void set(int key, E value)": "Alias for put(int, java.lang.Object) to support Kotlin [index]= operator.",
        "void setValueAt(int index, E value)": "Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this SparseArray stores.",
        "int size()": "Returns the number of key-value mappings that this SparseArray currently stores.",
        "String toString()": "Returns a string representation of the object. This implementation composes a string by iterating over its mappings.",
        "E valueAt(int index)": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseArray stores."
    },
    "super class": [
    ]
}